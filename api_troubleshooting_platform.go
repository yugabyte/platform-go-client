/*
 * YugabyteDB Anywhere APIs
 *
 * ALPHA - NOT FOR EXTERNAL USE
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ywclient

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// TroubleshootingPlatformApiService TroubleshootingPlatformApi service
type TroubleshootingPlatformApiService service

type TroubleshootingPlatformApiApiCheckRegisteredRequest struct {
	ctx _context.Context
	ApiService *TroubleshootingPlatformApiService
	cUUID string
	tpUUID string
	uUUID string
	request *interface{}
}

func (r TroubleshootingPlatformApiApiCheckRegisteredRequest) Request(request interface{}) TroubleshootingPlatformApiApiCheckRegisteredRequest {
	r.request = &request
	return r
}

func (r TroubleshootingPlatformApiApiCheckRegisteredRequest) Execute() (YBPSuccess, *_nethttp.Response, error) {
	return r.ApiService.CheckRegisteredExecute(r)
}

/*
 * CheckRegistered Check if universe is registered with Troubleshooting Platform
 * YbaApi Internal.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param cUUID
 * @param tpUUID
 * @param uUUID
 * @return TroubleshootingPlatformApiApiCheckRegisteredRequest
 */
func (a *TroubleshootingPlatformApiService) CheckRegistered(ctx _context.Context, cUUID string, tpUUID string, uUUID string) TroubleshootingPlatformApiApiCheckRegisteredRequest {
	return TroubleshootingPlatformApiApiCheckRegisteredRequest{
		ApiService: a,
		ctx: ctx,
		cUUID: cUUID,
		tpUUID: tpUUID,
		uUUID: uUUID,
	}
}

/*
 * Execute executes the request
 * @return YBPSuccess
 */
func (a *TroubleshootingPlatformApiService) CheckRegisteredExecute(r TroubleshootingPlatformApiApiCheckRegisteredRequest) (YBPSuccess, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  YBPSuccess
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TroubleshootingPlatformApiService.CheckRegistered")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/customers/{cUUID}/troubleshooting_platform/{tpUUID}/universes/{uUUID}"
	localVarPath = strings.Replace(localVarPath, "{"+"cUUID"+"}", _neturl.PathEscape(parameterToString(r.cUUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tpUUID"+"}", _neturl.PathEscape(parameterToString(r.tpUUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"uUUID"+"}", _neturl.PathEscape(parameterToString(r.uUUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.request != nil {
		localVarQueryParams.Add("request", parameterToString(*r.request, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-AUTH-YW-API-TOKEN"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TroubleshootingPlatformApiApiCreateTroubleshootingPlatformRequest struct {
	ctx _context.Context
	ApiService *TroubleshootingPlatformApiService
	cUUID string
	platformData *TroubleshootingPlatform
	request *interface{}
}

func (r TroubleshootingPlatformApiApiCreateTroubleshootingPlatformRequest) PlatformData(platformData TroubleshootingPlatform) TroubleshootingPlatformApiApiCreateTroubleshootingPlatformRequest {
	r.platformData = &platformData
	return r
}
func (r TroubleshootingPlatformApiApiCreateTroubleshootingPlatformRequest) Request(request interface{}) TroubleshootingPlatformApiApiCreateTroubleshootingPlatformRequest {
	r.request = &request
	return r
}

func (r TroubleshootingPlatformApiApiCreateTroubleshootingPlatformRequest) Execute() (TroubleshootingPlatform, *_nethttp.Response, error) {
	return r.ApiService.CreateTroubleshootingPlatformExecute(r)
}

/*
 * CreateTroubleshootingPlatform Create Troubleshooting Platform
 * YbaApi Internal.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param cUUID
 * @return TroubleshootingPlatformApiApiCreateTroubleshootingPlatformRequest
 */
func (a *TroubleshootingPlatformApiService) CreateTroubleshootingPlatform(ctx _context.Context, cUUID string) TroubleshootingPlatformApiApiCreateTroubleshootingPlatformRequest {
	return TroubleshootingPlatformApiApiCreateTroubleshootingPlatformRequest{
		ApiService: a,
		ctx: ctx,
		cUUID: cUUID,
	}
}

/*
 * Execute executes the request
 * @return TroubleshootingPlatform
 */
func (a *TroubleshootingPlatformApiService) CreateTroubleshootingPlatformExecute(r TroubleshootingPlatformApiApiCreateTroubleshootingPlatformRequest) (TroubleshootingPlatform, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TroubleshootingPlatform
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TroubleshootingPlatformApiService.CreateTroubleshootingPlatform")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/customers/{cUUID}/troubleshooting_platform"
	localVarPath = strings.Replace(localVarPath, "{"+"cUUID"+"}", _neturl.PathEscape(parameterToString(r.cUUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.platformData == nil {
		return localVarReturnValue, nil, reportError("platformData is required and must be specified")
	}

	if r.request != nil {
		localVarQueryParams.Add("request", parameterToString(*r.request, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.platformData
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-AUTH-YW-API-TOKEN"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TroubleshootingPlatformApiApiDeleteTroubleshootingPlatformRequest struct {
	ctx _context.Context
	ApiService *TroubleshootingPlatformApiService
	cUUID string
	tpUUID string
	force *bool
	request *interface{}
}

func (r TroubleshootingPlatformApiApiDeleteTroubleshootingPlatformRequest) Force(force bool) TroubleshootingPlatformApiApiDeleteTroubleshootingPlatformRequest {
	r.force = &force
	return r
}
func (r TroubleshootingPlatformApiApiDeleteTroubleshootingPlatformRequest) Request(request interface{}) TroubleshootingPlatformApiApiDeleteTroubleshootingPlatformRequest {
	r.request = &request
	return r
}

func (r TroubleshootingPlatformApiApiDeleteTroubleshootingPlatformRequest) Execute() (bool, *_nethttp.Response, error) {
	return r.ApiService.DeleteTroubleshootingPlatformExecute(r)
}

/*
 * DeleteTroubleshootingPlatform Delete Troubleshooting Platform
 * YbaApi Internal.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param cUUID
 * @param tpUUID
 * @return TroubleshootingPlatformApiApiDeleteTroubleshootingPlatformRequest
 */
func (a *TroubleshootingPlatformApiService) DeleteTroubleshootingPlatform(ctx _context.Context, cUUID string, tpUUID string) TroubleshootingPlatformApiApiDeleteTroubleshootingPlatformRequest {
	return TroubleshootingPlatformApiApiDeleteTroubleshootingPlatformRequest{
		ApiService: a,
		ctx: ctx,
		cUUID: cUUID,
		tpUUID: tpUUID,
	}
}

/*
 * Execute executes the request
 * @return bool
 */
func (a *TroubleshootingPlatformApiService) DeleteTroubleshootingPlatformExecute(r TroubleshootingPlatformApiApiDeleteTroubleshootingPlatformRequest) (bool, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  bool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TroubleshootingPlatformApiService.DeleteTroubleshootingPlatform")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/customers/{cUUID}/troubleshooting_platform/{tpUUID}"
	localVarPath = strings.Replace(localVarPath, "{"+"cUUID"+"}", _neturl.PathEscape(parameterToString(r.cUUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tpUUID"+"}", _neturl.PathEscape(parameterToString(r.tpUUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.force != nil {
		localVarQueryParams.Add("force", parameterToString(*r.force, ""))
	}
	if r.request != nil {
		localVarQueryParams.Add("request", parameterToString(*r.request, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-AUTH-YW-API-TOKEN"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TroubleshootingPlatformApiApiEditTroubleshootingPlatformRequest struct {
	ctx _context.Context
	ApiService *TroubleshootingPlatformApiService
	cUUID string
	tpUUID string
	platformData *TroubleshootingPlatform
	force *bool
	request *interface{}
}

func (r TroubleshootingPlatformApiApiEditTroubleshootingPlatformRequest) PlatformData(platformData TroubleshootingPlatform) TroubleshootingPlatformApiApiEditTroubleshootingPlatformRequest {
	r.platformData = &platformData
	return r
}
func (r TroubleshootingPlatformApiApiEditTroubleshootingPlatformRequest) Force(force bool) TroubleshootingPlatformApiApiEditTroubleshootingPlatformRequest {
	r.force = &force
	return r
}
func (r TroubleshootingPlatformApiApiEditTroubleshootingPlatformRequest) Request(request interface{}) TroubleshootingPlatformApiApiEditTroubleshootingPlatformRequest {
	r.request = &request
	return r
}

func (r TroubleshootingPlatformApiApiEditTroubleshootingPlatformRequest) Execute() (TroubleshootingPlatform, *_nethttp.Response, error) {
	return r.ApiService.EditTroubleshootingPlatformExecute(r)
}

/*
 * EditTroubleshootingPlatform Edit Troubleshooting Platform
 * YbaApi Internal.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param cUUID
 * @param tpUUID
 * @return TroubleshootingPlatformApiApiEditTroubleshootingPlatformRequest
 */
func (a *TroubleshootingPlatformApiService) EditTroubleshootingPlatform(ctx _context.Context, cUUID string, tpUUID string) TroubleshootingPlatformApiApiEditTroubleshootingPlatformRequest {
	return TroubleshootingPlatformApiApiEditTroubleshootingPlatformRequest{
		ApiService: a,
		ctx: ctx,
		cUUID: cUUID,
		tpUUID: tpUUID,
	}
}

/*
 * Execute executes the request
 * @return TroubleshootingPlatform
 */
func (a *TroubleshootingPlatformApiService) EditTroubleshootingPlatformExecute(r TroubleshootingPlatformApiApiEditTroubleshootingPlatformRequest) (TroubleshootingPlatform, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TroubleshootingPlatform
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TroubleshootingPlatformApiService.EditTroubleshootingPlatform")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/customers/{cUUID}/troubleshooting_platform/{tpUUID}"
	localVarPath = strings.Replace(localVarPath, "{"+"cUUID"+"}", _neturl.PathEscape(parameterToString(r.cUUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tpUUID"+"}", _neturl.PathEscape(parameterToString(r.tpUUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.platformData == nil {
		return localVarReturnValue, nil, reportError("platformData is required and must be specified")
	}

	if r.force != nil {
		localVarQueryParams.Add("force", parameterToString(*r.force, ""))
	}
	if r.request != nil {
		localVarQueryParams.Add("request", parameterToString(*r.request, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.platformData
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-AUTH-YW-API-TOKEN"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TroubleshootingPlatformApiApiGetTroubleshootingPlatformRequest struct {
	ctx _context.Context
	ApiService *TroubleshootingPlatformApiService
	cUUID string
	tpUUID string
}


func (r TroubleshootingPlatformApiApiGetTroubleshootingPlatformRequest) Execute() (TroubleshootingPlatformDetailsModel, *_nethttp.Response, error) {
	return r.ApiService.GetTroubleshootingPlatformExecute(r)
}

/*
 * GetTroubleshootingPlatform Get Troubleshooting Platform
 * YbaApi Internal.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param cUUID
 * @param tpUUID
 * @return TroubleshootingPlatformApiApiGetTroubleshootingPlatformRequest
 */
func (a *TroubleshootingPlatformApiService) GetTroubleshootingPlatform(ctx _context.Context, cUUID string, tpUUID string) TroubleshootingPlatformApiApiGetTroubleshootingPlatformRequest {
	return TroubleshootingPlatformApiApiGetTroubleshootingPlatformRequest{
		ApiService: a,
		ctx: ctx,
		cUUID: cUUID,
		tpUUID: tpUUID,
	}
}

/*
 * Execute executes the request
 * @return TroubleshootingPlatformDetailsModel
 */
func (a *TroubleshootingPlatformApiService) GetTroubleshootingPlatformExecute(r TroubleshootingPlatformApiApiGetTroubleshootingPlatformRequest) (TroubleshootingPlatformDetailsModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TroubleshootingPlatformDetailsModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TroubleshootingPlatformApiService.GetTroubleshootingPlatform")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/customers/{cUUID}/troubleshooting_platform/{tpUUID}"
	localVarPath = strings.Replace(localVarPath, "{"+"cUUID"+"}", _neturl.PathEscape(parameterToString(r.cUUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tpUUID"+"}", _neturl.PathEscape(parameterToString(r.tpUUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-AUTH-YW-API-TOKEN"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TroubleshootingPlatformApiApiListAllTroubleshootingPlatformsRequest struct {
	ctx _context.Context
	ApiService *TroubleshootingPlatformApiService
	cUUID string
}


func (r TroubleshootingPlatformApiApiListAllTroubleshootingPlatformsRequest) Execute() ([]TroubleshootingPlatformDetailsModel, *_nethttp.Response, error) {
	return r.ApiService.ListAllTroubleshootingPlatformsExecute(r)
}

/*
 * ListAllTroubleshootingPlatforms List All Troubleshooting Platforms
 * YbaApi Internal.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param cUUID
 * @return TroubleshootingPlatformApiApiListAllTroubleshootingPlatformsRequest
 */
func (a *TroubleshootingPlatformApiService) ListAllTroubleshootingPlatforms(ctx _context.Context, cUUID string) TroubleshootingPlatformApiApiListAllTroubleshootingPlatformsRequest {
	return TroubleshootingPlatformApiApiListAllTroubleshootingPlatformsRequest{
		ApiService: a,
		ctx: ctx,
		cUUID: cUUID,
	}
}

/*
 * Execute executes the request
 * @return []TroubleshootingPlatformDetailsModel
 */
func (a *TroubleshootingPlatformApiService) ListAllTroubleshootingPlatformsExecute(r TroubleshootingPlatformApiApiListAllTroubleshootingPlatformsRequest) ([]TroubleshootingPlatformDetailsModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []TroubleshootingPlatformDetailsModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TroubleshootingPlatformApiService.ListAllTroubleshootingPlatforms")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/customers/{cUUID}/troubleshooting_platform"
	localVarPath = strings.Replace(localVarPath, "{"+"cUUID"+"}", _neturl.PathEscape(parameterToString(r.cUUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-AUTH-YW-API-TOKEN"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TroubleshootingPlatformApiApiRegisterUniverseRequest struct {
	ctx _context.Context
	ApiService *TroubleshootingPlatformApiService
	cUUID string
	tpUUID string
	uUUID string
	request *interface{}
}

func (r TroubleshootingPlatformApiApiRegisterUniverseRequest) Request(request interface{}) TroubleshootingPlatformApiApiRegisterUniverseRequest {
	r.request = &request
	return r
}

func (r TroubleshootingPlatformApiApiRegisterUniverseRequest) Execute() (YBPSuccess, *_nethttp.Response, error) {
	return r.ApiService.RegisterUniverseExecute(r)
}

/*
 * RegisterUniverse Register universe with Troubleshooting Platform
 * YbaApi Internal.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param cUUID
 * @param tpUUID
 * @param uUUID
 * @return TroubleshootingPlatformApiApiRegisterUniverseRequest
 */
func (a *TroubleshootingPlatformApiService) RegisterUniverse(ctx _context.Context, cUUID string, tpUUID string, uUUID string) TroubleshootingPlatformApiApiRegisterUniverseRequest {
	return TroubleshootingPlatformApiApiRegisterUniverseRequest{
		ApiService: a,
		ctx: ctx,
		cUUID: cUUID,
		tpUUID: tpUUID,
		uUUID: uUUID,
	}
}

/*
 * Execute executes the request
 * @return YBPSuccess
 */
func (a *TroubleshootingPlatformApiService) RegisterUniverseExecute(r TroubleshootingPlatformApiApiRegisterUniverseRequest) (YBPSuccess, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  YBPSuccess
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TroubleshootingPlatformApiService.RegisterUniverse")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/customers/{cUUID}/troubleshooting_platform/{tpUUID}/universes/{uUUID}"
	localVarPath = strings.Replace(localVarPath, "{"+"cUUID"+"}", _neturl.PathEscape(parameterToString(r.cUUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tpUUID"+"}", _neturl.PathEscape(parameterToString(r.tpUUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"uUUID"+"}", _neturl.PathEscape(parameterToString(r.uUUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.request != nil {
		localVarQueryParams.Add("request", parameterToString(*r.request, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-AUTH-YW-API-TOKEN"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TroubleshootingPlatformApiApiUnregisterUniverseRequest struct {
	ctx _context.Context
	ApiService *TroubleshootingPlatformApiService
	cUUID string
	tpUUID string
	uUUID string
	request *interface{}
}

func (r TroubleshootingPlatformApiApiUnregisterUniverseRequest) Request(request interface{}) TroubleshootingPlatformApiApiUnregisterUniverseRequest {
	r.request = &request
	return r
}

func (r TroubleshootingPlatformApiApiUnregisterUniverseRequest) Execute() (YBPSuccess, *_nethttp.Response, error) {
	return r.ApiService.UnregisterUniverseExecute(r)
}

/*
 * UnregisterUniverse Unregister universe from Troubleshooting Platform
 * YbaApi Internal.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param cUUID
 * @param tpUUID
 * @param uUUID
 * @return TroubleshootingPlatformApiApiUnregisterUniverseRequest
 */
func (a *TroubleshootingPlatformApiService) UnregisterUniverse(ctx _context.Context, cUUID string, tpUUID string, uUUID string) TroubleshootingPlatformApiApiUnregisterUniverseRequest {
	return TroubleshootingPlatformApiApiUnregisterUniverseRequest{
		ApiService: a,
		ctx: ctx,
		cUUID: cUUID,
		tpUUID: tpUUID,
		uUUID: uUUID,
	}
}

/*
 * Execute executes the request
 * @return YBPSuccess
 */
func (a *TroubleshootingPlatformApiService) UnregisterUniverseExecute(r TroubleshootingPlatformApiApiUnregisterUniverseRequest) (YBPSuccess, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  YBPSuccess
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TroubleshootingPlatformApiService.UnregisterUniverse")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/customers/{cUUID}/troubleshooting_platform/{tpUUID}/universes/{uUUID}"
	localVarPath = strings.Replace(localVarPath, "{"+"cUUID"+"}", _neturl.PathEscape(parameterToString(r.cUUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tpUUID"+"}", _neturl.PathEscape(parameterToString(r.tpUUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"uUUID"+"}", _neturl.PathEscape(parameterToString(r.uUUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.request != nil {
		localVarQueryParams.Add("request", parameterToString(*r.request, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-AUTH-YW-API-TOKEN"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
