/*
 * Yugabyte Platform APIs
 *
 * ALPHA - NOT FOR EXTERNAL USE
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ywclient

import (
	"encoding/json"
)

// TableInfoResp Table information response
type TableInfoResp struct {
	// Keyspace
	KeySpace *string `json:"keySpace,omitempty"`
	// Relation type
	RelationType *string `json:"relationType,omitempty"`
	// Size in bytes
	SizeBytes *float64 `json:"sizeBytes,omitempty"`
	// Table name
	TableName *string `json:"tableName,omitempty"`
	// Table type
	TableType *string `json:"tableType,omitempty"`
	// Table UUID
	TableUUID *string `json:"tableUUID,omitempty"`
}

// NewTableInfoResp instantiates a new TableInfoResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTableInfoResp() *TableInfoResp {
	this := TableInfoResp{}
	return &this
}

// NewTableInfoRespWithDefaults instantiates a new TableInfoResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTableInfoRespWithDefaults() *TableInfoResp {
	this := TableInfoResp{}
	return &this
}

// GetKeySpace returns the KeySpace field value if set, zero value otherwise.
func (o *TableInfoResp) GetKeySpace() string {
	if o == nil || o.KeySpace == nil {
		var ret string
		return ret
	}
	return *o.KeySpace
}

// GetKeySpaceOk returns a tuple with the KeySpace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableInfoResp) GetKeySpaceOk() (*string, bool) {
	if o == nil || o.KeySpace == nil {
		return nil, false
	}
	return o.KeySpace, true
}

// HasKeySpace returns a boolean if a field has been set.
func (o *TableInfoResp) HasKeySpace() bool {
	if o != nil && o.KeySpace != nil {
		return true
	}

	return false
}

// SetKeySpace gets a reference to the given string and assigns it to the KeySpace field.
func (o *TableInfoResp) SetKeySpace(v string) {
	o.KeySpace = &v
}

// GetRelationType returns the RelationType field value if set, zero value otherwise.
func (o *TableInfoResp) GetRelationType() string {
	if o == nil || o.RelationType == nil {
		var ret string
		return ret
	}
	return *o.RelationType
}

// GetRelationTypeOk returns a tuple with the RelationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableInfoResp) GetRelationTypeOk() (*string, bool) {
	if o == nil || o.RelationType == nil {
		return nil, false
	}
	return o.RelationType, true
}

// HasRelationType returns a boolean if a field has been set.
func (o *TableInfoResp) HasRelationType() bool {
	if o != nil && o.RelationType != nil {
		return true
	}

	return false
}

// SetRelationType gets a reference to the given string and assigns it to the RelationType field.
func (o *TableInfoResp) SetRelationType(v string) {
	o.RelationType = &v
}

// GetSizeBytes returns the SizeBytes field value if set, zero value otherwise.
func (o *TableInfoResp) GetSizeBytes() float64 {
	if o == nil || o.SizeBytes == nil {
		var ret float64
		return ret
	}
	return *o.SizeBytes
}

// GetSizeBytesOk returns a tuple with the SizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableInfoResp) GetSizeBytesOk() (*float64, bool) {
	if o == nil || o.SizeBytes == nil {
		return nil, false
	}
	return o.SizeBytes, true
}

// HasSizeBytes returns a boolean if a field has been set.
func (o *TableInfoResp) HasSizeBytes() bool {
	if o != nil && o.SizeBytes != nil {
		return true
	}

	return false
}

// SetSizeBytes gets a reference to the given float64 and assigns it to the SizeBytes field.
func (o *TableInfoResp) SetSizeBytes(v float64) {
	o.SizeBytes = &v
}

// GetTableName returns the TableName field value if set, zero value otherwise.
func (o *TableInfoResp) GetTableName() string {
	if o == nil || o.TableName == nil {
		var ret string
		return ret
	}
	return *o.TableName
}

// GetTableNameOk returns a tuple with the TableName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableInfoResp) GetTableNameOk() (*string, bool) {
	if o == nil || o.TableName == nil {
		return nil, false
	}
	return o.TableName, true
}

// HasTableName returns a boolean if a field has been set.
func (o *TableInfoResp) HasTableName() bool {
	if o != nil && o.TableName != nil {
		return true
	}

	return false
}

// SetTableName gets a reference to the given string and assigns it to the TableName field.
func (o *TableInfoResp) SetTableName(v string) {
	o.TableName = &v
}

// GetTableType returns the TableType field value if set, zero value otherwise.
func (o *TableInfoResp) GetTableType() string {
	if o == nil || o.TableType == nil {
		var ret string
		return ret
	}
	return *o.TableType
}

// GetTableTypeOk returns a tuple with the TableType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableInfoResp) GetTableTypeOk() (*string, bool) {
	if o == nil || o.TableType == nil {
		return nil, false
	}
	return o.TableType, true
}

// HasTableType returns a boolean if a field has been set.
func (o *TableInfoResp) HasTableType() bool {
	if o != nil && o.TableType != nil {
		return true
	}

	return false
}

// SetTableType gets a reference to the given string and assigns it to the TableType field.
func (o *TableInfoResp) SetTableType(v string) {
	o.TableType = &v
}

// GetTableUUID returns the TableUUID field value if set, zero value otherwise.
func (o *TableInfoResp) GetTableUUID() string {
	if o == nil || o.TableUUID == nil {
		var ret string
		return ret
	}
	return *o.TableUUID
}

// GetTableUUIDOk returns a tuple with the TableUUID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableInfoResp) GetTableUUIDOk() (*string, bool) {
	if o == nil || o.TableUUID == nil {
		return nil, false
	}
	return o.TableUUID, true
}

// HasTableUUID returns a boolean if a field has been set.
func (o *TableInfoResp) HasTableUUID() bool {
	if o != nil && o.TableUUID != nil {
		return true
	}

	return false
}

// SetTableUUID gets a reference to the given string and assigns it to the TableUUID field.
func (o *TableInfoResp) SetTableUUID(v string) {
	o.TableUUID = &v
}

func (o TableInfoResp) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.KeySpace != nil {
		toSerialize["keySpace"] = o.KeySpace
	}
	if o.RelationType != nil {
		toSerialize["relationType"] = o.RelationType
	}
	if o.SizeBytes != nil {
		toSerialize["sizeBytes"] = o.SizeBytes
	}
	if o.TableName != nil {
		toSerialize["tableName"] = o.TableName
	}
	if o.TableType != nil {
		toSerialize["tableType"] = o.TableType
	}
	if o.TableUUID != nil {
		toSerialize["tableUUID"] = o.TableUUID
	}
	return json.Marshal(toSerialize)
}

type NullableTableInfoResp struct {
	value *TableInfoResp
	isSet bool
}

func (v NullableTableInfoResp) Get() *TableInfoResp {
	return v.value
}

func (v *NullableTableInfoResp) Set(val *TableInfoResp) {
	v.value = val
	v.isSet = true
}

func (v NullableTableInfoResp) IsSet() bool {
	return v.isSet
}

func (v *NullableTableInfoResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTableInfoResp(val *TableInfoResp) *NullableTableInfoResp {
	return &NullableTableInfoResp{value: val, isSet: true}
}

func (v NullableTableInfoResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTableInfoResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


