/*
 * YugabyteDB Anywhere APIs
 *
 * ALPHA - NOT FOR EXTERNAL USE
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ywclient

import (
	"encoding/json"
	"time"
)

// RestoreKeyspace Keyspace level restores
type RestoreKeyspace struct {
	BackupSizeFromStorageLocation int64 `json:"backupSizeFromStorageLocation"`
	// RestoreKeyspace task completion time
	CompleteTime *time.Time `json:"completeTime,omitempty"`
	// RestoreKeyspace task creation time
	CreateTime *time.Time `json:"createTime,omitempty"`
	// Universe-level Restore UUID
	RestoreUUID *string `json:"restoreUUID,omitempty"`
	// Source keyspace name
	SourceKeyspace *string `json:"sourceKeyspace,omitempty"`
	// State of the keyspace restore
	State *string `json:"state,omitempty"`
	// Storage location name
	StorageLocation *string `json:"storageLocation,omitempty"`
	// Restored Table name List
	TableNameList *[]string `json:"tableNameList,omitempty"`
	// Target keyspace name
	TargetKeyspace *string `json:"targetKeyspace,omitempty"`
	// Restore Keyspace task UUID
	TaskUUID *string `json:"taskUUID,omitempty"`
	// Restore keyspace UUID
	Uuid *string `json:"uuid,omitempty"`
}

// NewRestoreKeyspace instantiates a new RestoreKeyspace object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoreKeyspace(backupSizeFromStorageLocation int64) *RestoreKeyspace {
	this := RestoreKeyspace{}
	this.BackupSizeFromStorageLocation = backupSizeFromStorageLocation
	return &this
}

// NewRestoreKeyspaceWithDefaults instantiates a new RestoreKeyspace object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestoreKeyspaceWithDefaults() *RestoreKeyspace {
	this := RestoreKeyspace{}
	return &this
}

// GetBackupSizeFromStorageLocation returns the BackupSizeFromStorageLocation field value
func (o *RestoreKeyspace) GetBackupSizeFromStorageLocation() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.BackupSizeFromStorageLocation
}

// GetBackupSizeFromStorageLocationOk returns a tuple with the BackupSizeFromStorageLocation field value
// and a boolean to check if the value has been set.
func (o *RestoreKeyspace) GetBackupSizeFromStorageLocationOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BackupSizeFromStorageLocation, true
}

// SetBackupSizeFromStorageLocation sets field value
func (o *RestoreKeyspace) SetBackupSizeFromStorageLocation(v int64) {
	o.BackupSizeFromStorageLocation = v
}

// GetCompleteTime returns the CompleteTime field value if set, zero value otherwise.
func (o *RestoreKeyspace) GetCompleteTime() time.Time {
	if o == nil || o.CompleteTime == nil {
		var ret time.Time
		return ret
	}
	return *o.CompleteTime
}

// GetCompleteTimeOk returns a tuple with the CompleteTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreKeyspace) GetCompleteTimeOk() (*time.Time, bool) {
	if o == nil || o.CompleteTime == nil {
		return nil, false
	}
	return o.CompleteTime, true
}

// HasCompleteTime returns a boolean if a field has been set.
func (o *RestoreKeyspace) HasCompleteTime() bool {
	if o != nil && o.CompleteTime != nil {
		return true
	}

	return false
}

// SetCompleteTime gets a reference to the given time.Time and assigns it to the CompleteTime field.
func (o *RestoreKeyspace) SetCompleteTime(v time.Time) {
	o.CompleteTime = &v
}

// GetCreateTime returns the CreateTime field value if set, zero value otherwise.
func (o *RestoreKeyspace) GetCreateTime() time.Time {
	if o == nil || o.CreateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.CreateTime
}

// GetCreateTimeOk returns a tuple with the CreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreKeyspace) GetCreateTimeOk() (*time.Time, bool) {
	if o == nil || o.CreateTime == nil {
		return nil, false
	}
	return o.CreateTime, true
}

// HasCreateTime returns a boolean if a field has been set.
func (o *RestoreKeyspace) HasCreateTime() bool {
	if o != nil && o.CreateTime != nil {
		return true
	}

	return false
}

// SetCreateTime gets a reference to the given time.Time and assigns it to the CreateTime field.
func (o *RestoreKeyspace) SetCreateTime(v time.Time) {
	o.CreateTime = &v
}

// GetRestoreUUID returns the RestoreUUID field value if set, zero value otherwise.
func (o *RestoreKeyspace) GetRestoreUUID() string {
	if o == nil || o.RestoreUUID == nil {
		var ret string
		return ret
	}
	return *o.RestoreUUID
}

// GetRestoreUUIDOk returns a tuple with the RestoreUUID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreKeyspace) GetRestoreUUIDOk() (*string, bool) {
	if o == nil || o.RestoreUUID == nil {
		return nil, false
	}
	return o.RestoreUUID, true
}

// HasRestoreUUID returns a boolean if a field has been set.
func (o *RestoreKeyspace) HasRestoreUUID() bool {
	if o != nil && o.RestoreUUID != nil {
		return true
	}

	return false
}

// SetRestoreUUID gets a reference to the given string and assigns it to the RestoreUUID field.
func (o *RestoreKeyspace) SetRestoreUUID(v string) {
	o.RestoreUUID = &v
}

// GetSourceKeyspace returns the SourceKeyspace field value if set, zero value otherwise.
func (o *RestoreKeyspace) GetSourceKeyspace() string {
	if o == nil || o.SourceKeyspace == nil {
		var ret string
		return ret
	}
	return *o.SourceKeyspace
}

// GetSourceKeyspaceOk returns a tuple with the SourceKeyspace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreKeyspace) GetSourceKeyspaceOk() (*string, bool) {
	if o == nil || o.SourceKeyspace == nil {
		return nil, false
	}
	return o.SourceKeyspace, true
}

// HasSourceKeyspace returns a boolean if a field has been set.
func (o *RestoreKeyspace) HasSourceKeyspace() bool {
	if o != nil && o.SourceKeyspace != nil {
		return true
	}

	return false
}

// SetSourceKeyspace gets a reference to the given string and assigns it to the SourceKeyspace field.
func (o *RestoreKeyspace) SetSourceKeyspace(v string) {
	o.SourceKeyspace = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *RestoreKeyspace) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreKeyspace) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *RestoreKeyspace) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *RestoreKeyspace) SetState(v string) {
	o.State = &v
}

// GetStorageLocation returns the StorageLocation field value if set, zero value otherwise.
func (o *RestoreKeyspace) GetStorageLocation() string {
	if o == nil || o.StorageLocation == nil {
		var ret string
		return ret
	}
	return *o.StorageLocation
}

// GetStorageLocationOk returns a tuple with the StorageLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreKeyspace) GetStorageLocationOk() (*string, bool) {
	if o == nil || o.StorageLocation == nil {
		return nil, false
	}
	return o.StorageLocation, true
}

// HasStorageLocation returns a boolean if a field has been set.
func (o *RestoreKeyspace) HasStorageLocation() bool {
	if o != nil && o.StorageLocation != nil {
		return true
	}

	return false
}

// SetStorageLocation gets a reference to the given string and assigns it to the StorageLocation field.
func (o *RestoreKeyspace) SetStorageLocation(v string) {
	o.StorageLocation = &v
}

// GetTableNameList returns the TableNameList field value if set, zero value otherwise.
func (o *RestoreKeyspace) GetTableNameList() []string {
	if o == nil || o.TableNameList == nil {
		var ret []string
		return ret
	}
	return *o.TableNameList
}

// GetTableNameListOk returns a tuple with the TableNameList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreKeyspace) GetTableNameListOk() (*[]string, bool) {
	if o == nil || o.TableNameList == nil {
		return nil, false
	}
	return o.TableNameList, true
}

// HasTableNameList returns a boolean if a field has been set.
func (o *RestoreKeyspace) HasTableNameList() bool {
	if o != nil && o.TableNameList != nil {
		return true
	}

	return false
}

// SetTableNameList gets a reference to the given []string and assigns it to the TableNameList field.
func (o *RestoreKeyspace) SetTableNameList(v []string) {
	o.TableNameList = &v
}

// GetTargetKeyspace returns the TargetKeyspace field value if set, zero value otherwise.
func (o *RestoreKeyspace) GetTargetKeyspace() string {
	if o == nil || o.TargetKeyspace == nil {
		var ret string
		return ret
	}
	return *o.TargetKeyspace
}

// GetTargetKeyspaceOk returns a tuple with the TargetKeyspace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreKeyspace) GetTargetKeyspaceOk() (*string, bool) {
	if o == nil || o.TargetKeyspace == nil {
		return nil, false
	}
	return o.TargetKeyspace, true
}

// HasTargetKeyspace returns a boolean if a field has been set.
func (o *RestoreKeyspace) HasTargetKeyspace() bool {
	if o != nil && o.TargetKeyspace != nil {
		return true
	}

	return false
}

// SetTargetKeyspace gets a reference to the given string and assigns it to the TargetKeyspace field.
func (o *RestoreKeyspace) SetTargetKeyspace(v string) {
	o.TargetKeyspace = &v
}

// GetTaskUUID returns the TaskUUID field value if set, zero value otherwise.
func (o *RestoreKeyspace) GetTaskUUID() string {
	if o == nil || o.TaskUUID == nil {
		var ret string
		return ret
	}
	return *o.TaskUUID
}

// GetTaskUUIDOk returns a tuple with the TaskUUID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreKeyspace) GetTaskUUIDOk() (*string, bool) {
	if o == nil || o.TaskUUID == nil {
		return nil, false
	}
	return o.TaskUUID, true
}

// HasTaskUUID returns a boolean if a field has been set.
func (o *RestoreKeyspace) HasTaskUUID() bool {
	if o != nil && o.TaskUUID != nil {
		return true
	}

	return false
}

// SetTaskUUID gets a reference to the given string and assigns it to the TaskUUID field.
func (o *RestoreKeyspace) SetTaskUUID(v string) {
	o.TaskUUID = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *RestoreKeyspace) GetUuid() string {
	if o == nil || o.Uuid == nil {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreKeyspace) GetUuidOk() (*string, bool) {
	if o == nil || o.Uuid == nil {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *RestoreKeyspace) HasUuid() bool {
	if o != nil && o.Uuid != nil {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *RestoreKeyspace) SetUuid(v string) {
	o.Uuid = &v
}

func (o RestoreKeyspace) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["backupSizeFromStorageLocation"] = o.BackupSizeFromStorageLocation
	}
	if o.CompleteTime != nil {
		toSerialize["completeTime"] = o.CompleteTime
	}
	if o.CreateTime != nil {
		toSerialize["createTime"] = o.CreateTime
	}
	if o.RestoreUUID != nil {
		toSerialize["restoreUUID"] = o.RestoreUUID
	}
	if o.SourceKeyspace != nil {
		toSerialize["sourceKeyspace"] = o.SourceKeyspace
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.StorageLocation != nil {
		toSerialize["storageLocation"] = o.StorageLocation
	}
	if o.TableNameList != nil {
		toSerialize["tableNameList"] = o.TableNameList
	}
	if o.TargetKeyspace != nil {
		toSerialize["targetKeyspace"] = o.TargetKeyspace
	}
	if o.TaskUUID != nil {
		toSerialize["taskUUID"] = o.TaskUUID
	}
	if o.Uuid != nil {
		toSerialize["uuid"] = o.Uuid
	}
	return json.Marshal(toSerialize)
}

type NullableRestoreKeyspace struct {
	value *RestoreKeyspace
	isSet bool
}

func (v NullableRestoreKeyspace) Get() *RestoreKeyspace {
	return v.value
}

func (v *NullableRestoreKeyspace) Set(val *RestoreKeyspace) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoreKeyspace) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoreKeyspace) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoreKeyspace(val *RestoreKeyspace) *NullableRestoreKeyspace {
	return &NullableRestoreKeyspace{value: val, isSet: true}
}

func (v NullableRestoreKeyspace) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoreKeyspace) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


