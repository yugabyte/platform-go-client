/*
 * YugabyteDB Anywhere APIs
 *
 * ALPHA - NOT FOR EXTERNAL USE
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ywclient

import (
	"encoding/json"
)

// YBAError struct for YBAError
type YBAError struct {
	// Error code
	Code *string `json:"code,omitempty"`
	// Error message
	Message *string `json:"message,omitempty"`
	// Origin error message
	OriginMessage *string `json:"originMessage,omitempty"`
}

// NewYBAError instantiates a new YBAError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewYBAError() *YBAError {
	this := YBAError{}
	return &this
}

// NewYBAErrorWithDefaults instantiates a new YBAError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewYBAErrorWithDefaults() *YBAError {
	this := YBAError{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *YBAError) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *YBAError) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *YBAError) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *YBAError) SetCode(v string) {
	o.Code = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *YBAError) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *YBAError) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *YBAError) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *YBAError) SetMessage(v string) {
	o.Message = &v
}

// GetOriginMessage returns the OriginMessage field value if set, zero value otherwise.
func (o *YBAError) GetOriginMessage() string {
	if o == nil || o.OriginMessage == nil {
		var ret string
		return ret
	}
	return *o.OriginMessage
}

// GetOriginMessageOk returns a tuple with the OriginMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *YBAError) GetOriginMessageOk() (*string, bool) {
	if o == nil || o.OriginMessage == nil {
		return nil, false
	}
	return o.OriginMessage, true
}

// HasOriginMessage returns a boolean if a field has been set.
func (o *YBAError) HasOriginMessage() bool {
	if o != nil && o.OriginMessage != nil {
		return true
	}

	return false
}

// SetOriginMessage gets a reference to the given string and assigns it to the OriginMessage field.
func (o *YBAError) SetOriginMessage(v string) {
	o.OriginMessage = &v
}

func (o YBAError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.OriginMessage != nil {
		toSerialize["originMessage"] = o.OriginMessage
	}
	return json.Marshal(toSerialize)
}

type NullableYBAError struct {
	value *YBAError
	isSet bool
}

func (v NullableYBAError) Get() *YBAError {
	return v.value
}

func (v *NullableYBAError) Set(val *YBAError) {
	v.value = val
	v.isSet = true
}

func (v NullableYBAError) IsSet() bool {
	return v.isSet
}

func (v *NullableYBAError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableYBAError(val *YBAError) *NullableYBAError {
	return &NullableYBAError{value: val, isSet: true}
}

func (v NullableYBAError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableYBAError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


