/*
 * YugabyteDB Anywhere APIs
 *
 * ALPHA - NOT FOR EXTERNAL USE
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ywclient

import (
	"encoding/json"
)

// ResourceDefinition struct for ResourceDefinition
type ResourceDefinition struct {
	// Select all resources (including future resources)
	AllowAll *bool `json:"allowAll,omitempty"`
	// Resource Type
	ResourceType *string `json:"resourceType,omitempty"`
	// Set of resource uuids
	ResourceUUIDSet *[]string `json:"resourceUUIDSet,omitempty"`
}

// NewResourceDefinition instantiates a new ResourceDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceDefinition() *ResourceDefinition {
	this := ResourceDefinition{}
	return &this
}

// NewResourceDefinitionWithDefaults instantiates a new ResourceDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceDefinitionWithDefaults() *ResourceDefinition {
	this := ResourceDefinition{}
	return &this
}

// GetAllowAll returns the AllowAll field value if set, zero value otherwise.
func (o *ResourceDefinition) GetAllowAll() bool {
	if o == nil || o.AllowAll == nil {
		var ret bool
		return ret
	}
	return *o.AllowAll
}

// GetAllowAllOk returns a tuple with the AllowAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceDefinition) GetAllowAllOk() (*bool, bool) {
	if o == nil || o.AllowAll == nil {
		return nil, false
	}
	return o.AllowAll, true
}

// HasAllowAll returns a boolean if a field has been set.
func (o *ResourceDefinition) HasAllowAll() bool {
	if o != nil && o.AllowAll != nil {
		return true
	}

	return false
}

// SetAllowAll gets a reference to the given bool and assigns it to the AllowAll field.
func (o *ResourceDefinition) SetAllowAll(v bool) {
	o.AllowAll = &v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *ResourceDefinition) GetResourceType() string {
	if o == nil || o.ResourceType == nil {
		var ret string
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceDefinition) GetResourceTypeOk() (*string, bool) {
	if o == nil || o.ResourceType == nil {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *ResourceDefinition) HasResourceType() bool {
	if o != nil && o.ResourceType != nil {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *ResourceDefinition) SetResourceType(v string) {
	o.ResourceType = &v
}

// GetResourceUUIDSet returns the ResourceUUIDSet field value if set, zero value otherwise.
func (o *ResourceDefinition) GetResourceUUIDSet() []string {
	if o == nil || o.ResourceUUIDSet == nil {
		var ret []string
		return ret
	}
	return *o.ResourceUUIDSet
}

// GetResourceUUIDSetOk returns a tuple with the ResourceUUIDSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceDefinition) GetResourceUUIDSetOk() (*[]string, bool) {
	if o == nil || o.ResourceUUIDSet == nil {
		return nil, false
	}
	return o.ResourceUUIDSet, true
}

// HasResourceUUIDSet returns a boolean if a field has been set.
func (o *ResourceDefinition) HasResourceUUIDSet() bool {
	if o != nil && o.ResourceUUIDSet != nil {
		return true
	}

	return false
}

// SetResourceUUIDSet gets a reference to the given []string and assigns it to the ResourceUUIDSet field.
func (o *ResourceDefinition) SetResourceUUIDSet(v []string) {
	o.ResourceUUIDSet = &v
}

func (o ResourceDefinition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowAll != nil {
		toSerialize["allowAll"] = o.AllowAll
	}
	if o.ResourceType != nil {
		toSerialize["resourceType"] = o.ResourceType
	}
	if o.ResourceUUIDSet != nil {
		toSerialize["resourceUUIDSet"] = o.ResourceUUIDSet
	}
	return json.Marshal(toSerialize)
}

type NullableResourceDefinition struct {
	value *ResourceDefinition
	isSet bool
}

func (v NullableResourceDefinition) Get() *ResourceDefinition {
	return v.value
}

func (v *NullableResourceDefinition) Set(val *ResourceDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceDefinition(val *ResourceDefinition) *NullableResourceDefinition {
	return &NullableResourceDefinition{value: val, isSet: true}
}

func (v NullableResourceDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


