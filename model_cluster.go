/*
 * YugabyteDB Anywhere APIs
 *
 * ALPHA - NOT FOR EXTERNAL USE
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ywclient

import (
	"encoding/json"
)

// Cluster struct for Cluster
type Cluster struct {
	ClusterType string `json:"clusterType"`
	Index *int32 `json:"index,omitempty"`
	PlacementInfo *PlacementInfo `json:"placementInfo,omitempty"`
	Regions *[]Region `json:"regions,omitempty"`
	UserIntent UserIntent `json:"userIntent"`
	Uuid *string `json:"uuid,omitempty"`
}

// NewCluster instantiates a new Cluster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCluster(clusterType string, userIntent UserIntent) *Cluster {
	this := Cluster{}
	this.ClusterType = clusterType
	this.UserIntent = userIntent
	return &this
}

// NewClusterWithDefaults instantiates a new Cluster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterWithDefaults() *Cluster {
	this := Cluster{}
	return &this
}

// GetClusterType returns the ClusterType field value
func (o *Cluster) GetClusterType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterType
}

// GetClusterTypeOk returns a tuple with the ClusterType field value
// and a boolean to check if the value has been set.
func (o *Cluster) GetClusterTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ClusterType, true
}

// SetClusterType sets field value
func (o *Cluster) SetClusterType(v string) {
	o.ClusterType = v
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *Cluster) GetIndex() int32 {
	if o == nil || o.Index == nil {
		var ret int32
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetIndexOk() (*int32, bool) {
	if o == nil || o.Index == nil {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *Cluster) HasIndex() bool {
	if o != nil && o.Index != nil {
		return true
	}

	return false
}

// SetIndex gets a reference to the given int32 and assigns it to the Index field.
func (o *Cluster) SetIndex(v int32) {
	o.Index = &v
}

// GetPlacementInfo returns the PlacementInfo field value if set, zero value otherwise.
func (o *Cluster) GetPlacementInfo() PlacementInfo {
	if o == nil || o.PlacementInfo == nil {
		var ret PlacementInfo
		return ret
	}
	return *o.PlacementInfo
}

// GetPlacementInfoOk returns a tuple with the PlacementInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetPlacementInfoOk() (*PlacementInfo, bool) {
	if o == nil || o.PlacementInfo == nil {
		return nil, false
	}
	return o.PlacementInfo, true
}

// HasPlacementInfo returns a boolean if a field has been set.
func (o *Cluster) HasPlacementInfo() bool {
	if o != nil && o.PlacementInfo != nil {
		return true
	}

	return false
}

// SetPlacementInfo gets a reference to the given PlacementInfo and assigns it to the PlacementInfo field.
func (o *Cluster) SetPlacementInfo(v PlacementInfo) {
	o.PlacementInfo = &v
}

// GetRegions returns the Regions field value if set, zero value otherwise.
func (o *Cluster) GetRegions() []Region {
	if o == nil || o.Regions == nil {
		var ret []Region
		return ret
	}
	return *o.Regions
}

// GetRegionsOk returns a tuple with the Regions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetRegionsOk() (*[]Region, bool) {
	if o == nil || o.Regions == nil {
		return nil, false
	}
	return o.Regions, true
}

// HasRegions returns a boolean if a field has been set.
func (o *Cluster) HasRegions() bool {
	if o != nil && o.Regions != nil {
		return true
	}

	return false
}

// SetRegions gets a reference to the given []Region and assigns it to the Regions field.
func (o *Cluster) SetRegions(v []Region) {
	o.Regions = &v
}

// GetUserIntent returns the UserIntent field value
func (o *Cluster) GetUserIntent() UserIntent {
	if o == nil {
		var ret UserIntent
		return ret
	}

	return o.UserIntent
}

// GetUserIntentOk returns a tuple with the UserIntent field value
// and a boolean to check if the value has been set.
func (o *Cluster) GetUserIntentOk() (*UserIntent, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UserIntent, true
}

// SetUserIntent sets field value
func (o *Cluster) SetUserIntent(v UserIntent) {
	o.UserIntent = v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *Cluster) GetUuid() string {
	if o == nil || o.Uuid == nil {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetUuidOk() (*string, bool) {
	if o == nil || o.Uuid == nil {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *Cluster) HasUuid() bool {
	if o != nil && o.Uuid != nil {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *Cluster) SetUuid(v string) {
	o.Uuid = &v
}

func (o Cluster) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["clusterType"] = o.ClusterType
	}
	if o.Index != nil {
		toSerialize["index"] = o.Index
	}
	if o.PlacementInfo != nil {
		toSerialize["placementInfo"] = o.PlacementInfo
	}
	if o.Regions != nil {
		toSerialize["regions"] = o.Regions
	}
	if true {
		toSerialize["userIntent"] = o.UserIntent
	}
	if o.Uuid != nil {
		toSerialize["uuid"] = o.Uuid
	}
	return json.Marshal(toSerialize)
}

type NullableCluster struct {
	value *Cluster
	isSet bool
}

func (v NullableCluster) Get() *Cluster {
	return v.value
}

func (v *NullableCluster) Set(val *Cluster) {
	v.value = val
	v.isSet = true
}

func (v NullableCluster) IsSet() bool {
	return v.isSet
}

func (v *NullableCluster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCluster(val *Cluster) *NullableCluster {
	return &NullableCluster{value: val, isSet: true}
}

func (v NullableCluster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCluster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


