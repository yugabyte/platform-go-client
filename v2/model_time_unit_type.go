/*
 * YugabyteDB Anywhere V2 APIs
 *
 * An improved set of APIs for managing YugabyteDB Anywhere
 *
 * API version: v2
 * Contact: support@yugabyte.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
)

// TimeUnitType TimeUnitType  Time units that correspond to TimeUnit.java enum. Used for variable frequencies. 
type TimeUnitType string

// List of TimeUnitType
const (
	NANOSECONDS TimeUnitType = "NANOSECONDS"
	MICROSECONDS TimeUnitType = "MICROSECONDS"
	MILLISECONDS TimeUnitType = "MILLISECONDS"
	SECONDS TimeUnitType = "SECONDS"
	MINUTES TimeUnitType = "MINUTES"
	HOURS TimeUnitType = "HOURS"
	DAYS TimeUnitType = "DAYS"
	MONTHS TimeUnitType = "MONTHS"
	YEARS TimeUnitType = "YEARS"
)

var allowedTimeUnitTypeEnumValues = []TimeUnitType{
	"NANOSECONDS",
	"MICROSECONDS",
	"MILLISECONDS",
	"SECONDS",
	"MINUTES",
	"HOURS",
	"DAYS",
	"MONTHS",
	"YEARS",
}

func (v *TimeUnitType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TimeUnitType(value)
	for _, existing := range allowedTimeUnitTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TimeUnitType", value)
}

// NewTimeUnitTypeFromValue returns a pointer to a valid TimeUnitType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTimeUnitTypeFromValue(v string) (*TimeUnitType, error) {
	ev := TimeUnitType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TimeUnitType: valid values are %v", v, allowedTimeUnitTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TimeUnitType) IsValid() bool {
	for _, existing := range allowedTimeUnitTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TimeUnitType value
func (v TimeUnitType) Ptr() *TimeUnitType {
	return &v
}

type NullableTimeUnitType struct {
	value *TimeUnitType
	isSet bool
}

func (v NullableTimeUnitType) Get() *TimeUnitType {
	return v.value
}

func (v *NullableTimeUnitType) Set(val *TimeUnitType) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeUnitType) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeUnitType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeUnitType(val *TimeUnitType) *NullableTimeUnitType {
	return &NullableTimeUnitType{value: val, isSet: true}
}

func (v NullableTimeUnitType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeUnitType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

