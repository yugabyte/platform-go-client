/*
 * YugabyteDB Anywhere V2 APIs
 *
 * An improved set of APIs for managing YugabyteDB Anywhere
 *
 * API version: v2
 * Contact: support@yugabyte.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// UniverseUpgradeOptionsAll UniverseUpgradeOptionsAll  Option on how to handle node reboots:   Rolling     - Apply upgrade to each node one at a time (Default)   Non-rolling - Apply upgrade to all nodes at the same time, so has client downtime   Non-restart - Apply upgrade without restarting nodes or processes.                  Applicable to only certain supported Upgrades and GFlags. 
type UniverseUpgradeOptionsAll struct {
	// Option for an upgrade to be rolling (one node at a time) or non-rolling (all nodes at once, with downtime) 
	UpgradeOption *string `json:"upgrade_option,omitempty"`
	RollMaxBatchSize *RollMaxBatchSize `json:"roll_max_batch_size,omitempty"`
}

// NewUniverseUpgradeOptionsAll instantiates a new UniverseUpgradeOptionsAll object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUniverseUpgradeOptionsAll() *UniverseUpgradeOptionsAll {
	this := UniverseUpgradeOptionsAll{}
	var upgradeOption string = "Rolling"
	this.UpgradeOption = &upgradeOption
	return &this
}

// NewUniverseUpgradeOptionsAllWithDefaults instantiates a new UniverseUpgradeOptionsAll object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUniverseUpgradeOptionsAllWithDefaults() *UniverseUpgradeOptionsAll {
	this := UniverseUpgradeOptionsAll{}
	var upgradeOption string = "Rolling"
	this.UpgradeOption = &upgradeOption
	return &this
}

// GetUpgradeOption returns the UpgradeOption field value if set, zero value otherwise.
func (o *UniverseUpgradeOptionsAll) GetUpgradeOption() string {
	if o == nil || o.UpgradeOption == nil {
		var ret string
		return ret
	}
	return *o.UpgradeOption
}

// GetUpgradeOptionOk returns a tuple with the UpgradeOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseUpgradeOptionsAll) GetUpgradeOptionOk() (*string, bool) {
	if o == nil || o.UpgradeOption == nil {
		return nil, false
	}
	return o.UpgradeOption, true
}

// HasUpgradeOption returns a boolean if a field has been set.
func (o *UniverseUpgradeOptionsAll) HasUpgradeOption() bool {
	if o != nil && o.UpgradeOption != nil {
		return true
	}

	return false
}

// SetUpgradeOption gets a reference to the given string and assigns it to the UpgradeOption field.
func (o *UniverseUpgradeOptionsAll) SetUpgradeOption(v string) {
	o.UpgradeOption = &v
}

// GetRollMaxBatchSize returns the RollMaxBatchSize field value if set, zero value otherwise.
func (o *UniverseUpgradeOptionsAll) GetRollMaxBatchSize() RollMaxBatchSize {
	if o == nil || o.RollMaxBatchSize == nil {
		var ret RollMaxBatchSize
		return ret
	}
	return *o.RollMaxBatchSize
}

// GetRollMaxBatchSizeOk returns a tuple with the RollMaxBatchSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseUpgradeOptionsAll) GetRollMaxBatchSizeOk() (*RollMaxBatchSize, bool) {
	if o == nil || o.RollMaxBatchSize == nil {
		return nil, false
	}
	return o.RollMaxBatchSize, true
}

// HasRollMaxBatchSize returns a boolean if a field has been set.
func (o *UniverseUpgradeOptionsAll) HasRollMaxBatchSize() bool {
	if o != nil && o.RollMaxBatchSize != nil {
		return true
	}

	return false
}

// SetRollMaxBatchSize gets a reference to the given RollMaxBatchSize and assigns it to the RollMaxBatchSize field.
func (o *UniverseUpgradeOptionsAll) SetRollMaxBatchSize(v RollMaxBatchSize) {
	o.RollMaxBatchSize = &v
}

func (o UniverseUpgradeOptionsAll) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UpgradeOption != nil {
		toSerialize["upgrade_option"] = o.UpgradeOption
	}
	if o.RollMaxBatchSize != nil {
		toSerialize["roll_max_batch_size"] = o.RollMaxBatchSize
	}
	return json.Marshal(toSerialize)
}

type NullableUniverseUpgradeOptionsAll struct {
	value *UniverseUpgradeOptionsAll
	isSet bool
}

func (v NullableUniverseUpgradeOptionsAll) Get() *UniverseUpgradeOptionsAll {
	return v.value
}

func (v *NullableUniverseUpgradeOptionsAll) Set(val *UniverseUpgradeOptionsAll) {
	v.value = val
	v.isSet = true
}

func (v NullableUniverseUpgradeOptionsAll) IsSet() bool {
	return v.isSet
}

func (v *NullableUniverseUpgradeOptionsAll) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUniverseUpgradeOptionsAll(val *UniverseUpgradeOptionsAll) *NullableUniverseUpgradeOptionsAll {
	return &NullableUniverseUpgradeOptionsAll{value: val, isSet: true}
}

func (v NullableUniverseUpgradeOptionsAll) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUniverseUpgradeOptionsAll) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


