/*
 * YugabyteDB Anywhere V2 APIs
 *
 * An improved set of APIs for managing YugabyteDB Anywhere
 *
 * API version: v2
 * Contact: support@yugabyte.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// PlacementCloud YBA Placement Cloud. Part of ClusterPlacementSpec.
type PlacementCloud struct {
	// The cloud provider id.
	Uuid *string `json:"uuid,omitempty"`
	// The cloud provider code.
	Code *string `json:"code,omitempty"`
	// The list of region in this cloud we want to place data in.
	RegionList *[]PlacementRegion `json:"region_list,omitempty"`
	// UUID of default region. For universes with more AZs than RF, the default placement for user tables will be RF AZs in the default region. This is commonly encountered in geo-partitioning use cases.
	DefaultRegion *string `json:"default_region,omitempty"`
	// Whether to place all masters in the default region. Defaults to true.
	MastersInDefaultRegion *bool `json:"masters_in_default_region,omitempty"`
}

// NewPlacementCloud instantiates a new PlacementCloud object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlacementCloud() *PlacementCloud {
	this := PlacementCloud{}
	var mastersInDefaultRegion bool = true
	this.MastersInDefaultRegion = &mastersInDefaultRegion
	return &this
}

// NewPlacementCloudWithDefaults instantiates a new PlacementCloud object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlacementCloudWithDefaults() *PlacementCloud {
	this := PlacementCloud{}
	var mastersInDefaultRegion bool = true
	this.MastersInDefaultRegion = &mastersInDefaultRegion
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *PlacementCloud) GetUuid() string {
	if o == nil || o.Uuid == nil {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlacementCloud) GetUuidOk() (*string, bool) {
	if o == nil || o.Uuid == nil {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *PlacementCloud) HasUuid() bool {
	if o != nil && o.Uuid != nil {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *PlacementCloud) SetUuid(v string) {
	o.Uuid = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *PlacementCloud) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlacementCloud) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *PlacementCloud) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *PlacementCloud) SetCode(v string) {
	o.Code = &v
}

// GetRegionList returns the RegionList field value if set, zero value otherwise.
func (o *PlacementCloud) GetRegionList() []PlacementRegion {
	if o == nil || o.RegionList == nil {
		var ret []PlacementRegion
		return ret
	}
	return *o.RegionList
}

// GetRegionListOk returns a tuple with the RegionList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlacementCloud) GetRegionListOk() (*[]PlacementRegion, bool) {
	if o == nil || o.RegionList == nil {
		return nil, false
	}
	return o.RegionList, true
}

// HasRegionList returns a boolean if a field has been set.
func (o *PlacementCloud) HasRegionList() bool {
	if o != nil && o.RegionList != nil {
		return true
	}

	return false
}

// SetRegionList gets a reference to the given []PlacementRegion and assigns it to the RegionList field.
func (o *PlacementCloud) SetRegionList(v []PlacementRegion) {
	o.RegionList = &v
}

// GetDefaultRegion returns the DefaultRegion field value if set, zero value otherwise.
func (o *PlacementCloud) GetDefaultRegion() string {
	if o == nil || o.DefaultRegion == nil {
		var ret string
		return ret
	}
	return *o.DefaultRegion
}

// GetDefaultRegionOk returns a tuple with the DefaultRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlacementCloud) GetDefaultRegionOk() (*string, bool) {
	if o == nil || o.DefaultRegion == nil {
		return nil, false
	}
	return o.DefaultRegion, true
}

// HasDefaultRegion returns a boolean if a field has been set.
func (o *PlacementCloud) HasDefaultRegion() bool {
	if o != nil && o.DefaultRegion != nil {
		return true
	}

	return false
}

// SetDefaultRegion gets a reference to the given string and assigns it to the DefaultRegion field.
func (o *PlacementCloud) SetDefaultRegion(v string) {
	o.DefaultRegion = &v
}

// GetMastersInDefaultRegion returns the MastersInDefaultRegion field value if set, zero value otherwise.
func (o *PlacementCloud) GetMastersInDefaultRegion() bool {
	if o == nil || o.MastersInDefaultRegion == nil {
		var ret bool
		return ret
	}
	return *o.MastersInDefaultRegion
}

// GetMastersInDefaultRegionOk returns a tuple with the MastersInDefaultRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlacementCloud) GetMastersInDefaultRegionOk() (*bool, bool) {
	if o == nil || o.MastersInDefaultRegion == nil {
		return nil, false
	}
	return o.MastersInDefaultRegion, true
}

// HasMastersInDefaultRegion returns a boolean if a field has been set.
func (o *PlacementCloud) HasMastersInDefaultRegion() bool {
	if o != nil && o.MastersInDefaultRegion != nil {
		return true
	}

	return false
}

// SetMastersInDefaultRegion gets a reference to the given bool and assigns it to the MastersInDefaultRegion field.
func (o *PlacementCloud) SetMastersInDefaultRegion(v bool) {
	o.MastersInDefaultRegion = &v
}

func (o PlacementCloud) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Uuid != nil {
		toSerialize["uuid"] = o.Uuid
	}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.RegionList != nil {
		toSerialize["region_list"] = o.RegionList
	}
	if o.DefaultRegion != nil {
		toSerialize["default_region"] = o.DefaultRegion
	}
	if o.MastersInDefaultRegion != nil {
		toSerialize["masters_in_default_region"] = o.MastersInDefaultRegion
	}
	return json.Marshal(toSerialize)
}

type NullablePlacementCloud struct {
	value *PlacementCloud
	isSet bool
}

func (v NullablePlacementCloud) Get() *PlacementCloud {
	return v.value
}

func (v *NullablePlacementCloud) Set(val *PlacementCloud) {
	v.value = val
	v.isSet = true
}

func (v NullablePlacementCloud) IsSet() bool {
	return v.isSet
}

func (v *NullablePlacementCloud) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlacementCloud(val *PlacementCloud) *NullablePlacementCloud {
	return &NullablePlacementCloud{value: val, isSet: true}
}

func (v NullablePlacementCloud) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlacementCloud) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


