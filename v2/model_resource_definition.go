/*
 * YugabyteDB Anywhere V2 APIs
 *
 * An improved set of APIs for managing YugabyteDB Anywhere
 *
 * API version: v2
 * Contact: support@yugabyte.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// ResourceDefinition Resource definition containing the resource type and resource set.
type ResourceDefinition struct {
	// Resource Type
	ResourceType string `json:"resource_type"`
	// Select all resources (including future resources)
	AllowAll bool `json:"allow_all"`
	// Set of resource UUIDs
	ResourceUuidSet *[]string `json:"resource_uuid_set,omitempty"`
}

// NewResourceDefinition instantiates a new ResourceDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceDefinition(resourceType string, allowAll bool) *ResourceDefinition {
	this := ResourceDefinition{}
	this.ResourceType = resourceType
	this.AllowAll = allowAll
	return &this
}

// NewResourceDefinitionWithDefaults instantiates a new ResourceDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceDefinitionWithDefaults() *ResourceDefinition {
	this := ResourceDefinition{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *ResourceDefinition) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *ResourceDefinition) GetResourceTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *ResourceDefinition) SetResourceType(v string) {
	o.ResourceType = v
}

// GetAllowAll returns the AllowAll field value
func (o *ResourceDefinition) GetAllowAll() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowAll
}

// GetAllowAllOk returns a tuple with the AllowAll field value
// and a boolean to check if the value has been set.
func (o *ResourceDefinition) GetAllowAllOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AllowAll, true
}

// SetAllowAll sets field value
func (o *ResourceDefinition) SetAllowAll(v bool) {
	o.AllowAll = v
}

// GetResourceUuidSet returns the ResourceUuidSet field value if set, zero value otherwise.
func (o *ResourceDefinition) GetResourceUuidSet() []string {
	if o == nil || o.ResourceUuidSet == nil {
		var ret []string
		return ret
	}
	return *o.ResourceUuidSet
}

// GetResourceUuidSetOk returns a tuple with the ResourceUuidSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceDefinition) GetResourceUuidSetOk() (*[]string, bool) {
	if o == nil || o.ResourceUuidSet == nil {
		return nil, false
	}
	return o.ResourceUuidSet, true
}

// HasResourceUuidSet returns a boolean if a field has been set.
func (o *ResourceDefinition) HasResourceUuidSet() bool {
	if o != nil && o.ResourceUuidSet != nil {
		return true
	}

	return false
}

// SetResourceUuidSet gets a reference to the given []string and assigns it to the ResourceUuidSet field.
func (o *ResourceDefinition) SetResourceUuidSet(v []string) {
	o.ResourceUuidSet = &v
}

func (o ResourceDefinition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["resource_type"] = o.ResourceType
	}
	if true {
		toSerialize["allow_all"] = o.AllowAll
	}
	if o.ResourceUuidSet != nil {
		toSerialize["resource_uuid_set"] = o.ResourceUuidSet
	}
	return json.Marshal(toSerialize)
}

type NullableResourceDefinition struct {
	value *ResourceDefinition
	isSet bool
}

func (v NullableResourceDefinition) Get() *ResourceDefinition {
	return v.value
}

func (v *NullableResourceDefinition) Set(val *ResourceDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceDefinition(val *ResourceDefinition) *NullableResourceDefinition {
	return &NullableResourceDefinition{value: val, isSet: true}
}

func (v NullableResourceDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


