/*
 * YugabyteDB Anywhere V2 APIs
 *
 * An improved set of APIs for managing YugabyteDB Anywhere
 *
 * API version: v2
 * Contact: support@yugabyte.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// ClusterNetworkingSpec The network settings configured at top-level are uniform settings for both tserver and master nodes. Granular settings for tserver and master (honoured if dedicated_nodes is true or this is k8s cluster) are available for certain network settings. Granular settings can also be overridden per Availability Zone. Part of ClusterSpec.
type ClusterNetworkingSpec struct {
	// (Place holder for) Network settings that can be overridden per tserver or master process for nodes in the cluster. The node instances can be onprem nodes, VMs in GCP/AWS/Azure, or pods in k8s. Part of AvailabilityZoneNetworking.
	Tserver *map[string]interface{} `json:"tserver,omitempty"`
	// (Place holder for) Network settings that can be overridden per tserver or master process for nodes in the cluster. The node instances can be onprem nodes, VMs in GCP/AWS/Azure, or pods in k8s. Part of AvailabilityZoneNetworking.
	Master *map[string]interface{} `json:"master,omitempty"`
	ProxyConfig *NodeProxyConfig `json:"proxy_config,omitempty"`
	// Whether to create a load balancer service for this cluster. Defaults to NONE.
	EnableExposingService *string `json:"enable_exposing_service,omitempty"`
	// Create target groups if enabled. Used by YBM.
	EnableLb *bool `json:"enable_lb,omitempty"`
	// Granular network settings overridden per Availability Zone identified by AZ uuid.
	AzNetworking *map[string]AvailabilityZoneNetworking `json:"az_networking,omitempty"`
}

// NewClusterNetworkingSpec instantiates a new ClusterNetworkingSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterNetworkingSpec() *ClusterNetworkingSpec {
	this := ClusterNetworkingSpec{}
	var enableExposingService string = "NONE"
	this.EnableExposingService = &enableExposingService
	return &this
}

// NewClusterNetworkingSpecWithDefaults instantiates a new ClusterNetworkingSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterNetworkingSpecWithDefaults() *ClusterNetworkingSpec {
	this := ClusterNetworkingSpec{}
	var enableExposingService string = "NONE"
	this.EnableExposingService = &enableExposingService
	return &this
}

// GetTserver returns the Tserver field value if set, zero value otherwise.
func (o *ClusterNetworkingSpec) GetTserver() map[string]interface{} {
	if o == nil || o.Tserver == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Tserver
}

// GetTserverOk returns a tuple with the Tserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterNetworkingSpec) GetTserverOk() (*map[string]interface{}, bool) {
	if o == nil || o.Tserver == nil {
		return nil, false
	}
	return o.Tserver, true
}

// HasTserver returns a boolean if a field has been set.
func (o *ClusterNetworkingSpec) HasTserver() bool {
	if o != nil && o.Tserver != nil {
		return true
	}

	return false
}

// SetTserver gets a reference to the given map[string]interface{} and assigns it to the Tserver field.
func (o *ClusterNetworkingSpec) SetTserver(v map[string]interface{}) {
	o.Tserver = &v
}

// GetMaster returns the Master field value if set, zero value otherwise.
func (o *ClusterNetworkingSpec) GetMaster() map[string]interface{} {
	if o == nil || o.Master == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Master
}

// GetMasterOk returns a tuple with the Master field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterNetworkingSpec) GetMasterOk() (*map[string]interface{}, bool) {
	if o == nil || o.Master == nil {
		return nil, false
	}
	return o.Master, true
}

// HasMaster returns a boolean if a field has been set.
func (o *ClusterNetworkingSpec) HasMaster() bool {
	if o != nil && o.Master != nil {
		return true
	}

	return false
}

// SetMaster gets a reference to the given map[string]interface{} and assigns it to the Master field.
func (o *ClusterNetworkingSpec) SetMaster(v map[string]interface{}) {
	o.Master = &v
}

// GetProxyConfig returns the ProxyConfig field value if set, zero value otherwise.
func (o *ClusterNetworkingSpec) GetProxyConfig() NodeProxyConfig {
	if o == nil || o.ProxyConfig == nil {
		var ret NodeProxyConfig
		return ret
	}
	return *o.ProxyConfig
}

// GetProxyConfigOk returns a tuple with the ProxyConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterNetworkingSpec) GetProxyConfigOk() (*NodeProxyConfig, bool) {
	if o == nil || o.ProxyConfig == nil {
		return nil, false
	}
	return o.ProxyConfig, true
}

// HasProxyConfig returns a boolean if a field has been set.
func (o *ClusterNetworkingSpec) HasProxyConfig() bool {
	if o != nil && o.ProxyConfig != nil {
		return true
	}

	return false
}

// SetProxyConfig gets a reference to the given NodeProxyConfig and assigns it to the ProxyConfig field.
func (o *ClusterNetworkingSpec) SetProxyConfig(v NodeProxyConfig) {
	o.ProxyConfig = &v
}

// GetEnableExposingService returns the EnableExposingService field value if set, zero value otherwise.
func (o *ClusterNetworkingSpec) GetEnableExposingService() string {
	if o == nil || o.EnableExposingService == nil {
		var ret string
		return ret
	}
	return *o.EnableExposingService
}

// GetEnableExposingServiceOk returns a tuple with the EnableExposingService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterNetworkingSpec) GetEnableExposingServiceOk() (*string, bool) {
	if o == nil || o.EnableExposingService == nil {
		return nil, false
	}
	return o.EnableExposingService, true
}

// HasEnableExposingService returns a boolean if a field has been set.
func (o *ClusterNetworkingSpec) HasEnableExposingService() bool {
	if o != nil && o.EnableExposingService != nil {
		return true
	}

	return false
}

// SetEnableExposingService gets a reference to the given string and assigns it to the EnableExposingService field.
func (o *ClusterNetworkingSpec) SetEnableExposingService(v string) {
	o.EnableExposingService = &v
}

// GetEnableLb returns the EnableLb field value if set, zero value otherwise.
func (o *ClusterNetworkingSpec) GetEnableLb() bool {
	if o == nil || o.EnableLb == nil {
		var ret bool
		return ret
	}
	return *o.EnableLb
}

// GetEnableLbOk returns a tuple with the EnableLb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterNetworkingSpec) GetEnableLbOk() (*bool, bool) {
	if o == nil || o.EnableLb == nil {
		return nil, false
	}
	return o.EnableLb, true
}

// HasEnableLb returns a boolean if a field has been set.
func (o *ClusterNetworkingSpec) HasEnableLb() bool {
	if o != nil && o.EnableLb != nil {
		return true
	}

	return false
}

// SetEnableLb gets a reference to the given bool and assigns it to the EnableLb field.
func (o *ClusterNetworkingSpec) SetEnableLb(v bool) {
	o.EnableLb = &v
}

// GetAzNetworking returns the AzNetworking field value if set, zero value otherwise.
func (o *ClusterNetworkingSpec) GetAzNetworking() map[string]AvailabilityZoneNetworking {
	if o == nil || o.AzNetworking == nil {
		var ret map[string]AvailabilityZoneNetworking
		return ret
	}
	return *o.AzNetworking
}

// GetAzNetworkingOk returns a tuple with the AzNetworking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterNetworkingSpec) GetAzNetworkingOk() (*map[string]AvailabilityZoneNetworking, bool) {
	if o == nil || o.AzNetworking == nil {
		return nil, false
	}
	return o.AzNetworking, true
}

// HasAzNetworking returns a boolean if a field has been set.
func (o *ClusterNetworkingSpec) HasAzNetworking() bool {
	if o != nil && o.AzNetworking != nil {
		return true
	}

	return false
}

// SetAzNetworking gets a reference to the given map[string]AvailabilityZoneNetworking and assigns it to the AzNetworking field.
func (o *ClusterNetworkingSpec) SetAzNetworking(v map[string]AvailabilityZoneNetworking) {
	o.AzNetworking = &v
}

func (o ClusterNetworkingSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Tserver != nil {
		toSerialize["tserver"] = o.Tserver
	}
	if o.Master != nil {
		toSerialize["master"] = o.Master
	}
	if o.ProxyConfig != nil {
		toSerialize["proxy_config"] = o.ProxyConfig
	}
	if o.EnableExposingService != nil {
		toSerialize["enable_exposing_service"] = o.EnableExposingService
	}
	if o.EnableLb != nil {
		toSerialize["enable_lb"] = o.EnableLb
	}
	if o.AzNetworking != nil {
		toSerialize["az_networking"] = o.AzNetworking
	}
	return json.Marshal(toSerialize)
}

type NullableClusterNetworkingSpec struct {
	value *ClusterNetworkingSpec
	isSet bool
}

func (v NullableClusterNetworkingSpec) Get() *ClusterNetworkingSpec {
	return v.value
}

func (v *NullableClusterNetworkingSpec) Set(val *ClusterNetworkingSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterNetworkingSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterNetworkingSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterNetworkingSpec(val *ClusterNetworkingSpec) *NullableClusterNetworkingSpec {
	return &NullableClusterNetworkingSpec{value: val, isSet: true}
}

func (v NullableClusterNetworkingSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterNetworkingSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


