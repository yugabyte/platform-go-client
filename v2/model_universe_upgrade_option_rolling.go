/*
 * YugabyteDB Anywhere V2 APIs
 *
 * An improved set of APIs for managing YugabyteDB Anywhere
 *
 * API version: v2
 * Contact: support@yugabyte.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// UniverseUpgradeOptionRolling UniverseUpgradeOptionRolling Option for an upgrade to be rolling (one node at a time) or non-rolling (all nodes at once, with downtime)
type UniverseUpgradeOptionRolling struct {
	// Perform a rolling upgrade where only one node is upgraded at a time. This is the default behavior. False will perform a non-rolling upgrade where all nodes are upgraded at the same 
	RollingUpgrade *bool `json:"rolling_upgrade,omitempty"`
	RollMaxBatchSize *RollMaxBatchSize `json:"roll_max_batch_size,omitempty"`
}

// NewUniverseUpgradeOptionRolling instantiates a new UniverseUpgradeOptionRolling object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUniverseUpgradeOptionRolling() *UniverseUpgradeOptionRolling {
	this := UniverseUpgradeOptionRolling{}
	var rollingUpgrade bool = true
	this.RollingUpgrade = &rollingUpgrade
	return &this
}

// NewUniverseUpgradeOptionRollingWithDefaults instantiates a new UniverseUpgradeOptionRolling object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUniverseUpgradeOptionRollingWithDefaults() *UniverseUpgradeOptionRolling {
	this := UniverseUpgradeOptionRolling{}
	var rollingUpgrade bool = true
	this.RollingUpgrade = &rollingUpgrade
	return &this
}

// GetRollingUpgrade returns the RollingUpgrade field value if set, zero value otherwise.
func (o *UniverseUpgradeOptionRolling) GetRollingUpgrade() bool {
	if o == nil || o.RollingUpgrade == nil {
		var ret bool
		return ret
	}
	return *o.RollingUpgrade
}

// GetRollingUpgradeOk returns a tuple with the RollingUpgrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseUpgradeOptionRolling) GetRollingUpgradeOk() (*bool, bool) {
	if o == nil || o.RollingUpgrade == nil {
		return nil, false
	}
	return o.RollingUpgrade, true
}

// HasRollingUpgrade returns a boolean if a field has been set.
func (o *UniverseUpgradeOptionRolling) HasRollingUpgrade() bool {
	if o != nil && o.RollingUpgrade != nil {
		return true
	}

	return false
}

// SetRollingUpgrade gets a reference to the given bool and assigns it to the RollingUpgrade field.
func (o *UniverseUpgradeOptionRolling) SetRollingUpgrade(v bool) {
	o.RollingUpgrade = &v
}

// GetRollMaxBatchSize returns the RollMaxBatchSize field value if set, zero value otherwise.
func (o *UniverseUpgradeOptionRolling) GetRollMaxBatchSize() RollMaxBatchSize {
	if o == nil || o.RollMaxBatchSize == nil {
		var ret RollMaxBatchSize
		return ret
	}
	return *o.RollMaxBatchSize
}

// GetRollMaxBatchSizeOk returns a tuple with the RollMaxBatchSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseUpgradeOptionRolling) GetRollMaxBatchSizeOk() (*RollMaxBatchSize, bool) {
	if o == nil || o.RollMaxBatchSize == nil {
		return nil, false
	}
	return o.RollMaxBatchSize, true
}

// HasRollMaxBatchSize returns a boolean if a field has been set.
func (o *UniverseUpgradeOptionRolling) HasRollMaxBatchSize() bool {
	if o != nil && o.RollMaxBatchSize != nil {
		return true
	}

	return false
}

// SetRollMaxBatchSize gets a reference to the given RollMaxBatchSize and assigns it to the RollMaxBatchSize field.
func (o *UniverseUpgradeOptionRolling) SetRollMaxBatchSize(v RollMaxBatchSize) {
	o.RollMaxBatchSize = &v
}

func (o UniverseUpgradeOptionRolling) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RollingUpgrade != nil {
		toSerialize["rolling_upgrade"] = o.RollingUpgrade
	}
	if o.RollMaxBatchSize != nil {
		toSerialize["roll_max_batch_size"] = o.RollMaxBatchSize
	}
	return json.Marshal(toSerialize)
}

type NullableUniverseUpgradeOptionRolling struct {
	value *UniverseUpgradeOptionRolling
	isSet bool
}

func (v NullableUniverseUpgradeOptionRolling) Get() *UniverseUpgradeOptionRolling {
	return v.value
}

func (v *NullableUniverseUpgradeOptionRolling) Set(val *UniverseUpgradeOptionRolling) {
	v.value = val
	v.isSet = true
}

func (v NullableUniverseUpgradeOptionRolling) IsSet() bool {
	return v.isSet
}

func (v *NullableUniverseUpgradeOptionRolling) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUniverseUpgradeOptionRolling(val *UniverseUpgradeOptionRolling) *NullableUniverseUpgradeOptionRolling {
	return &NullableUniverseUpgradeOptionRolling{value: val, isSet: true}
}

func (v NullableUniverseUpgradeOptionRolling) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUniverseUpgradeOptionRolling) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


