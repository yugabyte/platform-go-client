/*
 * YugabyteDB Anywhere V2 APIs
 *
 * An improved set of APIs for managing YugabyteDB Anywhere
 *
 * API version: v2
 * Contact: support@yugabyte.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// JobScheduleSpec Spec of a job schedule that is a part of JobSchedule.
type JobScheduleSpec struct {
	// Job schedule name
	Name string `json:"name"`
	JobConfig JobConfigSpec `json:"job_config"`
	ScheduleConfig JobScheduleConfigSpec `json:"schedule_config"`
}

// NewJobScheduleSpec instantiates a new JobScheduleSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobScheduleSpec(name string, jobConfig JobConfigSpec, scheduleConfig JobScheduleConfigSpec) *JobScheduleSpec {
	this := JobScheduleSpec{}
	this.Name = name
	this.JobConfig = jobConfig
	this.ScheduleConfig = scheduleConfig
	return &this
}

// NewJobScheduleSpecWithDefaults instantiates a new JobScheduleSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobScheduleSpecWithDefaults() *JobScheduleSpec {
	this := JobScheduleSpec{}
	return &this
}

// GetName returns the Name field value
func (o *JobScheduleSpec) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *JobScheduleSpec) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *JobScheduleSpec) SetName(v string) {
	o.Name = v
}

// GetJobConfig returns the JobConfig field value
func (o *JobScheduleSpec) GetJobConfig() JobConfigSpec {
	if o == nil {
		var ret JobConfigSpec
		return ret
	}

	return o.JobConfig
}

// GetJobConfigOk returns a tuple with the JobConfig field value
// and a boolean to check if the value has been set.
func (o *JobScheduleSpec) GetJobConfigOk() (*JobConfigSpec, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.JobConfig, true
}

// SetJobConfig sets field value
func (o *JobScheduleSpec) SetJobConfig(v JobConfigSpec) {
	o.JobConfig = v
}

// GetScheduleConfig returns the ScheduleConfig field value
func (o *JobScheduleSpec) GetScheduleConfig() JobScheduleConfigSpec {
	if o == nil {
		var ret JobScheduleConfigSpec
		return ret
	}

	return o.ScheduleConfig
}

// GetScheduleConfigOk returns a tuple with the ScheduleConfig field value
// and a boolean to check if the value has been set.
func (o *JobScheduleSpec) GetScheduleConfigOk() (*JobScheduleConfigSpec, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ScheduleConfig, true
}

// SetScheduleConfig sets field value
func (o *JobScheduleSpec) SetScheduleConfig(v JobScheduleConfigSpec) {
	o.ScheduleConfig = v
}

func (o JobScheduleSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["job_config"] = o.JobConfig
	}
	if true {
		toSerialize["schedule_config"] = o.ScheduleConfig
	}
	return json.Marshal(toSerialize)
}

type NullableJobScheduleSpec struct {
	value *JobScheduleSpec
	isSet bool
}

func (v NullableJobScheduleSpec) Get() *JobScheduleSpec {
	return v.value
}

func (v *NullableJobScheduleSpec) Set(val *JobScheduleSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableJobScheduleSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableJobScheduleSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobScheduleSpec(val *JobScheduleSpec) *NullableJobScheduleSpec {
	return &NullableJobScheduleSpec{value: val, isSet: true}
}

func (v NullableJobScheduleSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobScheduleSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


