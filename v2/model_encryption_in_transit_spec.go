/*
 * YugabyteDB Anywhere V2 APIs
 *
 * An improved set of APIs for managing YugabyteDB Anywhere
 *
 * API version: v2
 * Contact: support@yugabyte.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// EncryptionInTransitSpec Specification of node-to-node and client-to-node TLS encryption. Part of UniverseSpec.
type EncryptionInTransitSpec struct {
	// Whether to enable encryption for communication among DB nodes
	EnableNodeToNodeEncrypt *bool `json:"enable_node_to_node_encrypt,omitempty"`
	// Whether to enable encryption for client connection to DB nodes
	EnableClientToNodeEncrypt *bool `json:"enable_client_to_node_encrypt,omitempty"`
	// The UUID of the rootCA to be used to generate node certificates and facilitate TLS communication between database nodes.
	RootCa *string `json:"root_ca,omitempty"`
	// The UUID of the clientRootCA to be used to generate client certificates and facilitate TLS communication between server and client. Can be set to same as root_CA.
	ClientRootCa *string `json:"client_root_ca,omitempty"`
}

// NewEncryptionInTransitSpec instantiates a new EncryptionInTransitSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEncryptionInTransitSpec() *EncryptionInTransitSpec {
	this := EncryptionInTransitSpec{}
	return &this
}

// NewEncryptionInTransitSpecWithDefaults instantiates a new EncryptionInTransitSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEncryptionInTransitSpecWithDefaults() *EncryptionInTransitSpec {
	this := EncryptionInTransitSpec{}
	return &this
}

// GetEnableNodeToNodeEncrypt returns the EnableNodeToNodeEncrypt field value if set, zero value otherwise.
func (o *EncryptionInTransitSpec) GetEnableNodeToNodeEncrypt() bool {
	if o == nil || o.EnableNodeToNodeEncrypt == nil {
		var ret bool
		return ret
	}
	return *o.EnableNodeToNodeEncrypt
}

// GetEnableNodeToNodeEncryptOk returns a tuple with the EnableNodeToNodeEncrypt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EncryptionInTransitSpec) GetEnableNodeToNodeEncryptOk() (*bool, bool) {
	if o == nil || o.EnableNodeToNodeEncrypt == nil {
		return nil, false
	}
	return o.EnableNodeToNodeEncrypt, true
}

// HasEnableNodeToNodeEncrypt returns a boolean if a field has been set.
func (o *EncryptionInTransitSpec) HasEnableNodeToNodeEncrypt() bool {
	if o != nil && o.EnableNodeToNodeEncrypt != nil {
		return true
	}

	return false
}

// SetEnableNodeToNodeEncrypt gets a reference to the given bool and assigns it to the EnableNodeToNodeEncrypt field.
func (o *EncryptionInTransitSpec) SetEnableNodeToNodeEncrypt(v bool) {
	o.EnableNodeToNodeEncrypt = &v
}

// GetEnableClientToNodeEncrypt returns the EnableClientToNodeEncrypt field value if set, zero value otherwise.
func (o *EncryptionInTransitSpec) GetEnableClientToNodeEncrypt() bool {
	if o == nil || o.EnableClientToNodeEncrypt == nil {
		var ret bool
		return ret
	}
	return *o.EnableClientToNodeEncrypt
}

// GetEnableClientToNodeEncryptOk returns a tuple with the EnableClientToNodeEncrypt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EncryptionInTransitSpec) GetEnableClientToNodeEncryptOk() (*bool, bool) {
	if o == nil || o.EnableClientToNodeEncrypt == nil {
		return nil, false
	}
	return o.EnableClientToNodeEncrypt, true
}

// HasEnableClientToNodeEncrypt returns a boolean if a field has been set.
func (o *EncryptionInTransitSpec) HasEnableClientToNodeEncrypt() bool {
	if o != nil && o.EnableClientToNodeEncrypt != nil {
		return true
	}

	return false
}

// SetEnableClientToNodeEncrypt gets a reference to the given bool and assigns it to the EnableClientToNodeEncrypt field.
func (o *EncryptionInTransitSpec) SetEnableClientToNodeEncrypt(v bool) {
	o.EnableClientToNodeEncrypt = &v
}

// GetRootCa returns the RootCa field value if set, zero value otherwise.
func (o *EncryptionInTransitSpec) GetRootCa() string {
	if o == nil || o.RootCa == nil {
		var ret string
		return ret
	}
	return *o.RootCa
}

// GetRootCaOk returns a tuple with the RootCa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EncryptionInTransitSpec) GetRootCaOk() (*string, bool) {
	if o == nil || o.RootCa == nil {
		return nil, false
	}
	return o.RootCa, true
}

// HasRootCa returns a boolean if a field has been set.
func (o *EncryptionInTransitSpec) HasRootCa() bool {
	if o != nil && o.RootCa != nil {
		return true
	}

	return false
}

// SetRootCa gets a reference to the given string and assigns it to the RootCa field.
func (o *EncryptionInTransitSpec) SetRootCa(v string) {
	o.RootCa = &v
}

// GetClientRootCa returns the ClientRootCa field value if set, zero value otherwise.
func (o *EncryptionInTransitSpec) GetClientRootCa() string {
	if o == nil || o.ClientRootCa == nil {
		var ret string
		return ret
	}
	return *o.ClientRootCa
}

// GetClientRootCaOk returns a tuple with the ClientRootCa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EncryptionInTransitSpec) GetClientRootCaOk() (*string, bool) {
	if o == nil || o.ClientRootCa == nil {
		return nil, false
	}
	return o.ClientRootCa, true
}

// HasClientRootCa returns a boolean if a field has been set.
func (o *EncryptionInTransitSpec) HasClientRootCa() bool {
	if o != nil && o.ClientRootCa != nil {
		return true
	}

	return false
}

// SetClientRootCa gets a reference to the given string and assigns it to the ClientRootCa field.
func (o *EncryptionInTransitSpec) SetClientRootCa(v string) {
	o.ClientRootCa = &v
}

func (o EncryptionInTransitSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EnableNodeToNodeEncrypt != nil {
		toSerialize["enable_node_to_node_encrypt"] = o.EnableNodeToNodeEncrypt
	}
	if o.EnableClientToNodeEncrypt != nil {
		toSerialize["enable_client_to_node_encrypt"] = o.EnableClientToNodeEncrypt
	}
	if o.RootCa != nil {
		toSerialize["root_ca"] = o.RootCa
	}
	if o.ClientRootCa != nil {
		toSerialize["client_root_ca"] = o.ClientRootCa
	}
	return json.Marshal(toSerialize)
}

type NullableEncryptionInTransitSpec struct {
	value *EncryptionInTransitSpec
	isSet bool
}

func (v NullableEncryptionInTransitSpec) Get() *EncryptionInTransitSpec {
	return v.value
}

func (v *NullableEncryptionInTransitSpec) Set(val *EncryptionInTransitSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableEncryptionInTransitSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableEncryptionInTransitSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEncryptionInTransitSpec(val *EncryptionInTransitSpec) *NullableEncryptionInTransitSpec {
	return &NullableEncryptionInTransitSpec{value: val, isSet: true}
}

func (v NullableEncryptionInTransitSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEncryptionInTransitSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


