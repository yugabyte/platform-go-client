/*
 * YugabyteDB Anywhere V2 APIs
 *
 * An improved set of APIs for managing YugabyteDB Anywhere
 *
 * API version: v2
 * Contact: support@yugabyte.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// UniverseSoftwareFinalizeImpactedXCluster ImpactedXClusterInfo  XCluster info that are impacted by software upgrade. Part of SoftwareUpgradesFinalize schema. 
type UniverseSoftwareFinalizeImpactedXCluster struct {
	// UUID of the Universe
	UniverseUuid string `json:"universe_uuid"`
	// Name of the Universe
	UniverseName string `json:"universe_name"`
	// Version of the Universe
	UniverseVersion string `json:"universe_version"`
}

// NewUniverseSoftwareFinalizeImpactedXCluster instantiates a new UniverseSoftwareFinalizeImpactedXCluster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUniverseSoftwareFinalizeImpactedXCluster(universeUuid string, universeName string, universeVersion string) *UniverseSoftwareFinalizeImpactedXCluster {
	this := UniverseSoftwareFinalizeImpactedXCluster{}
	this.UniverseUuid = universeUuid
	this.UniverseName = universeName
	this.UniverseVersion = universeVersion
	return &this
}

// NewUniverseSoftwareFinalizeImpactedXClusterWithDefaults instantiates a new UniverseSoftwareFinalizeImpactedXCluster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUniverseSoftwareFinalizeImpactedXClusterWithDefaults() *UniverseSoftwareFinalizeImpactedXCluster {
	this := UniverseSoftwareFinalizeImpactedXCluster{}
	return &this
}

// GetUniverseUuid returns the UniverseUuid field value
func (o *UniverseSoftwareFinalizeImpactedXCluster) GetUniverseUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UniverseUuid
}

// GetUniverseUuidOk returns a tuple with the UniverseUuid field value
// and a boolean to check if the value has been set.
func (o *UniverseSoftwareFinalizeImpactedXCluster) GetUniverseUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UniverseUuid, true
}

// SetUniverseUuid sets field value
func (o *UniverseSoftwareFinalizeImpactedXCluster) SetUniverseUuid(v string) {
	o.UniverseUuid = v
}

// GetUniverseName returns the UniverseName field value
func (o *UniverseSoftwareFinalizeImpactedXCluster) GetUniverseName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UniverseName
}

// GetUniverseNameOk returns a tuple with the UniverseName field value
// and a boolean to check if the value has been set.
func (o *UniverseSoftwareFinalizeImpactedXCluster) GetUniverseNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UniverseName, true
}

// SetUniverseName sets field value
func (o *UniverseSoftwareFinalizeImpactedXCluster) SetUniverseName(v string) {
	o.UniverseName = v
}

// GetUniverseVersion returns the UniverseVersion field value
func (o *UniverseSoftwareFinalizeImpactedXCluster) GetUniverseVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UniverseVersion
}

// GetUniverseVersionOk returns a tuple with the UniverseVersion field value
// and a boolean to check if the value has been set.
func (o *UniverseSoftwareFinalizeImpactedXCluster) GetUniverseVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UniverseVersion, true
}

// SetUniverseVersion sets field value
func (o *UniverseSoftwareFinalizeImpactedXCluster) SetUniverseVersion(v string) {
	o.UniverseVersion = v
}

func (o UniverseSoftwareFinalizeImpactedXCluster) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["universe_uuid"] = o.UniverseUuid
	}
	if true {
		toSerialize["universe_name"] = o.UniverseName
	}
	if true {
		toSerialize["universe_version"] = o.UniverseVersion
	}
	return json.Marshal(toSerialize)
}

type NullableUniverseSoftwareFinalizeImpactedXCluster struct {
	value *UniverseSoftwareFinalizeImpactedXCluster
	isSet bool
}

func (v NullableUniverseSoftwareFinalizeImpactedXCluster) Get() *UniverseSoftwareFinalizeImpactedXCluster {
	return v.value
}

func (v *NullableUniverseSoftwareFinalizeImpactedXCluster) Set(val *UniverseSoftwareFinalizeImpactedXCluster) {
	v.value = val
	v.isSet = true
}

func (v NullableUniverseSoftwareFinalizeImpactedXCluster) IsSet() bool {
	return v.isSet
}

func (v *NullableUniverseSoftwareFinalizeImpactedXCluster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUniverseSoftwareFinalizeImpactedXCluster(val *UniverseSoftwareFinalizeImpactedXCluster) *NullableUniverseSoftwareFinalizeImpactedXCluster {
	return &NullableUniverseSoftwareFinalizeImpactedXCluster{value: val, isSet: true}
}

func (v NullableUniverseSoftwareFinalizeImpactedXCluster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUniverseSoftwareFinalizeImpactedXCluster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


