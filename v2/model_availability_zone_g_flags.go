/*
 * YugabyteDB Anywhere V2 APIs
 *
 * An improved set of APIs for managing YugabyteDB Anywhere
 *
 * API version: v2
 * Contact: support@yugabyte.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// AvailabilityZoneGFlags GFlags for tserver and master. Part of ClusterGFlags.
type AvailabilityZoneGFlags struct {
	// GFlags applied on TServer process
	Tserver *map[string]string `json:"tserver,omitempty"`
	// GFlags applied on Master process
	Master *map[string]string `json:"master,omitempty"`
}

// NewAvailabilityZoneGFlags instantiates a new AvailabilityZoneGFlags object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAvailabilityZoneGFlags() *AvailabilityZoneGFlags {
	this := AvailabilityZoneGFlags{}
	return &this
}

// NewAvailabilityZoneGFlagsWithDefaults instantiates a new AvailabilityZoneGFlags object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAvailabilityZoneGFlagsWithDefaults() *AvailabilityZoneGFlags {
	this := AvailabilityZoneGFlags{}
	return &this
}

// GetTserver returns the Tserver field value if set, zero value otherwise.
func (o *AvailabilityZoneGFlags) GetTserver() map[string]string {
	if o == nil || o.Tserver == nil {
		var ret map[string]string
		return ret
	}
	return *o.Tserver
}

// GetTserverOk returns a tuple with the Tserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailabilityZoneGFlags) GetTserverOk() (*map[string]string, bool) {
	if o == nil || o.Tserver == nil {
		return nil, false
	}
	return o.Tserver, true
}

// HasTserver returns a boolean if a field has been set.
func (o *AvailabilityZoneGFlags) HasTserver() bool {
	if o != nil && o.Tserver != nil {
		return true
	}

	return false
}

// SetTserver gets a reference to the given map[string]string and assigns it to the Tserver field.
func (o *AvailabilityZoneGFlags) SetTserver(v map[string]string) {
	o.Tserver = &v
}

// GetMaster returns the Master field value if set, zero value otherwise.
func (o *AvailabilityZoneGFlags) GetMaster() map[string]string {
	if o == nil || o.Master == nil {
		var ret map[string]string
		return ret
	}
	return *o.Master
}

// GetMasterOk returns a tuple with the Master field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailabilityZoneGFlags) GetMasterOk() (*map[string]string, bool) {
	if o == nil || o.Master == nil {
		return nil, false
	}
	return o.Master, true
}

// HasMaster returns a boolean if a field has been set.
func (o *AvailabilityZoneGFlags) HasMaster() bool {
	if o != nil && o.Master != nil {
		return true
	}

	return false
}

// SetMaster gets a reference to the given map[string]string and assigns it to the Master field.
func (o *AvailabilityZoneGFlags) SetMaster(v map[string]string) {
	o.Master = &v
}

func (o AvailabilityZoneGFlags) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Tserver != nil {
		toSerialize["tserver"] = o.Tserver
	}
	if o.Master != nil {
		toSerialize["master"] = o.Master
	}
	return json.Marshal(toSerialize)
}

type NullableAvailabilityZoneGFlags struct {
	value *AvailabilityZoneGFlags
	isSet bool
}

func (v NullableAvailabilityZoneGFlags) Get() *AvailabilityZoneGFlags {
	return v.value
}

func (v *NullableAvailabilityZoneGFlags) Set(val *AvailabilityZoneGFlags) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailabilityZoneGFlags) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailabilityZoneGFlags) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailabilityZoneGFlags(val *AvailabilityZoneGFlags) *NullableAvailabilityZoneGFlags {
	return &NullableAvailabilityZoneGFlags{value: val, isSet: true}
}

func (v NullableAvailabilityZoneGFlags) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailabilityZoneGFlags) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


