/*
 * YugabyteDB Anywhere V2 APIs
 *
 * An improved set of APIs for managing YugabyteDB Anywhere
 *
 * API version: v2
 * Contact: support@yugabyte.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// DetachUniverseSpec Request payload for detaching a universe.
type DetachUniverseSpec struct {
	// Whether to skip releases during detach operation.
	SkipReleases *bool `json:"skip_releases,omitempty"`
}

// NewDetachUniverseSpec instantiates a new DetachUniverseSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDetachUniverseSpec() *DetachUniverseSpec {
	this := DetachUniverseSpec{}
	var skipReleases bool = false
	this.SkipReleases = &skipReleases
	return &this
}

// NewDetachUniverseSpecWithDefaults instantiates a new DetachUniverseSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDetachUniverseSpecWithDefaults() *DetachUniverseSpec {
	this := DetachUniverseSpec{}
	var skipReleases bool = false
	this.SkipReleases = &skipReleases
	return &this
}

// GetSkipReleases returns the SkipReleases field value if set, zero value otherwise.
func (o *DetachUniverseSpec) GetSkipReleases() bool {
	if o == nil || o.SkipReleases == nil {
		var ret bool
		return ret
	}
	return *o.SkipReleases
}

// GetSkipReleasesOk returns a tuple with the SkipReleases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetachUniverseSpec) GetSkipReleasesOk() (*bool, bool) {
	if o == nil || o.SkipReleases == nil {
		return nil, false
	}
	return o.SkipReleases, true
}

// HasSkipReleases returns a boolean if a field has been set.
func (o *DetachUniverseSpec) HasSkipReleases() bool {
	if o != nil && o.SkipReleases != nil {
		return true
	}

	return false
}

// SetSkipReleases gets a reference to the given bool and assigns it to the SkipReleases field.
func (o *DetachUniverseSpec) SetSkipReleases(v bool) {
	o.SkipReleases = &v
}

func (o DetachUniverseSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SkipReleases != nil {
		toSerialize["skip_releases"] = o.SkipReleases
	}
	return json.Marshal(toSerialize)
}

type NullableDetachUniverseSpec struct {
	value *DetachUniverseSpec
	isSet bool
}

func (v NullableDetachUniverseSpec) Get() *DetachUniverseSpec {
	return v.value
}

func (v *NullableDetachUniverseSpec) Set(val *DetachUniverseSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableDetachUniverseSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableDetachUniverseSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDetachUniverseSpec(val *DetachUniverseSpec) *NullableDetachUniverseSpec {
	return &NullableDetachUniverseSpec{value: val, isSet: true}
}

func (v NullableDetachUniverseSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDetachUniverseSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


