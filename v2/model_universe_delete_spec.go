/*
 * YugabyteDB Anywhere V2 APIs
 *
 * An improved set of APIs for managing YugabyteDB Anywhere
 *
 * API version: v2
 * Contact: support@yugabyte.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// UniverseDeleteSpec UniverseDeleteSpec  Optional addtional parameters for deleting a universe. 
type UniverseDeleteSpec struct {
	// Whether to force delete the universe
	IsForceDelete *bool `json:"is_force_delete,omitempty"`
	// Whether to delete backups associated with the universe
	IsDeleteBackups *bool `json:"is_delete_backups,omitempty"`
	// Whether to delete associated Encryption In Transit certificates
	IsDeleteAssociatedCerts *bool `json:"is_delete_associated_certs,omitempty"`
}

// NewUniverseDeleteSpec instantiates a new UniverseDeleteSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUniverseDeleteSpec() *UniverseDeleteSpec {
	this := UniverseDeleteSpec{}
	var isForceDelete bool = false
	this.IsForceDelete = &isForceDelete
	var isDeleteBackups bool = false
	this.IsDeleteBackups = &isDeleteBackups
	var isDeleteAssociatedCerts bool = false
	this.IsDeleteAssociatedCerts = &isDeleteAssociatedCerts
	return &this
}

// NewUniverseDeleteSpecWithDefaults instantiates a new UniverseDeleteSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUniverseDeleteSpecWithDefaults() *UniverseDeleteSpec {
	this := UniverseDeleteSpec{}
	var isForceDelete bool = false
	this.IsForceDelete = &isForceDelete
	var isDeleteBackups bool = false
	this.IsDeleteBackups = &isDeleteBackups
	var isDeleteAssociatedCerts bool = false
	this.IsDeleteAssociatedCerts = &isDeleteAssociatedCerts
	return &this
}

// GetIsForceDelete returns the IsForceDelete field value if set, zero value otherwise.
func (o *UniverseDeleteSpec) GetIsForceDelete() bool {
	if o == nil || o.IsForceDelete == nil {
		var ret bool
		return ret
	}
	return *o.IsForceDelete
}

// GetIsForceDeleteOk returns a tuple with the IsForceDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseDeleteSpec) GetIsForceDeleteOk() (*bool, bool) {
	if o == nil || o.IsForceDelete == nil {
		return nil, false
	}
	return o.IsForceDelete, true
}

// HasIsForceDelete returns a boolean if a field has been set.
func (o *UniverseDeleteSpec) HasIsForceDelete() bool {
	if o != nil && o.IsForceDelete != nil {
		return true
	}

	return false
}

// SetIsForceDelete gets a reference to the given bool and assigns it to the IsForceDelete field.
func (o *UniverseDeleteSpec) SetIsForceDelete(v bool) {
	o.IsForceDelete = &v
}

// GetIsDeleteBackups returns the IsDeleteBackups field value if set, zero value otherwise.
func (o *UniverseDeleteSpec) GetIsDeleteBackups() bool {
	if o == nil || o.IsDeleteBackups == nil {
		var ret bool
		return ret
	}
	return *o.IsDeleteBackups
}

// GetIsDeleteBackupsOk returns a tuple with the IsDeleteBackups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseDeleteSpec) GetIsDeleteBackupsOk() (*bool, bool) {
	if o == nil || o.IsDeleteBackups == nil {
		return nil, false
	}
	return o.IsDeleteBackups, true
}

// HasIsDeleteBackups returns a boolean if a field has been set.
func (o *UniverseDeleteSpec) HasIsDeleteBackups() bool {
	if o != nil && o.IsDeleteBackups != nil {
		return true
	}

	return false
}

// SetIsDeleteBackups gets a reference to the given bool and assigns it to the IsDeleteBackups field.
func (o *UniverseDeleteSpec) SetIsDeleteBackups(v bool) {
	o.IsDeleteBackups = &v
}

// GetIsDeleteAssociatedCerts returns the IsDeleteAssociatedCerts field value if set, zero value otherwise.
func (o *UniverseDeleteSpec) GetIsDeleteAssociatedCerts() bool {
	if o == nil || o.IsDeleteAssociatedCerts == nil {
		var ret bool
		return ret
	}
	return *o.IsDeleteAssociatedCerts
}

// GetIsDeleteAssociatedCertsOk returns a tuple with the IsDeleteAssociatedCerts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseDeleteSpec) GetIsDeleteAssociatedCertsOk() (*bool, bool) {
	if o == nil || o.IsDeleteAssociatedCerts == nil {
		return nil, false
	}
	return o.IsDeleteAssociatedCerts, true
}

// HasIsDeleteAssociatedCerts returns a boolean if a field has been set.
func (o *UniverseDeleteSpec) HasIsDeleteAssociatedCerts() bool {
	if o != nil && o.IsDeleteAssociatedCerts != nil {
		return true
	}

	return false
}

// SetIsDeleteAssociatedCerts gets a reference to the given bool and assigns it to the IsDeleteAssociatedCerts field.
func (o *UniverseDeleteSpec) SetIsDeleteAssociatedCerts(v bool) {
	o.IsDeleteAssociatedCerts = &v
}

func (o UniverseDeleteSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsForceDelete != nil {
		toSerialize["is_force_delete"] = o.IsForceDelete
	}
	if o.IsDeleteBackups != nil {
		toSerialize["is_delete_backups"] = o.IsDeleteBackups
	}
	if o.IsDeleteAssociatedCerts != nil {
		toSerialize["is_delete_associated_certs"] = o.IsDeleteAssociatedCerts
	}
	return json.Marshal(toSerialize)
}

type NullableUniverseDeleteSpec struct {
	value *UniverseDeleteSpec
	isSet bool
}

func (v NullableUniverseDeleteSpec) Get() *UniverseDeleteSpec {
	return v.value
}

func (v *NullableUniverseDeleteSpec) Set(val *UniverseDeleteSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableUniverseDeleteSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableUniverseDeleteSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUniverseDeleteSpec(val *UniverseDeleteSpec) *NullableUniverseDeleteSpec {
	return &NullableUniverseDeleteSpec{value: val, isSet: true}
}

func (v NullableUniverseDeleteSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUniverseDeleteSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


