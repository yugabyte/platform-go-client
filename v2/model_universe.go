/*
 * YugabyteDB Anywhere V2 APIs
 *
 * An improved set of APIs for managing YugabyteDB Anywhere
 *
 * API version: v2
 * Contact: support@yugabyte.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// Universe Universe  Contains the user provided `spec` and system generated `info` of a Universe. Returned as response payload for a GET request on a Universe. 
type Universe struct {
	Spec *UniverseSpec `json:"spec,omitempty"`
	Info *UniverseInfo `json:"info,omitempty"`
}

// NewUniverse instantiates a new Universe object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUniverse() *Universe {
	this := Universe{}
	return &this
}

// NewUniverseWithDefaults instantiates a new Universe object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUniverseWithDefaults() *Universe {
	this := Universe{}
	return &this
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *Universe) GetSpec() UniverseSpec {
	if o == nil || o.Spec == nil {
		var ret UniverseSpec
		return ret
	}
	return *o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Universe) GetSpecOk() (*UniverseSpec, bool) {
	if o == nil || o.Spec == nil {
		return nil, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *Universe) HasSpec() bool {
	if o != nil && o.Spec != nil {
		return true
	}

	return false
}

// SetSpec gets a reference to the given UniverseSpec and assigns it to the Spec field.
func (o *Universe) SetSpec(v UniverseSpec) {
	o.Spec = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *Universe) GetInfo() UniverseInfo {
	if o == nil || o.Info == nil {
		var ret UniverseInfo
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Universe) GetInfoOk() (*UniverseInfo, bool) {
	if o == nil || o.Info == nil {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *Universe) HasInfo() bool {
	if o != nil && o.Info != nil {
		return true
	}

	return false
}

// SetInfo gets a reference to the given UniverseInfo and assigns it to the Info field.
func (o *Universe) SetInfo(v UniverseInfo) {
	o.Info = &v
}

func (o Universe) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Spec != nil {
		toSerialize["spec"] = o.Spec
	}
	if o.Info != nil {
		toSerialize["info"] = o.Info
	}
	return json.Marshal(toSerialize)
}

type NullableUniverse struct {
	value *Universe
	isSet bool
}

func (v NullableUniverse) Get() *Universe {
	return v.value
}

func (v *NullableUniverse) Set(val *Universe) {
	v.value = val
	v.isSet = true
}

func (v NullableUniverse) IsSet() bool {
	return v.isSet
}

func (v *NullableUniverse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUniverse(val *Universe) *NullableUniverse {
	return &NullableUniverse{value: val, isSet: true}
}

func (v NullableUniverse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUniverse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


