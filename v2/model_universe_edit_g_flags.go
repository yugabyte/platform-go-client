/*
 * YugabyteDB Anywhere V2 APIs
 *
 * An improved set of APIs for managing YugabyteDB Anywhere
 *
 * API version: v2
 * Contact: support@yugabyte.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// UniverseEditGFlags UniverseEditGFlags  Request payload to edit GFlags of a Universe. 
type UniverseEditGFlags struct {
	// Applicable for rolling restarts. Time to wait between master restarts. Defaults to 180000.
	SleepAfterMasterRestartMillis *int32 `json:"sleep_after_master_restart_millis,omitempty"`
	// Applicable for rolling restarts. Time to wait between tserver restarts. Defaults to 180000.
	SleepAfterTserverRestartMillis *int32 `json:"sleep_after_tserver_restart_millis,omitempty"`
	// Option for an upgrade to be rolling (one node at a time) or non-rolling (all nodes at once, with downtime) 
	UpgradeOption *string `json:"upgrade_option,omitempty"`
	RollMaxBatchSize *RollMaxBatchSize `json:"roll_max_batch_size,omitempty"`
	KubernetesResourceDetails *KubernetesResourceDetails `json:"kubernetes_resource_details,omitempty"`
	// GFlags for each cluster uuid of this universe
	UniverseGflags *map[string]ClusterGFlags `json:"universe_gflags,omitempty"`
}

// NewUniverseEditGFlags instantiates a new UniverseEditGFlags object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUniverseEditGFlags() *UniverseEditGFlags {
	this := UniverseEditGFlags{}
	var sleepAfterMasterRestartMillis int32 = 180000
	this.SleepAfterMasterRestartMillis = &sleepAfterMasterRestartMillis
	var sleepAfterTserverRestartMillis int32 = 180000
	this.SleepAfterTserverRestartMillis = &sleepAfterTserverRestartMillis
	var upgradeOption string = "Rolling"
	this.UpgradeOption = &upgradeOption
	return &this
}

// NewUniverseEditGFlagsWithDefaults instantiates a new UniverseEditGFlags object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUniverseEditGFlagsWithDefaults() *UniverseEditGFlags {
	this := UniverseEditGFlags{}
	var sleepAfterMasterRestartMillis int32 = 180000
	this.SleepAfterMasterRestartMillis = &sleepAfterMasterRestartMillis
	var sleepAfterTserverRestartMillis int32 = 180000
	this.SleepAfterTserverRestartMillis = &sleepAfterTserverRestartMillis
	var upgradeOption string = "Rolling"
	this.UpgradeOption = &upgradeOption
	return &this
}

// GetSleepAfterMasterRestartMillis returns the SleepAfterMasterRestartMillis field value if set, zero value otherwise.
func (o *UniverseEditGFlags) GetSleepAfterMasterRestartMillis() int32 {
	if o == nil || o.SleepAfterMasterRestartMillis == nil {
		var ret int32
		return ret
	}
	return *o.SleepAfterMasterRestartMillis
}

// GetSleepAfterMasterRestartMillisOk returns a tuple with the SleepAfterMasterRestartMillis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseEditGFlags) GetSleepAfterMasterRestartMillisOk() (*int32, bool) {
	if o == nil || o.SleepAfterMasterRestartMillis == nil {
		return nil, false
	}
	return o.SleepAfterMasterRestartMillis, true
}

// HasSleepAfterMasterRestartMillis returns a boolean if a field has been set.
func (o *UniverseEditGFlags) HasSleepAfterMasterRestartMillis() bool {
	if o != nil && o.SleepAfterMasterRestartMillis != nil {
		return true
	}

	return false
}

// SetSleepAfterMasterRestartMillis gets a reference to the given int32 and assigns it to the SleepAfterMasterRestartMillis field.
func (o *UniverseEditGFlags) SetSleepAfterMasterRestartMillis(v int32) {
	o.SleepAfterMasterRestartMillis = &v
}

// GetSleepAfterTserverRestartMillis returns the SleepAfterTserverRestartMillis field value if set, zero value otherwise.
func (o *UniverseEditGFlags) GetSleepAfterTserverRestartMillis() int32 {
	if o == nil || o.SleepAfterTserverRestartMillis == nil {
		var ret int32
		return ret
	}
	return *o.SleepAfterTserverRestartMillis
}

// GetSleepAfterTserverRestartMillisOk returns a tuple with the SleepAfterTserverRestartMillis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseEditGFlags) GetSleepAfterTserverRestartMillisOk() (*int32, bool) {
	if o == nil || o.SleepAfterTserverRestartMillis == nil {
		return nil, false
	}
	return o.SleepAfterTserverRestartMillis, true
}

// HasSleepAfterTserverRestartMillis returns a boolean if a field has been set.
func (o *UniverseEditGFlags) HasSleepAfterTserverRestartMillis() bool {
	if o != nil && o.SleepAfterTserverRestartMillis != nil {
		return true
	}

	return false
}

// SetSleepAfterTserverRestartMillis gets a reference to the given int32 and assigns it to the SleepAfterTserverRestartMillis field.
func (o *UniverseEditGFlags) SetSleepAfterTserverRestartMillis(v int32) {
	o.SleepAfterTserverRestartMillis = &v
}

// GetUpgradeOption returns the UpgradeOption field value if set, zero value otherwise.
func (o *UniverseEditGFlags) GetUpgradeOption() string {
	if o == nil || o.UpgradeOption == nil {
		var ret string
		return ret
	}
	return *o.UpgradeOption
}

// GetUpgradeOptionOk returns a tuple with the UpgradeOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseEditGFlags) GetUpgradeOptionOk() (*string, bool) {
	if o == nil || o.UpgradeOption == nil {
		return nil, false
	}
	return o.UpgradeOption, true
}

// HasUpgradeOption returns a boolean if a field has been set.
func (o *UniverseEditGFlags) HasUpgradeOption() bool {
	if o != nil && o.UpgradeOption != nil {
		return true
	}

	return false
}

// SetUpgradeOption gets a reference to the given string and assigns it to the UpgradeOption field.
func (o *UniverseEditGFlags) SetUpgradeOption(v string) {
	o.UpgradeOption = &v
}

// GetRollMaxBatchSize returns the RollMaxBatchSize field value if set, zero value otherwise.
func (o *UniverseEditGFlags) GetRollMaxBatchSize() RollMaxBatchSize {
	if o == nil || o.RollMaxBatchSize == nil {
		var ret RollMaxBatchSize
		return ret
	}
	return *o.RollMaxBatchSize
}

// GetRollMaxBatchSizeOk returns a tuple with the RollMaxBatchSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseEditGFlags) GetRollMaxBatchSizeOk() (*RollMaxBatchSize, bool) {
	if o == nil || o.RollMaxBatchSize == nil {
		return nil, false
	}
	return o.RollMaxBatchSize, true
}

// HasRollMaxBatchSize returns a boolean if a field has been set.
func (o *UniverseEditGFlags) HasRollMaxBatchSize() bool {
	if o != nil && o.RollMaxBatchSize != nil {
		return true
	}

	return false
}

// SetRollMaxBatchSize gets a reference to the given RollMaxBatchSize and assigns it to the RollMaxBatchSize field.
func (o *UniverseEditGFlags) SetRollMaxBatchSize(v RollMaxBatchSize) {
	o.RollMaxBatchSize = &v
}

// GetKubernetesResourceDetails returns the KubernetesResourceDetails field value if set, zero value otherwise.
func (o *UniverseEditGFlags) GetKubernetesResourceDetails() KubernetesResourceDetails {
	if o == nil || o.KubernetesResourceDetails == nil {
		var ret KubernetesResourceDetails
		return ret
	}
	return *o.KubernetesResourceDetails
}

// GetKubernetesResourceDetailsOk returns a tuple with the KubernetesResourceDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseEditGFlags) GetKubernetesResourceDetailsOk() (*KubernetesResourceDetails, bool) {
	if o == nil || o.KubernetesResourceDetails == nil {
		return nil, false
	}
	return o.KubernetesResourceDetails, true
}

// HasKubernetesResourceDetails returns a boolean if a field has been set.
func (o *UniverseEditGFlags) HasKubernetesResourceDetails() bool {
	if o != nil && o.KubernetesResourceDetails != nil {
		return true
	}

	return false
}

// SetKubernetesResourceDetails gets a reference to the given KubernetesResourceDetails and assigns it to the KubernetesResourceDetails field.
func (o *UniverseEditGFlags) SetKubernetesResourceDetails(v KubernetesResourceDetails) {
	o.KubernetesResourceDetails = &v
}

// GetUniverseGflags returns the UniverseGflags field value if set, zero value otherwise.
func (o *UniverseEditGFlags) GetUniverseGflags() map[string]ClusterGFlags {
	if o == nil || o.UniverseGflags == nil {
		var ret map[string]ClusterGFlags
		return ret
	}
	return *o.UniverseGflags
}

// GetUniverseGflagsOk returns a tuple with the UniverseGflags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseEditGFlags) GetUniverseGflagsOk() (*map[string]ClusterGFlags, bool) {
	if o == nil || o.UniverseGflags == nil {
		return nil, false
	}
	return o.UniverseGflags, true
}

// HasUniverseGflags returns a boolean if a field has been set.
func (o *UniverseEditGFlags) HasUniverseGflags() bool {
	if o != nil && o.UniverseGflags != nil {
		return true
	}

	return false
}

// SetUniverseGflags gets a reference to the given map[string]ClusterGFlags and assigns it to the UniverseGflags field.
func (o *UniverseEditGFlags) SetUniverseGflags(v map[string]ClusterGFlags) {
	o.UniverseGflags = &v
}

func (o UniverseEditGFlags) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SleepAfterMasterRestartMillis != nil {
		toSerialize["sleep_after_master_restart_millis"] = o.SleepAfterMasterRestartMillis
	}
	if o.SleepAfterTserverRestartMillis != nil {
		toSerialize["sleep_after_tserver_restart_millis"] = o.SleepAfterTserverRestartMillis
	}
	if o.UpgradeOption != nil {
		toSerialize["upgrade_option"] = o.UpgradeOption
	}
	if o.RollMaxBatchSize != nil {
		toSerialize["roll_max_batch_size"] = o.RollMaxBatchSize
	}
	if o.KubernetesResourceDetails != nil {
		toSerialize["kubernetes_resource_details"] = o.KubernetesResourceDetails
	}
	if o.UniverseGflags != nil {
		toSerialize["universe_gflags"] = o.UniverseGflags
	}
	return json.Marshal(toSerialize)
}

type NullableUniverseEditGFlags struct {
	value *UniverseEditGFlags
	isSet bool
}

func (v NullableUniverseEditGFlags) Get() *UniverseEditGFlags {
	return v.value
}

func (v *NullableUniverseEditGFlags) Set(val *UniverseEditGFlags) {
	v.value = val
	v.isSet = true
}

func (v NullableUniverseEditGFlags) IsSet() bool {
	return v.isSet
}

func (v *NullableUniverseEditGFlags) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUniverseEditGFlags(val *UniverseEditGFlags) *NullableUniverseEditGFlags {
	return &NullableUniverseEditGFlags{value: val, isSet: true}
}

func (v NullableUniverseEditGFlags) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUniverseEditGFlags) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


