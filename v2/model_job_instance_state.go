/*
 * YugabyteDB Anywhere V2 APIs
 *
 * An improved set of APIs for managing YugabyteDB Anywhere
 *
 * API version: v2
 * Contact: support@yugabyte.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
)

// JobInstanceState State of a job instance that is a part of JobInstance.
type JobInstanceState string

// List of JobInstanceState
const (
	FAILED JobInstanceState = "FAILED"
	RUNNING JobInstanceState = "RUNNING"
	SUCCESS JobInstanceState = "SUCCESS"
	SCHEDULED JobInstanceState = "SCHEDULED"
	SKIPPED JobInstanceState = "SKIPPED"
)

var allowedJobInstanceStateEnumValues = []JobInstanceState{
	"FAILED",
	"RUNNING",
	"SUCCESS",
	"SCHEDULED",
	"SKIPPED",
}

func (v *JobInstanceState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JobInstanceState(value)
	for _, existing := range allowedJobInstanceStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JobInstanceState", value)
}

// NewJobInstanceStateFromValue returns a pointer to a valid JobInstanceState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJobInstanceStateFromValue(v string) (*JobInstanceState, error) {
	ev := JobInstanceState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JobInstanceState: valid values are %v", v, allowedJobInstanceStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JobInstanceState) IsValid() bool {
	for _, existing := range allowedJobInstanceStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to JobInstanceState value
func (v JobInstanceState) Ptr() *JobInstanceState {
	return &v
}

type NullableJobInstanceState struct {
	value *JobInstanceState
	isSet bool
}

func (v NullableJobInstanceState) Get() *JobInstanceState {
	return v.value
}

func (v *NullableJobInstanceState) Set(val *JobInstanceState) {
	v.value = val
	v.isSet = true
}

func (v NullableJobInstanceState) IsSet() bool {
	return v.isSet
}

func (v *NullableJobInstanceState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobInstanceState(val *JobInstanceState) *NullableJobInstanceState {
	return &NullableJobInstanceState{value: val, isSet: true}
}

func (v NullableJobInstanceState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobInstanceState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

