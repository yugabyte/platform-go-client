/*
 * YugabyteDB Anywhere V2 APIs
 *
 * An improved set of APIs for managing YugabyteDB Anywhere
 *
 * API version: v2
 * Contact: support@yugabyte.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// PaginationSpec Pagination spec in page API requests.
type PaginationSpec struct {
	// Start offset of the records.
	Offset *int32 `json:"offset,omitempty"`
	// Maximum number of records to be fetched.
	Limit *int32 `json:"limit,omitempty"`
	// Sort order of the records.
	Direction *string `json:"direction,omitempty"`
}

// NewPaginationSpec instantiates a new PaginationSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaginationSpec() *PaginationSpec {
	this := PaginationSpec{}
	return &this
}

// NewPaginationSpecWithDefaults instantiates a new PaginationSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaginationSpecWithDefaults() *PaginationSpec {
	this := PaginationSpec{}
	return &this
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *PaginationSpec) GetOffset() int32 {
	if o == nil || o.Offset == nil {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginationSpec) GetOffsetOk() (*int32, bool) {
	if o == nil || o.Offset == nil {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *PaginationSpec) HasOffset() bool {
	if o != nil && o.Offset != nil {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *PaginationSpec) SetOffset(v int32) {
	o.Offset = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *PaginationSpec) GetLimit() int32 {
	if o == nil || o.Limit == nil {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginationSpec) GetLimitOk() (*int32, bool) {
	if o == nil || o.Limit == nil {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *PaginationSpec) HasLimit() bool {
	if o != nil && o.Limit != nil {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *PaginationSpec) SetLimit(v int32) {
	o.Limit = &v
}

// GetDirection returns the Direction field value if set, zero value otherwise.
func (o *PaginationSpec) GetDirection() string {
	if o == nil || o.Direction == nil {
		var ret string
		return ret
	}
	return *o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginationSpec) GetDirectionOk() (*string, bool) {
	if o == nil || o.Direction == nil {
		return nil, false
	}
	return o.Direction, true
}

// HasDirection returns a boolean if a field has been set.
func (o *PaginationSpec) HasDirection() bool {
	if o != nil && o.Direction != nil {
		return true
	}

	return false
}

// SetDirection gets a reference to the given string and assigns it to the Direction field.
func (o *PaginationSpec) SetDirection(v string) {
	o.Direction = &v
}

func (o PaginationSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Offset != nil {
		toSerialize["offset"] = o.Offset
	}
	if o.Limit != nil {
		toSerialize["limit"] = o.Limit
	}
	if o.Direction != nil {
		toSerialize["direction"] = o.Direction
	}
	return json.Marshal(toSerialize)
}

type NullablePaginationSpec struct {
	value *PaginationSpec
	isSet bool
}

func (v NullablePaginationSpec) Get() *PaginationSpec {
	return v.value
}

func (v *NullablePaginationSpec) Set(val *PaginationSpec) {
	v.value = val
	v.isSet = true
}

func (v NullablePaginationSpec) IsSet() bool {
	return v.isSet
}

func (v *NullablePaginationSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaginationSpec(val *PaginationSpec) *NullablePaginationSpec {
	return &NullablePaginationSpec{value: val, isSet: true}
}

func (v NullablePaginationSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaginationSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


