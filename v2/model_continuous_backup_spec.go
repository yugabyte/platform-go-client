/*
 * YugabyteDB Anywhere V2 APIs
 *
 * An improved set of APIs for managing YugabyteDB Anywhere
 *
 * API version: v2
 * Contact: support@yugabyte.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// ContinuousBackupSpec ContinuousBackupSpec  User specification for a continuous backup of YBA. All these properties can be edited. 
type ContinuousBackupSpec struct {
	// UUID of the storage config to use
	StorageConfigUuid string `json:"storage_config_uuid"`
	// Interval between two backups.
	Frequency int64 `json:"frequency"`
	FrequencyTimeUnit TimeUnitType `json:"frequency_time_unit"`
	// The number of historical backups to retain in the storage bucket.
	NumBackups *int32 `json:"num_backups,omitempty"`
	// The name of the directory in the storage config to use for YBA backups.
	BackupDir string `json:"backup_dir"`
}

// NewContinuousBackupSpec instantiates a new ContinuousBackupSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContinuousBackupSpec(storageConfigUuid string, frequency int64, frequencyTimeUnit TimeUnitType, backupDir string) *ContinuousBackupSpec {
	this := ContinuousBackupSpec{}
	this.StorageConfigUuid = storageConfigUuid
	this.Frequency = frequency
	this.FrequencyTimeUnit = frequencyTimeUnit
	var numBackups int32 = 5
	this.NumBackups = &numBackups
	this.BackupDir = backupDir
	return &this
}

// NewContinuousBackupSpecWithDefaults instantiates a new ContinuousBackupSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContinuousBackupSpecWithDefaults() *ContinuousBackupSpec {
	this := ContinuousBackupSpec{}
	var numBackups int32 = 5
	this.NumBackups = &numBackups
	return &this
}

// GetStorageConfigUuid returns the StorageConfigUuid field value
func (o *ContinuousBackupSpec) GetStorageConfigUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StorageConfigUuid
}

// GetStorageConfigUuidOk returns a tuple with the StorageConfigUuid field value
// and a boolean to check if the value has been set.
func (o *ContinuousBackupSpec) GetStorageConfigUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.StorageConfigUuid, true
}

// SetStorageConfigUuid sets field value
func (o *ContinuousBackupSpec) SetStorageConfigUuid(v string) {
	o.StorageConfigUuid = v
}

// GetFrequency returns the Frequency field value
func (o *ContinuousBackupSpec) GetFrequency() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value
// and a boolean to check if the value has been set.
func (o *ContinuousBackupSpec) GetFrequencyOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Frequency, true
}

// SetFrequency sets field value
func (o *ContinuousBackupSpec) SetFrequency(v int64) {
	o.Frequency = v
}

// GetFrequencyTimeUnit returns the FrequencyTimeUnit field value
func (o *ContinuousBackupSpec) GetFrequencyTimeUnit() TimeUnitType {
	if o == nil {
		var ret TimeUnitType
		return ret
	}

	return o.FrequencyTimeUnit
}

// GetFrequencyTimeUnitOk returns a tuple with the FrequencyTimeUnit field value
// and a boolean to check if the value has been set.
func (o *ContinuousBackupSpec) GetFrequencyTimeUnitOk() (*TimeUnitType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FrequencyTimeUnit, true
}

// SetFrequencyTimeUnit sets field value
func (o *ContinuousBackupSpec) SetFrequencyTimeUnit(v TimeUnitType) {
	o.FrequencyTimeUnit = v
}

// GetNumBackups returns the NumBackups field value if set, zero value otherwise.
func (o *ContinuousBackupSpec) GetNumBackups() int32 {
	if o == nil || o.NumBackups == nil {
		var ret int32
		return ret
	}
	return *o.NumBackups
}

// GetNumBackupsOk returns a tuple with the NumBackups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContinuousBackupSpec) GetNumBackupsOk() (*int32, bool) {
	if o == nil || o.NumBackups == nil {
		return nil, false
	}
	return o.NumBackups, true
}

// HasNumBackups returns a boolean if a field has been set.
func (o *ContinuousBackupSpec) HasNumBackups() bool {
	if o != nil && o.NumBackups != nil {
		return true
	}

	return false
}

// SetNumBackups gets a reference to the given int32 and assigns it to the NumBackups field.
func (o *ContinuousBackupSpec) SetNumBackups(v int32) {
	o.NumBackups = &v
}

// GetBackupDir returns the BackupDir field value
func (o *ContinuousBackupSpec) GetBackupDir() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BackupDir
}

// GetBackupDirOk returns a tuple with the BackupDir field value
// and a boolean to check if the value has been set.
func (o *ContinuousBackupSpec) GetBackupDirOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BackupDir, true
}

// SetBackupDir sets field value
func (o *ContinuousBackupSpec) SetBackupDir(v string) {
	o.BackupDir = v
}

func (o ContinuousBackupSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["storage_config_uuid"] = o.StorageConfigUuid
	}
	if true {
		toSerialize["frequency"] = o.Frequency
	}
	if true {
		toSerialize["frequency_time_unit"] = o.FrequencyTimeUnit
	}
	if o.NumBackups != nil {
		toSerialize["num_backups"] = o.NumBackups
	}
	if true {
		toSerialize["backup_dir"] = o.BackupDir
	}
	return json.Marshal(toSerialize)
}

type NullableContinuousBackupSpec struct {
	value *ContinuousBackupSpec
	isSet bool
}

func (v NullableContinuousBackupSpec) Get() *ContinuousBackupSpec {
	return v.value
}

func (v *NullableContinuousBackupSpec) Set(val *ContinuousBackupSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableContinuousBackupSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableContinuousBackupSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContinuousBackupSpec(val *ContinuousBackupSpec) *NullableContinuousBackupSpec {
	return &NullableContinuousBackupSpec{value: val, isSet: true}
}

func (v NullableContinuousBackupSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContinuousBackupSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


