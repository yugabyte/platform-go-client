/*
 * YugabyteDB Anywhere V2 APIs
 *
 * An improved set of APIs for managing YugabyteDB Anywhere
 *
 * API version: v2
 * Contact: support@yugabyte.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// KubernetesResourceDetails Identifies the K8S Resource to operate upon. An internal object used as part of Universe edit operations.
type KubernetesResourceDetails struct {
	// Type of YBA resource to operate upon
	ResourceType *string `json:"resource_type,omitempty"`
	// Name of this Kubernetes resource
	Name *string `json:"name,omitempty"`
	// Kubernetes namespace in which the resource is found
	Namespace *string `json:"namespace,omitempty"`
}

// NewKubernetesResourceDetails instantiates a new KubernetesResourceDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubernetesResourceDetails() *KubernetesResourceDetails {
	this := KubernetesResourceDetails{}
	return &this
}

// NewKubernetesResourceDetailsWithDefaults instantiates a new KubernetesResourceDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubernetesResourceDetailsWithDefaults() *KubernetesResourceDetails {
	this := KubernetesResourceDetails{}
	return &this
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *KubernetesResourceDetails) GetResourceType() string {
	if o == nil || o.ResourceType == nil {
		var ret string
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesResourceDetails) GetResourceTypeOk() (*string, bool) {
	if o == nil || o.ResourceType == nil {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *KubernetesResourceDetails) HasResourceType() bool {
	if o != nil && o.ResourceType != nil {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *KubernetesResourceDetails) SetResourceType(v string) {
	o.ResourceType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *KubernetesResourceDetails) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesResourceDetails) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *KubernetesResourceDetails) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *KubernetesResourceDetails) SetName(v string) {
	o.Name = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *KubernetesResourceDetails) GetNamespace() string {
	if o == nil || o.Namespace == nil {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesResourceDetails) GetNamespaceOk() (*string, bool) {
	if o == nil || o.Namespace == nil {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *KubernetesResourceDetails) HasNamespace() bool {
	if o != nil && o.Namespace != nil {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *KubernetesResourceDetails) SetNamespace(v string) {
	o.Namespace = &v
}

func (o KubernetesResourceDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ResourceType != nil {
		toSerialize["resource_type"] = o.ResourceType
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Namespace != nil {
		toSerialize["namespace"] = o.Namespace
	}
	return json.Marshal(toSerialize)
}

type NullableKubernetesResourceDetails struct {
	value *KubernetesResourceDetails
	isSet bool
}

func (v NullableKubernetesResourceDetails) Get() *KubernetesResourceDetails {
	return v.value
}

func (v *NullableKubernetesResourceDetails) Set(val *KubernetesResourceDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableKubernetesResourceDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableKubernetesResourceDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubernetesResourceDetails(val *KubernetesResourceDetails) *NullableKubernetesResourceDetails {
	return &NullableKubernetesResourceDetails{value: val, isSet: true}
}

func (v NullableKubernetesResourceDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubernetesResourceDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


