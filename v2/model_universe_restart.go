/*
 * YugabyteDB Anywhere V2 APIs
 *
 * An improved set of APIs for managing YugabyteDB Anywhere
 *
 * API version: v2
 * Contact: support@yugabyte.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// UniverseRestart UniverseRestart  Payload to restart a Universe. Part of UniverseRestartReq. This will restart all nodes in the  universe or just restart the master and tserver processes. 
type UniverseRestart struct {
	// Applicable for rolling restarts. Time to wait between master restarts. Defaults to 180000.
	SleepAfterMasterRestartMillis *int32 `json:"sleep_after_master_restart_millis,omitempty"`
	// Applicable for rolling restarts. Time to wait between tserver restarts. Defaults to 180000.
	SleepAfterTserverRestartMillis *int32 `json:"sleep_after_tserver_restart_millis,omitempty"`
	// Perform a rolling restart of the universe. Otherwise, all nodes will be restarted at the same time.
	RollingRestart *bool `json:"rolling_restart,omitempty"`
	// The method to reboot the node. This is not required for kubernetes universes, as the pods  will get restarted no matter what. \"HARD\" reboots are not supported today.  OS: Restarts the node via the operating system. SERVICE: Restart the YugabyteDB Process only (master, tserver, etc). 
	RestartType *string `json:"restart_type,omitempty"`
}

// NewUniverseRestart instantiates a new UniverseRestart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUniverseRestart() *UniverseRestart {
	this := UniverseRestart{}
	var sleepAfterMasterRestartMillis int32 = 180000
	this.SleepAfterMasterRestartMillis = &sleepAfterMasterRestartMillis
	var sleepAfterTserverRestartMillis int32 = 180000
	this.SleepAfterTserverRestartMillis = &sleepAfterTserverRestartMillis
	var rollingRestart bool = true
	this.RollingRestart = &rollingRestart
	var restartType string = "SERVICE"
	this.RestartType = &restartType
	return &this
}

// NewUniverseRestartWithDefaults instantiates a new UniverseRestart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUniverseRestartWithDefaults() *UniverseRestart {
	this := UniverseRestart{}
	var sleepAfterMasterRestartMillis int32 = 180000
	this.SleepAfterMasterRestartMillis = &sleepAfterMasterRestartMillis
	var sleepAfterTserverRestartMillis int32 = 180000
	this.SleepAfterTserverRestartMillis = &sleepAfterTserverRestartMillis
	var rollingRestart bool = true
	this.RollingRestart = &rollingRestart
	var restartType string = "SERVICE"
	this.RestartType = &restartType
	return &this
}

// GetSleepAfterMasterRestartMillis returns the SleepAfterMasterRestartMillis field value if set, zero value otherwise.
func (o *UniverseRestart) GetSleepAfterMasterRestartMillis() int32 {
	if o == nil || o.SleepAfterMasterRestartMillis == nil {
		var ret int32
		return ret
	}
	return *o.SleepAfterMasterRestartMillis
}

// GetSleepAfterMasterRestartMillisOk returns a tuple with the SleepAfterMasterRestartMillis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseRestart) GetSleepAfterMasterRestartMillisOk() (*int32, bool) {
	if o == nil || o.SleepAfterMasterRestartMillis == nil {
		return nil, false
	}
	return o.SleepAfterMasterRestartMillis, true
}

// HasSleepAfterMasterRestartMillis returns a boolean if a field has been set.
func (o *UniverseRestart) HasSleepAfterMasterRestartMillis() bool {
	if o != nil && o.SleepAfterMasterRestartMillis != nil {
		return true
	}

	return false
}

// SetSleepAfterMasterRestartMillis gets a reference to the given int32 and assigns it to the SleepAfterMasterRestartMillis field.
func (o *UniverseRestart) SetSleepAfterMasterRestartMillis(v int32) {
	o.SleepAfterMasterRestartMillis = &v
}

// GetSleepAfterTserverRestartMillis returns the SleepAfterTserverRestartMillis field value if set, zero value otherwise.
func (o *UniverseRestart) GetSleepAfterTserverRestartMillis() int32 {
	if o == nil || o.SleepAfterTserverRestartMillis == nil {
		var ret int32
		return ret
	}
	return *o.SleepAfterTserverRestartMillis
}

// GetSleepAfterTserverRestartMillisOk returns a tuple with the SleepAfterTserverRestartMillis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseRestart) GetSleepAfterTserverRestartMillisOk() (*int32, bool) {
	if o == nil || o.SleepAfterTserverRestartMillis == nil {
		return nil, false
	}
	return o.SleepAfterTserverRestartMillis, true
}

// HasSleepAfterTserverRestartMillis returns a boolean if a field has been set.
func (o *UniverseRestart) HasSleepAfterTserverRestartMillis() bool {
	if o != nil && o.SleepAfterTserverRestartMillis != nil {
		return true
	}

	return false
}

// SetSleepAfterTserverRestartMillis gets a reference to the given int32 and assigns it to the SleepAfterTserverRestartMillis field.
func (o *UniverseRestart) SetSleepAfterTserverRestartMillis(v int32) {
	o.SleepAfterTserverRestartMillis = &v
}

// GetRollingRestart returns the RollingRestart field value if set, zero value otherwise.
func (o *UniverseRestart) GetRollingRestart() bool {
	if o == nil || o.RollingRestart == nil {
		var ret bool
		return ret
	}
	return *o.RollingRestart
}

// GetRollingRestartOk returns a tuple with the RollingRestart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseRestart) GetRollingRestartOk() (*bool, bool) {
	if o == nil || o.RollingRestart == nil {
		return nil, false
	}
	return o.RollingRestart, true
}

// HasRollingRestart returns a boolean if a field has been set.
func (o *UniverseRestart) HasRollingRestart() bool {
	if o != nil && o.RollingRestart != nil {
		return true
	}

	return false
}

// SetRollingRestart gets a reference to the given bool and assigns it to the RollingRestart field.
func (o *UniverseRestart) SetRollingRestart(v bool) {
	o.RollingRestart = &v
}

// GetRestartType returns the RestartType field value if set, zero value otherwise.
func (o *UniverseRestart) GetRestartType() string {
	if o == nil || o.RestartType == nil {
		var ret string
		return ret
	}
	return *o.RestartType
}

// GetRestartTypeOk returns a tuple with the RestartType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseRestart) GetRestartTypeOk() (*string, bool) {
	if o == nil || o.RestartType == nil {
		return nil, false
	}
	return o.RestartType, true
}

// HasRestartType returns a boolean if a field has been set.
func (o *UniverseRestart) HasRestartType() bool {
	if o != nil && o.RestartType != nil {
		return true
	}

	return false
}

// SetRestartType gets a reference to the given string and assigns it to the RestartType field.
func (o *UniverseRestart) SetRestartType(v string) {
	o.RestartType = &v
}

func (o UniverseRestart) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SleepAfterMasterRestartMillis != nil {
		toSerialize["sleep_after_master_restart_millis"] = o.SleepAfterMasterRestartMillis
	}
	if o.SleepAfterTserverRestartMillis != nil {
		toSerialize["sleep_after_tserver_restart_millis"] = o.SleepAfterTserverRestartMillis
	}
	if o.RollingRestart != nil {
		toSerialize["rolling_restart"] = o.RollingRestart
	}
	if o.RestartType != nil {
		toSerialize["restart_type"] = o.RestartType
	}
	return json.Marshal(toSerialize)
}

type NullableUniverseRestart struct {
	value *UniverseRestart
	isSet bool
}

func (v NullableUniverseRestart) Get() *UniverseRestart {
	return v.value
}

func (v *NullableUniverseRestart) Set(val *UniverseRestart) {
	v.value = val
	v.isSet = true
}

func (v NullableUniverseRestart) IsSet() bool {
	return v.isSet
}

func (v *NullableUniverseRestart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUniverseRestart(val *UniverseRestart) *NullableUniverseRestart {
	return &NullableUniverseRestart{value: val, isSet: true}
}

func (v NullableUniverseRestart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUniverseRestart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


