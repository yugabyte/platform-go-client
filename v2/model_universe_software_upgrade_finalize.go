/*
 * YugabyteDB Anywhere V2 APIs
 *
 * An improved set of APIs for managing YugabyteDB Anywhere
 *
 * API version: v2
 * Contact: support@yugabyte.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// UniverseSoftwareUpgradeFinalize UniverseSoftwareUpgradeFinalize  Payload to finalize a YugabyteDB software upgrade on a Universe 
type UniverseSoftwareUpgradeFinalize struct {
	// Upgrade the YSQL System Catalog.
	UpgradeSystemCatalog *bool `json:"upgrade_system_catalog,omitempty"`
}

// NewUniverseSoftwareUpgradeFinalize instantiates a new UniverseSoftwareUpgradeFinalize object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUniverseSoftwareUpgradeFinalize() *UniverseSoftwareUpgradeFinalize {
	this := UniverseSoftwareUpgradeFinalize{}
	var upgradeSystemCatalog bool = true
	this.UpgradeSystemCatalog = &upgradeSystemCatalog
	return &this
}

// NewUniverseSoftwareUpgradeFinalizeWithDefaults instantiates a new UniverseSoftwareUpgradeFinalize object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUniverseSoftwareUpgradeFinalizeWithDefaults() *UniverseSoftwareUpgradeFinalize {
	this := UniverseSoftwareUpgradeFinalize{}
	var upgradeSystemCatalog bool = true
	this.UpgradeSystemCatalog = &upgradeSystemCatalog
	return &this
}

// GetUpgradeSystemCatalog returns the UpgradeSystemCatalog field value if set, zero value otherwise.
func (o *UniverseSoftwareUpgradeFinalize) GetUpgradeSystemCatalog() bool {
	if o == nil || o.UpgradeSystemCatalog == nil {
		var ret bool
		return ret
	}
	return *o.UpgradeSystemCatalog
}

// GetUpgradeSystemCatalogOk returns a tuple with the UpgradeSystemCatalog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseSoftwareUpgradeFinalize) GetUpgradeSystemCatalogOk() (*bool, bool) {
	if o == nil || o.UpgradeSystemCatalog == nil {
		return nil, false
	}
	return o.UpgradeSystemCatalog, true
}

// HasUpgradeSystemCatalog returns a boolean if a field has been set.
func (o *UniverseSoftwareUpgradeFinalize) HasUpgradeSystemCatalog() bool {
	if o != nil && o.UpgradeSystemCatalog != nil {
		return true
	}

	return false
}

// SetUpgradeSystemCatalog gets a reference to the given bool and assigns it to the UpgradeSystemCatalog field.
func (o *UniverseSoftwareUpgradeFinalize) SetUpgradeSystemCatalog(v bool) {
	o.UpgradeSystemCatalog = &v
}

func (o UniverseSoftwareUpgradeFinalize) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UpgradeSystemCatalog != nil {
		toSerialize["upgrade_system_catalog"] = o.UpgradeSystemCatalog
	}
	return json.Marshal(toSerialize)
}

type NullableUniverseSoftwareUpgradeFinalize struct {
	value *UniverseSoftwareUpgradeFinalize
	isSet bool
}

func (v NullableUniverseSoftwareUpgradeFinalize) Get() *UniverseSoftwareUpgradeFinalize {
	return v.value
}

func (v *NullableUniverseSoftwareUpgradeFinalize) Set(val *UniverseSoftwareUpgradeFinalize) {
	v.value = val
	v.isSet = true
}

func (v NullableUniverseSoftwareUpgradeFinalize) IsSet() bool {
	return v.isSet
}

func (v *NullableUniverseSoftwareUpgradeFinalize) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUniverseSoftwareUpgradeFinalize(val *UniverseSoftwareUpgradeFinalize) *NullableUniverseSoftwareUpgradeFinalize {
	return &NullableUniverseSoftwareUpgradeFinalize{value: val, isSet: true}
}

func (v NullableUniverseSoftwareUpgradeFinalize) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUniverseSoftwareUpgradeFinalize) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


