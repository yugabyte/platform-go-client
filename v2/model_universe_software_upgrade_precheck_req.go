/*
 * YugabyteDB Anywhere V2 APIs
 *
 * An improved set of APIs for managing YugabyteDB Anywhere
 *
 * API version: v2
 * Contact: support@yugabyte.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// UniverseSoftwareUpgradePrecheckReq UniverseSoftwareUpgradePrecheckReq  Payload to precheck a YugabyteDB software upgrade on a Universe. Part of  UniverseSoftwareUpgradePrecheckReq 
type UniverseSoftwareUpgradePrecheckReq struct {
	// Run prechecks as if the universe would be upgraded to this version.
	YbSoftwareVersion string `json:"yb_software_version"`
}

// NewUniverseSoftwareUpgradePrecheckReq instantiates a new UniverseSoftwareUpgradePrecheckReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUniverseSoftwareUpgradePrecheckReq(ybSoftwareVersion string) *UniverseSoftwareUpgradePrecheckReq {
	this := UniverseSoftwareUpgradePrecheckReq{}
	this.YbSoftwareVersion = ybSoftwareVersion
	return &this
}

// NewUniverseSoftwareUpgradePrecheckReqWithDefaults instantiates a new UniverseSoftwareUpgradePrecheckReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUniverseSoftwareUpgradePrecheckReqWithDefaults() *UniverseSoftwareUpgradePrecheckReq {
	this := UniverseSoftwareUpgradePrecheckReq{}
	return &this
}

// GetYbSoftwareVersion returns the YbSoftwareVersion field value
func (o *UniverseSoftwareUpgradePrecheckReq) GetYbSoftwareVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.YbSoftwareVersion
}

// GetYbSoftwareVersionOk returns a tuple with the YbSoftwareVersion field value
// and a boolean to check if the value has been set.
func (o *UniverseSoftwareUpgradePrecheckReq) GetYbSoftwareVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.YbSoftwareVersion, true
}

// SetYbSoftwareVersion sets field value
func (o *UniverseSoftwareUpgradePrecheckReq) SetYbSoftwareVersion(v string) {
	o.YbSoftwareVersion = v
}

func (o UniverseSoftwareUpgradePrecheckReq) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["yb_software_version"] = o.YbSoftwareVersion
	}
	return json.Marshal(toSerialize)
}

type NullableUniverseSoftwareUpgradePrecheckReq struct {
	value *UniverseSoftwareUpgradePrecheckReq
	isSet bool
}

func (v NullableUniverseSoftwareUpgradePrecheckReq) Get() *UniverseSoftwareUpgradePrecheckReq {
	return v.value
}

func (v *NullableUniverseSoftwareUpgradePrecheckReq) Set(val *UniverseSoftwareUpgradePrecheckReq) {
	v.value = val
	v.isSet = true
}

func (v NullableUniverseSoftwareUpgradePrecheckReq) IsSet() bool {
	return v.isSet
}

func (v *NullableUniverseSoftwareUpgradePrecheckReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUniverseSoftwareUpgradePrecheckReq(val *UniverseSoftwareUpgradePrecheckReq) *NullableUniverseSoftwareUpgradePrecheckReq {
	return &NullableUniverseSoftwareUpgradePrecheckReq{value: val, isSet: true}
}

func (v NullableUniverseSoftwareUpgradePrecheckReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUniverseSoftwareUpgradePrecheckReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


