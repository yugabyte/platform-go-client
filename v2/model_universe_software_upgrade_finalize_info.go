/*
 * YugabyteDB Anywhere V2 APIs
 *
 * An improved set of APIs for managing YugabyteDB Anywhere
 *
 * API version: v2
 * Contact: support@yugabyte.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// UniverseSoftwareUpgradeFinalizeInfo SoftwareUpgradesFinalizeInfo  The list of connected xclusters that will be impacted by finalizing the software upgrade. Part of SoftwareUpgradeFinalizeResponse. 
type UniverseSoftwareUpgradeFinalizeInfo struct {
	// List of XCluster info that are impacted by software upgrade
	ImpactedXclusters *[]UniverseSoftwareFinalizeImpactedXCluster `json:"impacted_xclusters,omitempty"`
}

// NewUniverseSoftwareUpgradeFinalizeInfo instantiates a new UniverseSoftwareUpgradeFinalizeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUniverseSoftwareUpgradeFinalizeInfo() *UniverseSoftwareUpgradeFinalizeInfo {
	this := UniverseSoftwareUpgradeFinalizeInfo{}
	return &this
}

// NewUniverseSoftwareUpgradeFinalizeInfoWithDefaults instantiates a new UniverseSoftwareUpgradeFinalizeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUniverseSoftwareUpgradeFinalizeInfoWithDefaults() *UniverseSoftwareUpgradeFinalizeInfo {
	this := UniverseSoftwareUpgradeFinalizeInfo{}
	return &this
}

// GetImpactedXclusters returns the ImpactedXclusters field value if set, zero value otherwise.
func (o *UniverseSoftwareUpgradeFinalizeInfo) GetImpactedXclusters() []UniverseSoftwareFinalizeImpactedXCluster {
	if o == nil || o.ImpactedXclusters == nil {
		var ret []UniverseSoftwareFinalizeImpactedXCluster
		return ret
	}
	return *o.ImpactedXclusters
}

// GetImpactedXclustersOk returns a tuple with the ImpactedXclusters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseSoftwareUpgradeFinalizeInfo) GetImpactedXclustersOk() (*[]UniverseSoftwareFinalizeImpactedXCluster, bool) {
	if o == nil || o.ImpactedXclusters == nil {
		return nil, false
	}
	return o.ImpactedXclusters, true
}

// HasImpactedXclusters returns a boolean if a field has been set.
func (o *UniverseSoftwareUpgradeFinalizeInfo) HasImpactedXclusters() bool {
	if o != nil && o.ImpactedXclusters != nil {
		return true
	}

	return false
}

// SetImpactedXclusters gets a reference to the given []UniverseSoftwareFinalizeImpactedXCluster and assigns it to the ImpactedXclusters field.
func (o *UniverseSoftwareUpgradeFinalizeInfo) SetImpactedXclusters(v []UniverseSoftwareFinalizeImpactedXCluster) {
	o.ImpactedXclusters = &v
}

func (o UniverseSoftwareUpgradeFinalizeInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ImpactedXclusters != nil {
		toSerialize["impacted_xclusters"] = o.ImpactedXclusters
	}
	return json.Marshal(toSerialize)
}

type NullableUniverseSoftwareUpgradeFinalizeInfo struct {
	value *UniverseSoftwareUpgradeFinalizeInfo
	isSet bool
}

func (v NullableUniverseSoftwareUpgradeFinalizeInfo) Get() *UniverseSoftwareUpgradeFinalizeInfo {
	return v.value
}

func (v *NullableUniverseSoftwareUpgradeFinalizeInfo) Set(val *UniverseSoftwareUpgradeFinalizeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableUniverseSoftwareUpgradeFinalizeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableUniverseSoftwareUpgradeFinalizeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUniverseSoftwareUpgradeFinalizeInfo(val *UniverseSoftwareUpgradeFinalizeInfo) *NullableUniverseSoftwareUpgradeFinalizeInfo {
	return &NullableUniverseSoftwareUpgradeFinalizeInfo{value: val, isSet: true}
}

func (v NullableUniverseSoftwareUpgradeFinalizeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUniverseSoftwareUpgradeFinalizeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


