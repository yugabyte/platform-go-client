/*
 * YugabyteDB Anywhere V2 APIs
 *
 * An improved set of APIs for managing YugabyteDB Anywhere
 *
 * API version: v2
 * Contact: support@yugabyte.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// AvailabilityZoneNodeSpec Properties for each node in the cluster. The settings can be configured at top-level for uniform node settings for both tserver and master nodes. Granular settings for tserver and master will be honored if provided (and dedicated_nodes is true or this is k8s cluster). Part of ClusterNodeSpec.
type AvailabilityZoneNodeSpec struct {
	// Instance type for tserver/master nodes of cluster that determines the cpu and memory resources.
	InstanceType *string `json:"instance_type,omitempty"`
	StorageSpec *ClusterStorageSpec `json:"storage_spec,omitempty"`
	// Amount of memory in MB to limit the postgres process using the ysql cgroup. The value should be greater than 0. When set to 0 it results in no cgroup limits. For a read replica cluster, setting this value to null or -1 would inherit this value from the primary cluster. Applicable only for nodes running as Linux VMs on AWS/GCP/Azure Cloud Provider. Only used internally by YBM.
	CgroupSize *int32 `json:"cgroup_size,omitempty"`
	Tserver *PerProcessNodeSpec `json:"tserver,omitempty"`
	Master *PerProcessNodeSpec `json:"master,omitempty"`
}

// NewAvailabilityZoneNodeSpec instantiates a new AvailabilityZoneNodeSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAvailabilityZoneNodeSpec() *AvailabilityZoneNodeSpec {
	this := AvailabilityZoneNodeSpec{}
	return &this
}

// NewAvailabilityZoneNodeSpecWithDefaults instantiates a new AvailabilityZoneNodeSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAvailabilityZoneNodeSpecWithDefaults() *AvailabilityZoneNodeSpec {
	this := AvailabilityZoneNodeSpec{}
	return &this
}

// GetInstanceType returns the InstanceType field value if set, zero value otherwise.
func (o *AvailabilityZoneNodeSpec) GetInstanceType() string {
	if o == nil || o.InstanceType == nil {
		var ret string
		return ret
	}
	return *o.InstanceType
}

// GetInstanceTypeOk returns a tuple with the InstanceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailabilityZoneNodeSpec) GetInstanceTypeOk() (*string, bool) {
	if o == nil || o.InstanceType == nil {
		return nil, false
	}
	return o.InstanceType, true
}

// HasInstanceType returns a boolean if a field has been set.
func (o *AvailabilityZoneNodeSpec) HasInstanceType() bool {
	if o != nil && o.InstanceType != nil {
		return true
	}

	return false
}

// SetInstanceType gets a reference to the given string and assigns it to the InstanceType field.
func (o *AvailabilityZoneNodeSpec) SetInstanceType(v string) {
	o.InstanceType = &v
}

// GetStorageSpec returns the StorageSpec field value if set, zero value otherwise.
func (o *AvailabilityZoneNodeSpec) GetStorageSpec() ClusterStorageSpec {
	if o == nil || o.StorageSpec == nil {
		var ret ClusterStorageSpec
		return ret
	}
	return *o.StorageSpec
}

// GetStorageSpecOk returns a tuple with the StorageSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailabilityZoneNodeSpec) GetStorageSpecOk() (*ClusterStorageSpec, bool) {
	if o == nil || o.StorageSpec == nil {
		return nil, false
	}
	return o.StorageSpec, true
}

// HasStorageSpec returns a boolean if a field has been set.
func (o *AvailabilityZoneNodeSpec) HasStorageSpec() bool {
	if o != nil && o.StorageSpec != nil {
		return true
	}

	return false
}

// SetStorageSpec gets a reference to the given ClusterStorageSpec and assigns it to the StorageSpec field.
func (o *AvailabilityZoneNodeSpec) SetStorageSpec(v ClusterStorageSpec) {
	o.StorageSpec = &v
}

// GetCgroupSize returns the CgroupSize field value if set, zero value otherwise.
func (o *AvailabilityZoneNodeSpec) GetCgroupSize() int32 {
	if o == nil || o.CgroupSize == nil {
		var ret int32
		return ret
	}
	return *o.CgroupSize
}

// GetCgroupSizeOk returns a tuple with the CgroupSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailabilityZoneNodeSpec) GetCgroupSizeOk() (*int32, bool) {
	if o == nil || o.CgroupSize == nil {
		return nil, false
	}
	return o.CgroupSize, true
}

// HasCgroupSize returns a boolean if a field has been set.
func (o *AvailabilityZoneNodeSpec) HasCgroupSize() bool {
	if o != nil && o.CgroupSize != nil {
		return true
	}

	return false
}

// SetCgroupSize gets a reference to the given int32 and assigns it to the CgroupSize field.
func (o *AvailabilityZoneNodeSpec) SetCgroupSize(v int32) {
	o.CgroupSize = &v
}

// GetTserver returns the Tserver field value if set, zero value otherwise.
func (o *AvailabilityZoneNodeSpec) GetTserver() PerProcessNodeSpec {
	if o == nil || o.Tserver == nil {
		var ret PerProcessNodeSpec
		return ret
	}
	return *o.Tserver
}

// GetTserverOk returns a tuple with the Tserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailabilityZoneNodeSpec) GetTserverOk() (*PerProcessNodeSpec, bool) {
	if o == nil || o.Tserver == nil {
		return nil, false
	}
	return o.Tserver, true
}

// HasTserver returns a boolean if a field has been set.
func (o *AvailabilityZoneNodeSpec) HasTserver() bool {
	if o != nil && o.Tserver != nil {
		return true
	}

	return false
}

// SetTserver gets a reference to the given PerProcessNodeSpec and assigns it to the Tserver field.
func (o *AvailabilityZoneNodeSpec) SetTserver(v PerProcessNodeSpec) {
	o.Tserver = &v
}

// GetMaster returns the Master field value if set, zero value otherwise.
func (o *AvailabilityZoneNodeSpec) GetMaster() PerProcessNodeSpec {
	if o == nil || o.Master == nil {
		var ret PerProcessNodeSpec
		return ret
	}
	return *o.Master
}

// GetMasterOk returns a tuple with the Master field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailabilityZoneNodeSpec) GetMasterOk() (*PerProcessNodeSpec, bool) {
	if o == nil || o.Master == nil {
		return nil, false
	}
	return o.Master, true
}

// HasMaster returns a boolean if a field has been set.
func (o *AvailabilityZoneNodeSpec) HasMaster() bool {
	if o != nil && o.Master != nil {
		return true
	}

	return false
}

// SetMaster gets a reference to the given PerProcessNodeSpec and assigns it to the Master field.
func (o *AvailabilityZoneNodeSpec) SetMaster(v PerProcessNodeSpec) {
	o.Master = &v
}

func (o AvailabilityZoneNodeSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.InstanceType != nil {
		toSerialize["instance_type"] = o.InstanceType
	}
	if o.StorageSpec != nil {
		toSerialize["storage_spec"] = o.StorageSpec
	}
	if o.CgroupSize != nil {
		toSerialize["cgroup_size"] = o.CgroupSize
	}
	if o.Tserver != nil {
		toSerialize["tserver"] = o.Tserver
	}
	if o.Master != nil {
		toSerialize["master"] = o.Master
	}
	return json.Marshal(toSerialize)
}

type NullableAvailabilityZoneNodeSpec struct {
	value *AvailabilityZoneNodeSpec
	isSet bool
}

func (v NullableAvailabilityZoneNodeSpec) Get() *AvailabilityZoneNodeSpec {
	return v.value
}

func (v *NullableAvailabilityZoneNodeSpec) Set(val *AvailabilityZoneNodeSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailabilityZoneNodeSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailabilityZoneNodeSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailabilityZoneNodeSpec(val *AvailabilityZoneNodeSpec) *NullableAvailabilityZoneNodeSpec {
	return &NullableAvailabilityZoneNodeSpec{value: val, isSet: true}
}

func (v NullableAvailabilityZoneNodeSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailabilityZoneNodeSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


