/*
 * YugabyteDB Anywhere V2 APIs
 *
 * An improved set of APIs for managing YugabyteDB Anywhere
 *
 * API version: v2
 * Contact: support@yugabyte.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// UniverseCreateSpec UniverseCreateSpec  Universe create time properties. This is used to create a new Universe. 
type UniverseCreateSpec struct {
	Spec UniverseSpec `json:"spec"`
	// CPU Arch of DB nodes.
	Arch string `json:"arch"`
}

// NewUniverseCreateSpec instantiates a new UniverseCreateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUniverseCreateSpec(spec UniverseSpec, arch string) *UniverseCreateSpec {
	this := UniverseCreateSpec{}
	this.Spec = spec
	this.Arch = arch
	return &this
}

// NewUniverseCreateSpecWithDefaults instantiates a new UniverseCreateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUniverseCreateSpecWithDefaults() *UniverseCreateSpec {
	this := UniverseCreateSpec{}
	return &this
}

// GetSpec returns the Spec field value
func (o *UniverseCreateSpec) GetSpec() UniverseSpec {
	if o == nil {
		var ret UniverseSpec
		return ret
	}

	return o.Spec
}

// GetSpecOk returns a tuple with the Spec field value
// and a boolean to check if the value has been set.
func (o *UniverseCreateSpec) GetSpecOk() (*UniverseSpec, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Spec, true
}

// SetSpec sets field value
func (o *UniverseCreateSpec) SetSpec(v UniverseSpec) {
	o.Spec = v
}

// GetArch returns the Arch field value
func (o *UniverseCreateSpec) GetArch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Arch
}

// GetArchOk returns a tuple with the Arch field value
// and a boolean to check if the value has been set.
func (o *UniverseCreateSpec) GetArchOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Arch, true
}

// SetArch sets field value
func (o *UniverseCreateSpec) SetArch(v string) {
	o.Arch = v
}

func (o UniverseCreateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["spec"] = o.Spec
	}
	if true {
		toSerialize["arch"] = o.Arch
	}
	return json.Marshal(toSerialize)
}

type NullableUniverseCreateSpec struct {
	value *UniverseCreateSpec
	isSet bool
}

func (v NullableUniverseCreateSpec) Get() *UniverseCreateSpec {
	return v.value
}

func (v *NullableUniverseCreateSpec) Set(val *UniverseCreateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableUniverseCreateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableUniverseCreateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUniverseCreateSpec(val *UniverseCreateSpec) *NullableUniverseCreateSpec {
	return &NullableUniverseCreateSpec{value: val, isSet: true}
}

func (v NullableUniverseCreateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUniverseCreateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


