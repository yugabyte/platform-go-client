/*
 * YugabyteDB Anywhere V2 APIs
 *
 * An improved set of APIs for managing YugabyteDB Anywhere
 *
 * API version: v2
 * Contact: support@yugabyte.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// ClusterNetworkingSpecAllOf struct for ClusterNetworkingSpecAllOf
type ClusterNetworkingSpecAllOf struct {
	// Whether to create a load balancer service for this cluster. Defaults to NONE.
	EnableExposingService *string `json:"enable_exposing_service,omitempty"`
	// Create target groups if enabled. Used by YBM.
	EnableLb *bool `json:"enable_lb,omitempty"`
	// Granular network settings overridden per Availability Zone identified by AZ uuid.
	AzNetworking *map[string]AvailabilityZoneNetworking `json:"az_networking,omitempty"`
}

// NewClusterNetworkingSpecAllOf instantiates a new ClusterNetworkingSpecAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterNetworkingSpecAllOf() *ClusterNetworkingSpecAllOf {
	this := ClusterNetworkingSpecAllOf{}
	var enableExposingService string = "NONE"
	this.EnableExposingService = &enableExposingService
	return &this
}

// NewClusterNetworkingSpecAllOfWithDefaults instantiates a new ClusterNetworkingSpecAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterNetworkingSpecAllOfWithDefaults() *ClusterNetworkingSpecAllOf {
	this := ClusterNetworkingSpecAllOf{}
	var enableExposingService string = "NONE"
	this.EnableExposingService = &enableExposingService
	return &this
}

// GetEnableExposingService returns the EnableExposingService field value if set, zero value otherwise.
func (o *ClusterNetworkingSpecAllOf) GetEnableExposingService() string {
	if o == nil || o.EnableExposingService == nil {
		var ret string
		return ret
	}
	return *o.EnableExposingService
}

// GetEnableExposingServiceOk returns a tuple with the EnableExposingService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterNetworkingSpecAllOf) GetEnableExposingServiceOk() (*string, bool) {
	if o == nil || o.EnableExposingService == nil {
		return nil, false
	}
	return o.EnableExposingService, true
}

// HasEnableExposingService returns a boolean if a field has been set.
func (o *ClusterNetworkingSpecAllOf) HasEnableExposingService() bool {
	if o != nil && o.EnableExposingService != nil {
		return true
	}

	return false
}

// SetEnableExposingService gets a reference to the given string and assigns it to the EnableExposingService field.
func (o *ClusterNetworkingSpecAllOf) SetEnableExposingService(v string) {
	o.EnableExposingService = &v
}

// GetEnableLb returns the EnableLb field value if set, zero value otherwise.
func (o *ClusterNetworkingSpecAllOf) GetEnableLb() bool {
	if o == nil || o.EnableLb == nil {
		var ret bool
		return ret
	}
	return *o.EnableLb
}

// GetEnableLbOk returns a tuple with the EnableLb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterNetworkingSpecAllOf) GetEnableLbOk() (*bool, bool) {
	if o == nil || o.EnableLb == nil {
		return nil, false
	}
	return o.EnableLb, true
}

// HasEnableLb returns a boolean if a field has been set.
func (o *ClusterNetworkingSpecAllOf) HasEnableLb() bool {
	if o != nil && o.EnableLb != nil {
		return true
	}

	return false
}

// SetEnableLb gets a reference to the given bool and assigns it to the EnableLb field.
func (o *ClusterNetworkingSpecAllOf) SetEnableLb(v bool) {
	o.EnableLb = &v
}

// GetAzNetworking returns the AzNetworking field value if set, zero value otherwise.
func (o *ClusterNetworkingSpecAllOf) GetAzNetworking() map[string]AvailabilityZoneNetworking {
	if o == nil || o.AzNetworking == nil {
		var ret map[string]AvailabilityZoneNetworking
		return ret
	}
	return *o.AzNetworking
}

// GetAzNetworkingOk returns a tuple with the AzNetworking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterNetworkingSpecAllOf) GetAzNetworkingOk() (*map[string]AvailabilityZoneNetworking, bool) {
	if o == nil || o.AzNetworking == nil {
		return nil, false
	}
	return o.AzNetworking, true
}

// HasAzNetworking returns a boolean if a field has been set.
func (o *ClusterNetworkingSpecAllOf) HasAzNetworking() bool {
	if o != nil && o.AzNetworking != nil {
		return true
	}

	return false
}

// SetAzNetworking gets a reference to the given map[string]AvailabilityZoneNetworking and assigns it to the AzNetworking field.
func (o *ClusterNetworkingSpecAllOf) SetAzNetworking(v map[string]AvailabilityZoneNetworking) {
	o.AzNetworking = &v
}

func (o ClusterNetworkingSpecAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EnableExposingService != nil {
		toSerialize["enable_exposing_service"] = o.EnableExposingService
	}
	if o.EnableLb != nil {
		toSerialize["enable_lb"] = o.EnableLb
	}
	if o.AzNetworking != nil {
		toSerialize["az_networking"] = o.AzNetworking
	}
	return json.Marshal(toSerialize)
}

type NullableClusterNetworkingSpecAllOf struct {
	value *ClusterNetworkingSpecAllOf
	isSet bool
}

func (v NullableClusterNetworkingSpecAllOf) Get() *ClusterNetworkingSpecAllOf {
	return v.value
}

func (v *NullableClusterNetworkingSpecAllOf) Set(val *ClusterNetworkingSpecAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterNetworkingSpecAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterNetworkingSpecAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterNetworkingSpecAllOf(val *ClusterNetworkingSpecAllOf) *NullableClusterNetworkingSpecAllOf {
	return &NullableClusterNetworkingSpecAllOf{value: val, isSet: true}
}

func (v NullableClusterNetworkingSpecAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterNetworkingSpecAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


