/*
 * YugabyteDB Anywhere V2 APIs
 *
 * An improved set of APIs for managing YugabyteDB Anywhere
 *
 * API version: v2
 * Contact: support@yugabyte.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// UniverseNetworkingSpec Networking specification that is used for nodes in this Universe. Part of UniverseSpec.
type UniverseNetworkingSpec struct {
	CommunicationPorts *CommunicationPortsSpec `json:"communication_ports,omitempty"`
	// Whether to assign a public IP for nodes in this Universe.
	AssignPublicIp *bool `json:"assign_public_ip,omitempty"`
	// Whether to assign a static public IP for nodes in this Universe.
	AssignStaticPublicIp *bool `json:"assign_static_public_ip,omitempty"`
	// Whether to enable IPv6 on nodes in this cluster. Defaults to false.
	EnableIpv6 *bool `json:"enable_ipv6,omitempty"`
}

// NewUniverseNetworkingSpec instantiates a new UniverseNetworkingSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUniverseNetworkingSpec() *UniverseNetworkingSpec {
	this := UniverseNetworkingSpec{}
	var assignPublicIp bool = true
	this.AssignPublicIp = &assignPublicIp
	var assignStaticPublicIp bool = false
	this.AssignStaticPublicIp = &assignStaticPublicIp
	return &this
}

// NewUniverseNetworkingSpecWithDefaults instantiates a new UniverseNetworkingSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUniverseNetworkingSpecWithDefaults() *UniverseNetworkingSpec {
	this := UniverseNetworkingSpec{}
	var assignPublicIp bool = true
	this.AssignPublicIp = &assignPublicIp
	var assignStaticPublicIp bool = false
	this.AssignStaticPublicIp = &assignStaticPublicIp
	return &this
}

// GetCommunicationPorts returns the CommunicationPorts field value if set, zero value otherwise.
func (o *UniverseNetworkingSpec) GetCommunicationPorts() CommunicationPortsSpec {
	if o == nil || o.CommunicationPorts == nil {
		var ret CommunicationPortsSpec
		return ret
	}
	return *o.CommunicationPorts
}

// GetCommunicationPortsOk returns a tuple with the CommunicationPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseNetworkingSpec) GetCommunicationPortsOk() (*CommunicationPortsSpec, bool) {
	if o == nil || o.CommunicationPorts == nil {
		return nil, false
	}
	return o.CommunicationPorts, true
}

// HasCommunicationPorts returns a boolean if a field has been set.
func (o *UniverseNetworkingSpec) HasCommunicationPorts() bool {
	if o != nil && o.CommunicationPorts != nil {
		return true
	}

	return false
}

// SetCommunicationPorts gets a reference to the given CommunicationPortsSpec and assigns it to the CommunicationPorts field.
func (o *UniverseNetworkingSpec) SetCommunicationPorts(v CommunicationPortsSpec) {
	o.CommunicationPorts = &v
}

// GetAssignPublicIp returns the AssignPublicIp field value if set, zero value otherwise.
func (o *UniverseNetworkingSpec) GetAssignPublicIp() bool {
	if o == nil || o.AssignPublicIp == nil {
		var ret bool
		return ret
	}
	return *o.AssignPublicIp
}

// GetAssignPublicIpOk returns a tuple with the AssignPublicIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseNetworkingSpec) GetAssignPublicIpOk() (*bool, bool) {
	if o == nil || o.AssignPublicIp == nil {
		return nil, false
	}
	return o.AssignPublicIp, true
}

// HasAssignPublicIp returns a boolean if a field has been set.
func (o *UniverseNetworkingSpec) HasAssignPublicIp() bool {
	if o != nil && o.AssignPublicIp != nil {
		return true
	}

	return false
}

// SetAssignPublicIp gets a reference to the given bool and assigns it to the AssignPublicIp field.
func (o *UniverseNetworkingSpec) SetAssignPublicIp(v bool) {
	o.AssignPublicIp = &v
}

// GetAssignStaticPublicIp returns the AssignStaticPublicIp field value if set, zero value otherwise.
func (o *UniverseNetworkingSpec) GetAssignStaticPublicIp() bool {
	if o == nil || o.AssignStaticPublicIp == nil {
		var ret bool
		return ret
	}
	return *o.AssignStaticPublicIp
}

// GetAssignStaticPublicIpOk returns a tuple with the AssignStaticPublicIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseNetworkingSpec) GetAssignStaticPublicIpOk() (*bool, bool) {
	if o == nil || o.AssignStaticPublicIp == nil {
		return nil, false
	}
	return o.AssignStaticPublicIp, true
}

// HasAssignStaticPublicIp returns a boolean if a field has been set.
func (o *UniverseNetworkingSpec) HasAssignStaticPublicIp() bool {
	if o != nil && o.AssignStaticPublicIp != nil {
		return true
	}

	return false
}

// SetAssignStaticPublicIp gets a reference to the given bool and assigns it to the AssignStaticPublicIp field.
func (o *UniverseNetworkingSpec) SetAssignStaticPublicIp(v bool) {
	o.AssignStaticPublicIp = &v
}

// GetEnableIpv6 returns the EnableIpv6 field value if set, zero value otherwise.
func (o *UniverseNetworkingSpec) GetEnableIpv6() bool {
	if o == nil || o.EnableIpv6 == nil {
		var ret bool
		return ret
	}
	return *o.EnableIpv6
}

// GetEnableIpv6Ok returns a tuple with the EnableIpv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseNetworkingSpec) GetEnableIpv6Ok() (*bool, bool) {
	if o == nil || o.EnableIpv6 == nil {
		return nil, false
	}
	return o.EnableIpv6, true
}

// HasEnableIpv6 returns a boolean if a field has been set.
func (o *UniverseNetworkingSpec) HasEnableIpv6() bool {
	if o != nil && o.EnableIpv6 != nil {
		return true
	}

	return false
}

// SetEnableIpv6 gets a reference to the given bool and assigns it to the EnableIpv6 field.
func (o *UniverseNetworkingSpec) SetEnableIpv6(v bool) {
	o.EnableIpv6 = &v
}

func (o UniverseNetworkingSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CommunicationPorts != nil {
		toSerialize["communication_ports"] = o.CommunicationPorts
	}
	if o.AssignPublicIp != nil {
		toSerialize["assign_public_ip"] = o.AssignPublicIp
	}
	if o.AssignStaticPublicIp != nil {
		toSerialize["assign_static_public_ip"] = o.AssignStaticPublicIp
	}
	if o.EnableIpv6 != nil {
		toSerialize["enable_ipv6"] = o.EnableIpv6
	}
	return json.Marshal(toSerialize)
}

type NullableUniverseNetworkingSpec struct {
	value *UniverseNetworkingSpec
	isSet bool
}

func (v NullableUniverseNetworkingSpec) Get() *UniverseNetworkingSpec {
	return v.value
}

func (v *NullableUniverseNetworkingSpec) Set(val *UniverseNetworkingSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableUniverseNetworkingSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableUniverseNetworkingSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUniverseNetworkingSpec(val *UniverseNetworkingSpec) *NullableUniverseNetworkingSpec {
	return &NullableUniverseNetworkingSpec{value: val, isSet: true}
}

func (v NullableUniverseNetworkingSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUniverseNetworkingSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


