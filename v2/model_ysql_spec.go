/*
 * YugabyteDB Anywhere V2 APIs
 *
 * An improved set of APIs for managing YugabyteDB Anywhere
 *
 * API version: v2
 * Contact: support@yugabyte.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// YSQLSpec YSQL Spec for the Universe. Part of UniverseSpec.
type YSQLSpec struct {
	// Whether to enable YSQL API on this Universe
	Enable *bool `json:"enable,omitempty"`
	// Whether to enable authentication to access YSQL on this Universe
	EnableAuth *bool `json:"enable_auth,omitempty"`
	// Password to set for the YSQL database in this universe. Required if enable_auth is true.
	Password *string `json:"password,omitempty"`
}

// NewYSQLSpec instantiates a new YSQLSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewYSQLSpec() *YSQLSpec {
	this := YSQLSpec{}
	return &this
}

// NewYSQLSpecWithDefaults instantiates a new YSQLSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewYSQLSpecWithDefaults() *YSQLSpec {
	this := YSQLSpec{}
	return &this
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *YSQLSpec) GetEnable() bool {
	if o == nil || o.Enable == nil {
		var ret bool
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *YSQLSpec) GetEnableOk() (*bool, bool) {
	if o == nil || o.Enable == nil {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *YSQLSpec) HasEnable() bool {
	if o != nil && o.Enable != nil {
		return true
	}

	return false
}

// SetEnable gets a reference to the given bool and assigns it to the Enable field.
func (o *YSQLSpec) SetEnable(v bool) {
	o.Enable = &v
}

// GetEnableAuth returns the EnableAuth field value if set, zero value otherwise.
func (o *YSQLSpec) GetEnableAuth() bool {
	if o == nil || o.EnableAuth == nil {
		var ret bool
		return ret
	}
	return *o.EnableAuth
}

// GetEnableAuthOk returns a tuple with the EnableAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *YSQLSpec) GetEnableAuthOk() (*bool, bool) {
	if o == nil || o.EnableAuth == nil {
		return nil, false
	}
	return o.EnableAuth, true
}

// HasEnableAuth returns a boolean if a field has been set.
func (o *YSQLSpec) HasEnableAuth() bool {
	if o != nil && o.EnableAuth != nil {
		return true
	}

	return false
}

// SetEnableAuth gets a reference to the given bool and assigns it to the EnableAuth field.
func (o *YSQLSpec) SetEnableAuth(v bool) {
	o.EnableAuth = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *YSQLSpec) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *YSQLSpec) GetPasswordOk() (*string, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *YSQLSpec) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *YSQLSpec) SetPassword(v string) {
	o.Password = &v
}

func (o YSQLSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Enable != nil {
		toSerialize["enable"] = o.Enable
	}
	if o.EnableAuth != nil {
		toSerialize["enable_auth"] = o.EnableAuth
	}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	return json.Marshal(toSerialize)
}

type NullableYSQLSpec struct {
	value *YSQLSpec
	isSet bool
}

func (v NullableYSQLSpec) Get() *YSQLSpec {
	return v.value
}

func (v *NullableYSQLSpec) Set(val *YSQLSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableYSQLSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableYSQLSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableYSQLSpec(val *YSQLSpec) *NullableYSQLSpec {
	return &NullableYSQLSpec{value: val, isSet: true}
}

func (v NullableYSQLSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableYSQLSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


