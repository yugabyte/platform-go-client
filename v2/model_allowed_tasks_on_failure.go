/*
 * YugabyteDB Anywhere V2 APIs
 *
 * An improved set of APIs for managing YugabyteDB Anywhere
 *
 * API version: v2
 * Contact: support@yugabyte.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// AllowedTasksOnFailure When the last Universe operation has failed, YB Anywhere prevents most Universe operations until this failure is first fixed. This property lists all the allowed tasks on such a Universe. Part of UniverseInfo.
type AllowedTasksOnFailure struct {
	// Whether the Universe is restricted from performing other operations
	Restricted *bool `json:"restricted,omitempty"`
	// If restricted, this is the list of task types that are allowed to be retried on this Universe. This  is in the format <taskType>_<targetResource>. Eg. Create_Backup, Delete_Universe, etc.
	TaskTypes *[]string `json:"task_types,omitempty"`
}

// NewAllowedTasksOnFailure instantiates a new AllowedTasksOnFailure object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllowedTasksOnFailure() *AllowedTasksOnFailure {
	this := AllowedTasksOnFailure{}
	return &this
}

// NewAllowedTasksOnFailureWithDefaults instantiates a new AllowedTasksOnFailure object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllowedTasksOnFailureWithDefaults() *AllowedTasksOnFailure {
	this := AllowedTasksOnFailure{}
	return &this
}

// GetRestricted returns the Restricted field value if set, zero value otherwise.
func (o *AllowedTasksOnFailure) GetRestricted() bool {
	if o == nil || o.Restricted == nil {
		var ret bool
		return ret
	}
	return *o.Restricted
}

// GetRestrictedOk returns a tuple with the Restricted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowedTasksOnFailure) GetRestrictedOk() (*bool, bool) {
	if o == nil || o.Restricted == nil {
		return nil, false
	}
	return o.Restricted, true
}

// HasRestricted returns a boolean if a field has been set.
func (o *AllowedTasksOnFailure) HasRestricted() bool {
	if o != nil && o.Restricted != nil {
		return true
	}

	return false
}

// SetRestricted gets a reference to the given bool and assigns it to the Restricted field.
func (o *AllowedTasksOnFailure) SetRestricted(v bool) {
	o.Restricted = &v
}

// GetTaskTypes returns the TaskTypes field value if set, zero value otherwise.
func (o *AllowedTasksOnFailure) GetTaskTypes() []string {
	if o == nil || o.TaskTypes == nil {
		var ret []string
		return ret
	}
	return *o.TaskTypes
}

// GetTaskTypesOk returns a tuple with the TaskTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowedTasksOnFailure) GetTaskTypesOk() (*[]string, bool) {
	if o == nil || o.TaskTypes == nil {
		return nil, false
	}
	return o.TaskTypes, true
}

// HasTaskTypes returns a boolean if a field has been set.
func (o *AllowedTasksOnFailure) HasTaskTypes() bool {
	if o != nil && o.TaskTypes != nil {
		return true
	}

	return false
}

// SetTaskTypes gets a reference to the given []string and assigns it to the TaskTypes field.
func (o *AllowedTasksOnFailure) SetTaskTypes(v []string) {
	o.TaskTypes = &v
}

func (o AllowedTasksOnFailure) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Restricted != nil {
		toSerialize["restricted"] = o.Restricted
	}
	if o.TaskTypes != nil {
		toSerialize["task_types"] = o.TaskTypes
	}
	return json.Marshal(toSerialize)
}

type NullableAllowedTasksOnFailure struct {
	value *AllowedTasksOnFailure
	isSet bool
}

func (v NullableAllowedTasksOnFailure) Get() *AllowedTasksOnFailure {
	return v.value
}

func (v *NullableAllowedTasksOnFailure) Set(val *AllowedTasksOnFailure) {
	v.value = val
	v.isSet = true
}

func (v NullableAllowedTasksOnFailure) IsSet() bool {
	return v.isSet
}

func (v *NullableAllowedTasksOnFailure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllowedTasksOnFailure(val *AllowedTasksOnFailure) *NullableAllowedTasksOnFailure {
	return &NullableAllowedTasksOnFailure{value: val, isSet: true}
}

func (v NullableAllowedTasksOnFailure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllowedTasksOnFailure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


