/*
 * YugabyteDB Anywhere V2 APIs
 *
 * An improved set of APIs for managing YugabyteDB Anywhere
 *
 * API version: v2
 * Contact: support@yugabyte.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// UniverseSoftwareUpgradeStart UniverseSoftwareUpgradeStart  Payload to start a YugabyteDB software upgrade on a Universe. Part of UniverseSoftwareUpgradeReq 
type UniverseSoftwareUpgradeStart struct {
	// Applicable for rolling restarts. Time to wait between master restarts. Defaults to 180000.
	SleepAfterMasterRestartMillis *int32 `json:"sleep_after_master_restart_millis,omitempty"`
	// Applicable for rolling restarts. Time to wait between tserver restarts. Defaults to 180000.
	SleepAfterTserverRestartMillis *int32 `json:"sleep_after_tserver_restart_millis,omitempty"`
	// Perform a rolling upgrade where only one node is upgraded at a time. This is the default behavior. False will perform a non-rolling upgrade where all nodes are upgraded at the same 
	RollingUpgrade *bool `json:"rolling_upgrade,omitempty"`
	RollMaxBatchSize *RollMaxBatchSize `json:"roll_max_batch_size,omitempty"`
	// perform an upgrade where rollback is allowed
	AllowRollback *bool `json:"allow_rollback,omitempty"`
	// Upgrade the YugabyteDB Catalog
	UpgradeSystemCatalog *bool `json:"upgrade_system_catalog,omitempty"`
	// The target release version to upgrade to.
	Version string `json:"version"`
}

// NewUniverseSoftwareUpgradeStart instantiates a new UniverseSoftwareUpgradeStart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUniverseSoftwareUpgradeStart(version string) *UniverseSoftwareUpgradeStart {
	this := UniverseSoftwareUpgradeStart{}
	var sleepAfterMasterRestartMillis int32 = 180000
	this.SleepAfterMasterRestartMillis = &sleepAfterMasterRestartMillis
	var sleepAfterTserverRestartMillis int32 = 180000
	this.SleepAfterTserverRestartMillis = &sleepAfterTserverRestartMillis
	var rollingUpgrade bool = true
	this.RollingUpgrade = &rollingUpgrade
	var allowRollback bool = true
	this.AllowRollback = &allowRollback
	var upgradeSystemCatalog bool = true
	this.UpgradeSystemCatalog = &upgradeSystemCatalog
	this.Version = version
	return &this
}

// NewUniverseSoftwareUpgradeStartWithDefaults instantiates a new UniverseSoftwareUpgradeStart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUniverseSoftwareUpgradeStartWithDefaults() *UniverseSoftwareUpgradeStart {
	this := UniverseSoftwareUpgradeStart{}
	var sleepAfterMasterRestartMillis int32 = 180000
	this.SleepAfterMasterRestartMillis = &sleepAfterMasterRestartMillis
	var sleepAfterTserverRestartMillis int32 = 180000
	this.SleepAfterTserverRestartMillis = &sleepAfterTserverRestartMillis
	var rollingUpgrade bool = true
	this.RollingUpgrade = &rollingUpgrade
	var allowRollback bool = true
	this.AllowRollback = &allowRollback
	var upgradeSystemCatalog bool = true
	this.UpgradeSystemCatalog = &upgradeSystemCatalog
	return &this
}

// GetSleepAfterMasterRestartMillis returns the SleepAfterMasterRestartMillis field value if set, zero value otherwise.
func (o *UniverseSoftwareUpgradeStart) GetSleepAfterMasterRestartMillis() int32 {
	if o == nil || o.SleepAfterMasterRestartMillis == nil {
		var ret int32
		return ret
	}
	return *o.SleepAfterMasterRestartMillis
}

// GetSleepAfterMasterRestartMillisOk returns a tuple with the SleepAfterMasterRestartMillis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseSoftwareUpgradeStart) GetSleepAfterMasterRestartMillisOk() (*int32, bool) {
	if o == nil || o.SleepAfterMasterRestartMillis == nil {
		return nil, false
	}
	return o.SleepAfterMasterRestartMillis, true
}

// HasSleepAfterMasterRestartMillis returns a boolean if a field has been set.
func (o *UniverseSoftwareUpgradeStart) HasSleepAfterMasterRestartMillis() bool {
	if o != nil && o.SleepAfterMasterRestartMillis != nil {
		return true
	}

	return false
}

// SetSleepAfterMasterRestartMillis gets a reference to the given int32 and assigns it to the SleepAfterMasterRestartMillis field.
func (o *UniverseSoftwareUpgradeStart) SetSleepAfterMasterRestartMillis(v int32) {
	o.SleepAfterMasterRestartMillis = &v
}

// GetSleepAfterTserverRestartMillis returns the SleepAfterTserverRestartMillis field value if set, zero value otherwise.
func (o *UniverseSoftwareUpgradeStart) GetSleepAfterTserverRestartMillis() int32 {
	if o == nil || o.SleepAfterTserverRestartMillis == nil {
		var ret int32
		return ret
	}
	return *o.SleepAfterTserverRestartMillis
}

// GetSleepAfterTserverRestartMillisOk returns a tuple with the SleepAfterTserverRestartMillis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseSoftwareUpgradeStart) GetSleepAfterTserverRestartMillisOk() (*int32, bool) {
	if o == nil || o.SleepAfterTserverRestartMillis == nil {
		return nil, false
	}
	return o.SleepAfterTserverRestartMillis, true
}

// HasSleepAfterTserverRestartMillis returns a boolean if a field has been set.
func (o *UniverseSoftwareUpgradeStart) HasSleepAfterTserverRestartMillis() bool {
	if o != nil && o.SleepAfterTserverRestartMillis != nil {
		return true
	}

	return false
}

// SetSleepAfterTserverRestartMillis gets a reference to the given int32 and assigns it to the SleepAfterTserverRestartMillis field.
func (o *UniverseSoftwareUpgradeStart) SetSleepAfterTserverRestartMillis(v int32) {
	o.SleepAfterTserverRestartMillis = &v
}

// GetRollingUpgrade returns the RollingUpgrade field value if set, zero value otherwise.
func (o *UniverseSoftwareUpgradeStart) GetRollingUpgrade() bool {
	if o == nil || o.RollingUpgrade == nil {
		var ret bool
		return ret
	}
	return *o.RollingUpgrade
}

// GetRollingUpgradeOk returns a tuple with the RollingUpgrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseSoftwareUpgradeStart) GetRollingUpgradeOk() (*bool, bool) {
	if o == nil || o.RollingUpgrade == nil {
		return nil, false
	}
	return o.RollingUpgrade, true
}

// HasRollingUpgrade returns a boolean if a field has been set.
func (o *UniverseSoftwareUpgradeStart) HasRollingUpgrade() bool {
	if o != nil && o.RollingUpgrade != nil {
		return true
	}

	return false
}

// SetRollingUpgrade gets a reference to the given bool and assigns it to the RollingUpgrade field.
func (o *UniverseSoftwareUpgradeStart) SetRollingUpgrade(v bool) {
	o.RollingUpgrade = &v
}

// GetRollMaxBatchSize returns the RollMaxBatchSize field value if set, zero value otherwise.
func (o *UniverseSoftwareUpgradeStart) GetRollMaxBatchSize() RollMaxBatchSize {
	if o == nil || o.RollMaxBatchSize == nil {
		var ret RollMaxBatchSize
		return ret
	}
	return *o.RollMaxBatchSize
}

// GetRollMaxBatchSizeOk returns a tuple with the RollMaxBatchSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseSoftwareUpgradeStart) GetRollMaxBatchSizeOk() (*RollMaxBatchSize, bool) {
	if o == nil || o.RollMaxBatchSize == nil {
		return nil, false
	}
	return o.RollMaxBatchSize, true
}

// HasRollMaxBatchSize returns a boolean if a field has been set.
func (o *UniverseSoftwareUpgradeStart) HasRollMaxBatchSize() bool {
	if o != nil && o.RollMaxBatchSize != nil {
		return true
	}

	return false
}

// SetRollMaxBatchSize gets a reference to the given RollMaxBatchSize and assigns it to the RollMaxBatchSize field.
func (o *UniverseSoftwareUpgradeStart) SetRollMaxBatchSize(v RollMaxBatchSize) {
	o.RollMaxBatchSize = &v
}

// GetAllowRollback returns the AllowRollback field value if set, zero value otherwise.
func (o *UniverseSoftwareUpgradeStart) GetAllowRollback() bool {
	if o == nil || o.AllowRollback == nil {
		var ret bool
		return ret
	}
	return *o.AllowRollback
}

// GetAllowRollbackOk returns a tuple with the AllowRollback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseSoftwareUpgradeStart) GetAllowRollbackOk() (*bool, bool) {
	if o == nil || o.AllowRollback == nil {
		return nil, false
	}
	return o.AllowRollback, true
}

// HasAllowRollback returns a boolean if a field has been set.
func (o *UniverseSoftwareUpgradeStart) HasAllowRollback() bool {
	if o != nil && o.AllowRollback != nil {
		return true
	}

	return false
}

// SetAllowRollback gets a reference to the given bool and assigns it to the AllowRollback field.
func (o *UniverseSoftwareUpgradeStart) SetAllowRollback(v bool) {
	o.AllowRollback = &v
}

// GetUpgradeSystemCatalog returns the UpgradeSystemCatalog field value if set, zero value otherwise.
func (o *UniverseSoftwareUpgradeStart) GetUpgradeSystemCatalog() bool {
	if o == nil || o.UpgradeSystemCatalog == nil {
		var ret bool
		return ret
	}
	return *o.UpgradeSystemCatalog
}

// GetUpgradeSystemCatalogOk returns a tuple with the UpgradeSystemCatalog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseSoftwareUpgradeStart) GetUpgradeSystemCatalogOk() (*bool, bool) {
	if o == nil || o.UpgradeSystemCatalog == nil {
		return nil, false
	}
	return o.UpgradeSystemCatalog, true
}

// HasUpgradeSystemCatalog returns a boolean if a field has been set.
func (o *UniverseSoftwareUpgradeStart) HasUpgradeSystemCatalog() bool {
	if o != nil && o.UpgradeSystemCatalog != nil {
		return true
	}

	return false
}

// SetUpgradeSystemCatalog gets a reference to the given bool and assigns it to the UpgradeSystemCatalog field.
func (o *UniverseSoftwareUpgradeStart) SetUpgradeSystemCatalog(v bool) {
	o.UpgradeSystemCatalog = &v
}

// GetVersion returns the Version field value
func (o *UniverseSoftwareUpgradeStart) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *UniverseSoftwareUpgradeStart) GetVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *UniverseSoftwareUpgradeStart) SetVersion(v string) {
	o.Version = v
}

func (o UniverseSoftwareUpgradeStart) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SleepAfterMasterRestartMillis != nil {
		toSerialize["sleep_after_master_restart_millis"] = o.SleepAfterMasterRestartMillis
	}
	if o.SleepAfterTserverRestartMillis != nil {
		toSerialize["sleep_after_tserver_restart_millis"] = o.SleepAfterTserverRestartMillis
	}
	if o.RollingUpgrade != nil {
		toSerialize["rolling_upgrade"] = o.RollingUpgrade
	}
	if o.RollMaxBatchSize != nil {
		toSerialize["roll_max_batch_size"] = o.RollMaxBatchSize
	}
	if o.AllowRollback != nil {
		toSerialize["allow_rollback"] = o.AllowRollback
	}
	if o.UpgradeSystemCatalog != nil {
		toSerialize["upgrade_system_catalog"] = o.UpgradeSystemCatalog
	}
	if true {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableUniverseSoftwareUpgradeStart struct {
	value *UniverseSoftwareUpgradeStart
	isSet bool
}

func (v NullableUniverseSoftwareUpgradeStart) Get() *UniverseSoftwareUpgradeStart {
	return v.value
}

func (v *NullableUniverseSoftwareUpgradeStart) Set(val *UniverseSoftwareUpgradeStart) {
	v.value = val
	v.isSet = true
}

func (v NullableUniverseSoftwareUpgradeStart) IsSet() bool {
	return v.isSet
}

func (v *NullableUniverseSoftwareUpgradeStart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUniverseSoftwareUpgradeStart(val *UniverseSoftwareUpgradeStart) *NullableUniverseSoftwareUpgradeStart {
	return &NullableUniverseSoftwareUpgradeStart{value: val, isSet: true}
}

func (v NullableUniverseSoftwareUpgradeStart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUniverseSoftwareUpgradeStart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


