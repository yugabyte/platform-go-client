/*
 * YugabyteDB Anywhere V2 APIs
 *
 * An improved set of APIs for managing YugabyteDB Anywhere
 *
 * API version: v2
 * Contact: support@yugabyte.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// AvailabilityZoneNodeSpecAllOf struct for AvailabilityZoneNodeSpecAllOf
type AvailabilityZoneNodeSpecAllOf struct {
	// Amount of memory in MB to limit the postgres process using the ysql cgroup. The value should be greater than 0. When set to 0 it results in no cgroup limits. For a read replica cluster, setting this value to null or -1 would inherit this value from the primary cluster. Applicable only for nodes running as Linux VMs on AWS/GCP/Azure Cloud Provider. Only used internally by YBM.
	CgroupSize *int32 `json:"cgroup_size,omitempty"`
	Tserver *PerProcessNodeSpec `json:"tserver,omitempty"`
	Master *PerProcessNodeSpec `json:"master,omitempty"`
}

// NewAvailabilityZoneNodeSpecAllOf instantiates a new AvailabilityZoneNodeSpecAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAvailabilityZoneNodeSpecAllOf() *AvailabilityZoneNodeSpecAllOf {
	this := AvailabilityZoneNodeSpecAllOf{}
	return &this
}

// NewAvailabilityZoneNodeSpecAllOfWithDefaults instantiates a new AvailabilityZoneNodeSpecAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAvailabilityZoneNodeSpecAllOfWithDefaults() *AvailabilityZoneNodeSpecAllOf {
	this := AvailabilityZoneNodeSpecAllOf{}
	return &this
}

// GetCgroupSize returns the CgroupSize field value if set, zero value otherwise.
func (o *AvailabilityZoneNodeSpecAllOf) GetCgroupSize() int32 {
	if o == nil || o.CgroupSize == nil {
		var ret int32
		return ret
	}
	return *o.CgroupSize
}

// GetCgroupSizeOk returns a tuple with the CgroupSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailabilityZoneNodeSpecAllOf) GetCgroupSizeOk() (*int32, bool) {
	if o == nil || o.CgroupSize == nil {
		return nil, false
	}
	return o.CgroupSize, true
}

// HasCgroupSize returns a boolean if a field has been set.
func (o *AvailabilityZoneNodeSpecAllOf) HasCgroupSize() bool {
	if o != nil && o.CgroupSize != nil {
		return true
	}

	return false
}

// SetCgroupSize gets a reference to the given int32 and assigns it to the CgroupSize field.
func (o *AvailabilityZoneNodeSpecAllOf) SetCgroupSize(v int32) {
	o.CgroupSize = &v
}

// GetTserver returns the Tserver field value if set, zero value otherwise.
func (o *AvailabilityZoneNodeSpecAllOf) GetTserver() PerProcessNodeSpec {
	if o == nil || o.Tserver == nil {
		var ret PerProcessNodeSpec
		return ret
	}
	return *o.Tserver
}

// GetTserverOk returns a tuple with the Tserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailabilityZoneNodeSpecAllOf) GetTserverOk() (*PerProcessNodeSpec, bool) {
	if o == nil || o.Tserver == nil {
		return nil, false
	}
	return o.Tserver, true
}

// HasTserver returns a boolean if a field has been set.
func (o *AvailabilityZoneNodeSpecAllOf) HasTserver() bool {
	if o != nil && o.Tserver != nil {
		return true
	}

	return false
}

// SetTserver gets a reference to the given PerProcessNodeSpec and assigns it to the Tserver field.
func (o *AvailabilityZoneNodeSpecAllOf) SetTserver(v PerProcessNodeSpec) {
	o.Tserver = &v
}

// GetMaster returns the Master field value if set, zero value otherwise.
func (o *AvailabilityZoneNodeSpecAllOf) GetMaster() PerProcessNodeSpec {
	if o == nil || o.Master == nil {
		var ret PerProcessNodeSpec
		return ret
	}
	return *o.Master
}

// GetMasterOk returns a tuple with the Master field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailabilityZoneNodeSpecAllOf) GetMasterOk() (*PerProcessNodeSpec, bool) {
	if o == nil || o.Master == nil {
		return nil, false
	}
	return o.Master, true
}

// HasMaster returns a boolean if a field has been set.
func (o *AvailabilityZoneNodeSpecAllOf) HasMaster() bool {
	if o != nil && o.Master != nil {
		return true
	}

	return false
}

// SetMaster gets a reference to the given PerProcessNodeSpec and assigns it to the Master field.
func (o *AvailabilityZoneNodeSpecAllOf) SetMaster(v PerProcessNodeSpec) {
	o.Master = &v
}

func (o AvailabilityZoneNodeSpecAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CgroupSize != nil {
		toSerialize["cgroup_size"] = o.CgroupSize
	}
	if o.Tserver != nil {
		toSerialize["tserver"] = o.Tserver
	}
	if o.Master != nil {
		toSerialize["master"] = o.Master
	}
	return json.Marshal(toSerialize)
}

type NullableAvailabilityZoneNodeSpecAllOf struct {
	value *AvailabilityZoneNodeSpecAllOf
	isSet bool
}

func (v NullableAvailabilityZoneNodeSpecAllOf) Get() *AvailabilityZoneNodeSpecAllOf {
	return v.value
}

func (v *NullableAvailabilityZoneNodeSpecAllOf) Set(val *AvailabilityZoneNodeSpecAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailabilityZoneNodeSpecAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailabilityZoneNodeSpecAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailabilityZoneNodeSpecAllOf(val *AvailabilityZoneNodeSpecAllOf) *NullableAvailabilityZoneNodeSpecAllOf {
	return &NullableAvailabilityZoneNodeSpecAllOf{value: val, isSet: true}
}

func (v NullableAvailabilityZoneNodeSpecAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailabilityZoneNodeSpecAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


