/*
 * YugabyteDB Anywhere V2 APIs
 *
 * An improved set of APIs for managing YugabyteDB Anywhere
 *
 * API version: v2
 * Contact: support@yugabyte.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
)

// JobScheduleType Job schedule type which is a part of JobScheduleConfigSpec. Fixed delay keeps a fixed interval between the end and start of previous and next job executions respectively. Fixed rate tries to keep a fixed interval between the job execution start times. If a previous job is still running, the next job waits. 
type JobScheduleType string

// List of JobScheduleType
const (
	DELAY JobScheduleType = "FIXED_DELAY"
	RATE JobScheduleType = "FIXED_RATE"
)

var allowedJobScheduleTypeEnumValues = []JobScheduleType{
	"FIXED_DELAY",
	"FIXED_RATE",
}

func (v *JobScheduleType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JobScheduleType(value)
	for _, existing := range allowedJobScheduleTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JobScheduleType", value)
}

// NewJobScheduleTypeFromValue returns a pointer to a valid JobScheduleType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJobScheduleTypeFromValue(v string) (*JobScheduleType, error) {
	ev := JobScheduleType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JobScheduleType: valid values are %v", v, allowedJobScheduleTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JobScheduleType) IsValid() bool {
	for _, existing := range allowedJobScheduleTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to JobScheduleType value
func (v JobScheduleType) Ptr() *JobScheduleType {
	return &v
}

type NullableJobScheduleType struct {
	value *JobScheduleType
	isSet bool
}

func (v NullableJobScheduleType) Get() *JobScheduleType {
	return v.value
}

func (v *NullableJobScheduleType) Set(val *JobScheduleType) {
	v.value = val
	v.isSet = true
}

func (v NullableJobScheduleType) IsSet() bool {
	return v.isSet
}

func (v *NullableJobScheduleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobScheduleType(val *JobScheduleType) *NullableJobScheduleType {
	return &NullableJobScheduleType{value: val, isSet: true}
}

func (v NullableJobScheduleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobScheduleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

