/*
 * YugabyteDB Anywhere V2 APIs
 *
 * An improved set of APIs for managing YugabyteDB Anywhere
 *
 * API version: v2
 * Contact: support@yugabyte.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"time"
)

// JobScheduleUpdateSpec JobScheduleUpdateSpec  Request payload for updating schedule config of a job. 
type JobScheduleUpdateSpec struct {
	// Disable or enable the job schedule.
	Disabled bool `json:"disabled"`
	// Delay interval between two jobs.
	IntervalSecs int64 `json:"interval_secs"`
	// Time until the job should be snoozed.
	SnoozeUntil *time.Time `json:"snooze_until,omitempty"`
	Type JobScheduleType `json:"type"`
}

// NewJobScheduleUpdateSpec instantiates a new JobScheduleUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobScheduleUpdateSpec(disabled bool, intervalSecs int64, type_ JobScheduleType) *JobScheduleUpdateSpec {
	this := JobScheduleUpdateSpec{}
	this.Disabled = disabled
	this.IntervalSecs = intervalSecs
	this.Type = type_
	return &this
}

// NewJobScheduleUpdateSpecWithDefaults instantiates a new JobScheduleUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobScheduleUpdateSpecWithDefaults() *JobScheduleUpdateSpec {
	this := JobScheduleUpdateSpec{}
	return &this
}

// GetDisabled returns the Disabled field value
func (o *JobScheduleUpdateSpec) GetDisabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value
// and a boolean to check if the value has been set.
func (o *JobScheduleUpdateSpec) GetDisabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Disabled, true
}

// SetDisabled sets field value
func (o *JobScheduleUpdateSpec) SetDisabled(v bool) {
	o.Disabled = v
}

// GetIntervalSecs returns the IntervalSecs field value
func (o *JobScheduleUpdateSpec) GetIntervalSecs() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.IntervalSecs
}

// GetIntervalSecsOk returns a tuple with the IntervalSecs field value
// and a boolean to check if the value has been set.
func (o *JobScheduleUpdateSpec) GetIntervalSecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IntervalSecs, true
}

// SetIntervalSecs sets field value
func (o *JobScheduleUpdateSpec) SetIntervalSecs(v int64) {
	o.IntervalSecs = v
}

// GetSnoozeUntil returns the SnoozeUntil field value if set, zero value otherwise.
func (o *JobScheduleUpdateSpec) GetSnoozeUntil() time.Time {
	if o == nil || o.SnoozeUntil == nil {
		var ret time.Time
		return ret
	}
	return *o.SnoozeUntil
}

// GetSnoozeUntilOk returns a tuple with the SnoozeUntil field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobScheduleUpdateSpec) GetSnoozeUntilOk() (*time.Time, bool) {
	if o == nil || o.SnoozeUntil == nil {
		return nil, false
	}
	return o.SnoozeUntil, true
}

// HasSnoozeUntil returns a boolean if a field has been set.
func (o *JobScheduleUpdateSpec) HasSnoozeUntil() bool {
	if o != nil && o.SnoozeUntil != nil {
		return true
	}

	return false
}

// SetSnoozeUntil gets a reference to the given time.Time and assigns it to the SnoozeUntil field.
func (o *JobScheduleUpdateSpec) SetSnoozeUntil(v time.Time) {
	o.SnoozeUntil = &v
}

// GetType returns the Type field value
func (o *JobScheduleUpdateSpec) GetType() JobScheduleType {
	if o == nil {
		var ret JobScheduleType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *JobScheduleUpdateSpec) GetTypeOk() (*JobScheduleType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *JobScheduleUpdateSpec) SetType(v JobScheduleType) {
	o.Type = v
}

func (o JobScheduleUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["disabled"] = o.Disabled
	}
	if true {
		toSerialize["interval_secs"] = o.IntervalSecs
	}
	if o.SnoozeUntil != nil {
		toSerialize["snooze_until"] = o.SnoozeUntil
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableJobScheduleUpdateSpec struct {
	value *JobScheduleUpdateSpec
	isSet bool
}

func (v NullableJobScheduleUpdateSpec) Get() *JobScheduleUpdateSpec {
	return v.value
}

func (v *NullableJobScheduleUpdateSpec) Set(val *JobScheduleUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableJobScheduleUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableJobScheduleUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobScheduleUpdateSpec(val *JobScheduleUpdateSpec) *NullableJobScheduleUpdateSpec {
	return &NullableJobScheduleUpdateSpec{value: val, isSet: true}
}

func (v NullableJobScheduleUpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobScheduleUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


