/*
 * YugabyteDB Anywhere V2 APIs
 *
 * An improved set of APIs for managing YugabyteDB Anywhere
 *
 * API version: v2
 * Contact: support@yugabyte.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// UniverseEditSpec UniverseEditSpec  Request payload to edit an existing Universe. Not all properties of a UniverseSpec can be updated. This is a partial update. Only the fields that are provided will be updated. 
type UniverseEditSpec struct {
	Clusters []ClusterEditSpec `json:"clusters"`
	// Expected universe version. Set to -1 to ignore version checking.
	ExpectedUniverseVersion int32 `json:"expected_universe_version"`
}

// NewUniverseEditSpec instantiates a new UniverseEditSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUniverseEditSpec(clusters []ClusterEditSpec, expectedUniverseVersion int32) *UniverseEditSpec {
	this := UniverseEditSpec{}
	this.Clusters = clusters
	this.ExpectedUniverseVersion = expectedUniverseVersion
	return &this
}

// NewUniverseEditSpecWithDefaults instantiates a new UniverseEditSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUniverseEditSpecWithDefaults() *UniverseEditSpec {
	this := UniverseEditSpec{}
	return &this
}

// GetClusters returns the Clusters field value
func (o *UniverseEditSpec) GetClusters() []ClusterEditSpec {
	if o == nil {
		var ret []ClusterEditSpec
		return ret
	}

	return o.Clusters
}

// GetClustersOk returns a tuple with the Clusters field value
// and a boolean to check if the value has been set.
func (o *UniverseEditSpec) GetClustersOk() (*[]ClusterEditSpec, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Clusters, true
}

// SetClusters sets field value
func (o *UniverseEditSpec) SetClusters(v []ClusterEditSpec) {
	o.Clusters = v
}

// GetExpectedUniverseVersion returns the ExpectedUniverseVersion field value
func (o *UniverseEditSpec) GetExpectedUniverseVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ExpectedUniverseVersion
}

// GetExpectedUniverseVersionOk returns a tuple with the ExpectedUniverseVersion field value
// and a boolean to check if the value has been set.
func (o *UniverseEditSpec) GetExpectedUniverseVersionOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ExpectedUniverseVersion, true
}

// SetExpectedUniverseVersion sets field value
func (o *UniverseEditSpec) SetExpectedUniverseVersion(v int32) {
	o.ExpectedUniverseVersion = v
}

func (o UniverseEditSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["clusters"] = o.Clusters
	}
	if true {
		toSerialize["expected_universe_version"] = o.ExpectedUniverseVersion
	}
	return json.Marshal(toSerialize)
}

type NullableUniverseEditSpec struct {
	value *UniverseEditSpec
	isSet bool
}

func (v NullableUniverseEditSpec) Get() *UniverseEditSpec {
	return v.value
}

func (v *NullableUniverseEditSpec) Set(val *UniverseEditSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableUniverseEditSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableUniverseEditSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUniverseEditSpec(val *UniverseEditSpec) *NullableUniverseEditSpec {
	return &NullableUniverseEditSpec{value: val, isSet: true}
}

func (v NullableUniverseEditSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUniverseEditSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


