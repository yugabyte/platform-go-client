/*
 * YugabyteDB Anywhere V2 APIs
 *
 * An improved set of APIs for managing YugabyteDB Anywhere
 *
 * API version: v2
 * Contact: support@yugabyte.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// K8SNodeResourceSpec K8SNodeResourceSpec  Custom k8s resource spec is used to specify custom cpu and memory requests/limits for tserver and master pods of a cluster. Specified as part of ClusterCustomInstanceSpec. 
type K8SNodeResourceSpec struct {
	// Number of CPU cores for tserver/master pods
	CpuCoreCount *float64 `json:"cpu_core_count,omitempty"`
	// Memory in GiB for tserver/master pods
	MemoryGib *float64 `json:"memory_gib,omitempty"`
}

// NewK8SNodeResourceSpec instantiates a new K8SNodeResourceSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewK8SNodeResourceSpec() *K8SNodeResourceSpec {
	this := K8SNodeResourceSpec{}
	var cpuCoreCount float64 = 2
	this.CpuCoreCount = &cpuCoreCount
	var memoryGib float64 = 4
	this.MemoryGib = &memoryGib
	return &this
}

// NewK8SNodeResourceSpecWithDefaults instantiates a new K8SNodeResourceSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewK8SNodeResourceSpecWithDefaults() *K8SNodeResourceSpec {
	this := K8SNodeResourceSpec{}
	var cpuCoreCount float64 = 2
	this.CpuCoreCount = &cpuCoreCount
	var memoryGib float64 = 4
	this.MemoryGib = &memoryGib
	return &this
}

// GetCpuCoreCount returns the CpuCoreCount field value if set, zero value otherwise.
func (o *K8SNodeResourceSpec) GetCpuCoreCount() float64 {
	if o == nil || o.CpuCoreCount == nil {
		var ret float64
		return ret
	}
	return *o.CpuCoreCount
}

// GetCpuCoreCountOk returns a tuple with the CpuCoreCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *K8SNodeResourceSpec) GetCpuCoreCountOk() (*float64, bool) {
	if o == nil || o.CpuCoreCount == nil {
		return nil, false
	}
	return o.CpuCoreCount, true
}

// HasCpuCoreCount returns a boolean if a field has been set.
func (o *K8SNodeResourceSpec) HasCpuCoreCount() bool {
	if o != nil && o.CpuCoreCount != nil {
		return true
	}

	return false
}

// SetCpuCoreCount gets a reference to the given float64 and assigns it to the CpuCoreCount field.
func (o *K8SNodeResourceSpec) SetCpuCoreCount(v float64) {
	o.CpuCoreCount = &v
}

// GetMemoryGib returns the MemoryGib field value if set, zero value otherwise.
func (o *K8SNodeResourceSpec) GetMemoryGib() float64 {
	if o == nil || o.MemoryGib == nil {
		var ret float64
		return ret
	}
	return *o.MemoryGib
}

// GetMemoryGibOk returns a tuple with the MemoryGib field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *K8SNodeResourceSpec) GetMemoryGibOk() (*float64, bool) {
	if o == nil || o.MemoryGib == nil {
		return nil, false
	}
	return o.MemoryGib, true
}

// HasMemoryGib returns a boolean if a field has been set.
func (o *K8SNodeResourceSpec) HasMemoryGib() bool {
	if o != nil && o.MemoryGib != nil {
		return true
	}

	return false
}

// SetMemoryGib gets a reference to the given float64 and assigns it to the MemoryGib field.
func (o *K8SNodeResourceSpec) SetMemoryGib(v float64) {
	o.MemoryGib = &v
}

func (o K8SNodeResourceSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CpuCoreCount != nil {
		toSerialize["cpu_core_count"] = o.CpuCoreCount
	}
	if o.MemoryGib != nil {
		toSerialize["memory_gib"] = o.MemoryGib
	}
	return json.Marshal(toSerialize)
}

type NullableK8SNodeResourceSpec struct {
	value *K8SNodeResourceSpec
	isSet bool
}

func (v NullableK8SNodeResourceSpec) Get() *K8SNodeResourceSpec {
	return v.value
}

func (v *NullableK8SNodeResourceSpec) Set(val *K8SNodeResourceSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableK8SNodeResourceSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableK8SNodeResourceSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableK8SNodeResourceSpec(val *K8SNodeResourceSpec) *NullableK8SNodeResourceSpec {
	return &NullableK8SNodeResourceSpec{value: val, isSet: true}
}

func (v NullableK8SNodeResourceSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableK8SNodeResourceSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


