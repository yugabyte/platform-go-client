/*
 * YugabyteDB Anywhere V2 APIs
 *
 * An improved set of APIs for managing YugabyteDB Anywhere
 *
 * API version: v2
 * Contact: support@yugabyte.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// JobScheduleApiFilter API filter for job schedule that is a part of JobSchedulePagedQuerySpec.
type JobScheduleApiFilter struct {
	// Filter by config class of the job.
	ConfigClass *string `json:"config_class,omitempty"`
	// Filter out disabled job schedules if true.
	EnabledOnly *bool `json:"enabled_only,omitempty"`
	// Filter by name regex.
	NameRegex *string `json:"name_regex,omitempty"`
	// Filter by next start time window from now.
	NextStartWindowSecs *int64 `json:"next_start_window_secs,omitempty"`
	Type *JobScheduleType `json:"type,omitempty"`
}

// NewJobScheduleApiFilter instantiates a new JobScheduleApiFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobScheduleApiFilter() *JobScheduleApiFilter {
	this := JobScheduleApiFilter{}
	return &this
}

// NewJobScheduleApiFilterWithDefaults instantiates a new JobScheduleApiFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobScheduleApiFilterWithDefaults() *JobScheduleApiFilter {
	this := JobScheduleApiFilter{}
	return &this
}

// GetConfigClass returns the ConfigClass field value if set, zero value otherwise.
func (o *JobScheduleApiFilter) GetConfigClass() string {
	if o == nil || o.ConfigClass == nil {
		var ret string
		return ret
	}
	return *o.ConfigClass
}

// GetConfigClassOk returns a tuple with the ConfigClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobScheduleApiFilter) GetConfigClassOk() (*string, bool) {
	if o == nil || o.ConfigClass == nil {
		return nil, false
	}
	return o.ConfigClass, true
}

// HasConfigClass returns a boolean if a field has been set.
func (o *JobScheduleApiFilter) HasConfigClass() bool {
	if o != nil && o.ConfigClass != nil {
		return true
	}

	return false
}

// SetConfigClass gets a reference to the given string and assigns it to the ConfigClass field.
func (o *JobScheduleApiFilter) SetConfigClass(v string) {
	o.ConfigClass = &v
}

// GetEnabledOnly returns the EnabledOnly field value if set, zero value otherwise.
func (o *JobScheduleApiFilter) GetEnabledOnly() bool {
	if o == nil || o.EnabledOnly == nil {
		var ret bool
		return ret
	}
	return *o.EnabledOnly
}

// GetEnabledOnlyOk returns a tuple with the EnabledOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobScheduleApiFilter) GetEnabledOnlyOk() (*bool, bool) {
	if o == nil || o.EnabledOnly == nil {
		return nil, false
	}
	return o.EnabledOnly, true
}

// HasEnabledOnly returns a boolean if a field has been set.
func (o *JobScheduleApiFilter) HasEnabledOnly() bool {
	if o != nil && o.EnabledOnly != nil {
		return true
	}

	return false
}

// SetEnabledOnly gets a reference to the given bool and assigns it to the EnabledOnly field.
func (o *JobScheduleApiFilter) SetEnabledOnly(v bool) {
	o.EnabledOnly = &v
}

// GetNameRegex returns the NameRegex field value if set, zero value otherwise.
func (o *JobScheduleApiFilter) GetNameRegex() string {
	if o == nil || o.NameRegex == nil {
		var ret string
		return ret
	}
	return *o.NameRegex
}

// GetNameRegexOk returns a tuple with the NameRegex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobScheduleApiFilter) GetNameRegexOk() (*string, bool) {
	if o == nil || o.NameRegex == nil {
		return nil, false
	}
	return o.NameRegex, true
}

// HasNameRegex returns a boolean if a field has been set.
func (o *JobScheduleApiFilter) HasNameRegex() bool {
	if o != nil && o.NameRegex != nil {
		return true
	}

	return false
}

// SetNameRegex gets a reference to the given string and assigns it to the NameRegex field.
func (o *JobScheduleApiFilter) SetNameRegex(v string) {
	o.NameRegex = &v
}

// GetNextStartWindowSecs returns the NextStartWindowSecs field value if set, zero value otherwise.
func (o *JobScheduleApiFilter) GetNextStartWindowSecs() int64 {
	if o == nil || o.NextStartWindowSecs == nil {
		var ret int64
		return ret
	}
	return *o.NextStartWindowSecs
}

// GetNextStartWindowSecsOk returns a tuple with the NextStartWindowSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobScheduleApiFilter) GetNextStartWindowSecsOk() (*int64, bool) {
	if o == nil || o.NextStartWindowSecs == nil {
		return nil, false
	}
	return o.NextStartWindowSecs, true
}

// HasNextStartWindowSecs returns a boolean if a field has been set.
func (o *JobScheduleApiFilter) HasNextStartWindowSecs() bool {
	if o != nil && o.NextStartWindowSecs != nil {
		return true
	}

	return false
}

// SetNextStartWindowSecs gets a reference to the given int64 and assigns it to the NextStartWindowSecs field.
func (o *JobScheduleApiFilter) SetNextStartWindowSecs(v int64) {
	o.NextStartWindowSecs = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *JobScheduleApiFilter) GetType() JobScheduleType {
	if o == nil || o.Type == nil {
		var ret JobScheduleType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobScheduleApiFilter) GetTypeOk() (*JobScheduleType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *JobScheduleApiFilter) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given JobScheduleType and assigns it to the Type field.
func (o *JobScheduleApiFilter) SetType(v JobScheduleType) {
	o.Type = &v
}

func (o JobScheduleApiFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ConfigClass != nil {
		toSerialize["config_class"] = o.ConfigClass
	}
	if o.EnabledOnly != nil {
		toSerialize["enabled_only"] = o.EnabledOnly
	}
	if o.NameRegex != nil {
		toSerialize["name_regex"] = o.NameRegex
	}
	if o.NextStartWindowSecs != nil {
		toSerialize["next_start_window_secs"] = o.NextStartWindowSecs
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableJobScheduleApiFilter struct {
	value *JobScheduleApiFilter
	isSet bool
}

func (v NullableJobScheduleApiFilter) Get() *JobScheduleApiFilter {
	return v.value
}

func (v *NullableJobScheduleApiFilter) Set(val *JobScheduleApiFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableJobScheduleApiFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableJobScheduleApiFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobScheduleApiFilter(val *JobScheduleApiFilter) *NullableJobScheduleApiFilter {
	return &NullableJobScheduleApiFilter{value: val, isSet: true}
}

func (v NullableJobScheduleApiFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobScheduleApiFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


