/*
 * YugabyteDB Anywhere V2 APIs
 *
 * An improved set of APIs for managing YugabyteDB Anywhere
 *
 * API version: v2
 * Contact: support@yugabyte.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"time"
)

// AuthGroupToRolesMapping AuthGroupToRolesMapping  Group mapping properties. This is used to map LDAP and OIDC group to YBA roles. 
type AuthGroupToRolesMapping struct {
	// Group name incase of OIDC. Group DN incase of LDAP.
	GroupIdentifier string `json:"group_identifier"`
	// System generated UUID for this group mapping.
	Uuid *string `json:"uuid,omitempty"`
	// The type of group. Can be either LDAP/OIDC.
	Type string `json:"type"`
	// Group mapping creation date.
	CreationDate *time.Time `json:"creation_date,omitempty"`
	RoleResourceDefinitions []RoleResourceDefinition `json:"role_resource_definitions"`
}

// NewAuthGroupToRolesMapping instantiates a new AuthGroupToRolesMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthGroupToRolesMapping(groupIdentifier string, type_ string, roleResourceDefinitions []RoleResourceDefinition) *AuthGroupToRolesMapping {
	this := AuthGroupToRolesMapping{}
	this.GroupIdentifier = groupIdentifier
	this.Type = type_
	this.RoleResourceDefinitions = roleResourceDefinitions
	return &this
}

// NewAuthGroupToRolesMappingWithDefaults instantiates a new AuthGroupToRolesMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthGroupToRolesMappingWithDefaults() *AuthGroupToRolesMapping {
	this := AuthGroupToRolesMapping{}
	return &this
}

// GetGroupIdentifier returns the GroupIdentifier field value
func (o *AuthGroupToRolesMapping) GetGroupIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupIdentifier
}

// GetGroupIdentifierOk returns a tuple with the GroupIdentifier field value
// and a boolean to check if the value has been set.
func (o *AuthGroupToRolesMapping) GetGroupIdentifierOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.GroupIdentifier, true
}

// SetGroupIdentifier sets field value
func (o *AuthGroupToRolesMapping) SetGroupIdentifier(v string) {
	o.GroupIdentifier = v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *AuthGroupToRolesMapping) GetUuid() string {
	if o == nil || o.Uuid == nil {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthGroupToRolesMapping) GetUuidOk() (*string, bool) {
	if o == nil || o.Uuid == nil {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *AuthGroupToRolesMapping) HasUuid() bool {
	if o != nil && o.Uuid != nil {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *AuthGroupToRolesMapping) SetUuid(v string) {
	o.Uuid = &v
}

// GetType returns the Type field value
func (o *AuthGroupToRolesMapping) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AuthGroupToRolesMapping) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AuthGroupToRolesMapping) SetType(v string) {
	o.Type = v
}

// GetCreationDate returns the CreationDate field value if set, zero value otherwise.
func (o *AuthGroupToRolesMapping) GetCreationDate() time.Time {
	if o == nil || o.CreationDate == nil {
		var ret time.Time
		return ret
	}
	return *o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthGroupToRolesMapping) GetCreationDateOk() (*time.Time, bool) {
	if o == nil || o.CreationDate == nil {
		return nil, false
	}
	return o.CreationDate, true
}

// HasCreationDate returns a boolean if a field has been set.
func (o *AuthGroupToRolesMapping) HasCreationDate() bool {
	if o != nil && o.CreationDate != nil {
		return true
	}

	return false
}

// SetCreationDate gets a reference to the given time.Time and assigns it to the CreationDate field.
func (o *AuthGroupToRolesMapping) SetCreationDate(v time.Time) {
	o.CreationDate = &v
}

// GetRoleResourceDefinitions returns the RoleResourceDefinitions field value
func (o *AuthGroupToRolesMapping) GetRoleResourceDefinitions() []RoleResourceDefinition {
	if o == nil {
		var ret []RoleResourceDefinition
		return ret
	}

	return o.RoleResourceDefinitions
}

// GetRoleResourceDefinitionsOk returns a tuple with the RoleResourceDefinitions field value
// and a boolean to check if the value has been set.
func (o *AuthGroupToRolesMapping) GetRoleResourceDefinitionsOk() (*[]RoleResourceDefinition, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RoleResourceDefinitions, true
}

// SetRoleResourceDefinitions sets field value
func (o *AuthGroupToRolesMapping) SetRoleResourceDefinitions(v []RoleResourceDefinition) {
	o.RoleResourceDefinitions = v
}

func (o AuthGroupToRolesMapping) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["group_identifier"] = o.GroupIdentifier
	}
	if o.Uuid != nil {
		toSerialize["uuid"] = o.Uuid
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.CreationDate != nil {
		toSerialize["creation_date"] = o.CreationDate
	}
	if true {
		toSerialize["role_resource_definitions"] = o.RoleResourceDefinitions
	}
	return json.Marshal(toSerialize)
}

type NullableAuthGroupToRolesMapping struct {
	value *AuthGroupToRolesMapping
	isSet bool
}

func (v NullableAuthGroupToRolesMapping) Get() *AuthGroupToRolesMapping {
	return v.value
}

func (v *NullableAuthGroupToRolesMapping) Set(val *AuthGroupToRolesMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthGroupToRolesMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthGroupToRolesMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthGroupToRolesMapping(val *AuthGroupToRolesMapping) *NullableAuthGroupToRolesMapping {
	return &NullableAuthGroupToRolesMapping{value: val, isSet: true}
}

func (v NullableAuthGroupToRolesMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthGroupToRolesMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


