/*
 * YugabyteDB Anywhere V2 APIs
 *
 * An improved set of APIs for managing YugabyteDB Anywhere
 *
 * API version: v2
 * Contact: support@yugabyte.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// UniverseEditEncryptionInTransit UniverseEditEncryptionInTransit  Request Payload to enable or disable encryption in transit. Encryption in transit can be toggled for either node to node traffic or node to client traffic. Part of  UniverseEncryptionInTransitReq 
type UniverseEditEncryptionInTransit struct {
	// Applicable for rolling restarts. Time to wait between master restarts. Defaults to 180000.
	SleepAfterMasterRestartMillis *int32 `json:"sleep_after_master_restart_millis,omitempty"`
	// Applicable for rolling restarts. Time to wait between tserver restarts. Defaults to 180000.
	SleepAfterTserverRestartMillis *int32 `json:"sleep_after_tserver_restart_millis,omitempty"`
	// Perform a rolling upgrade where only one node is upgraded at a time. This is the default behavior. False will perform a non-rolling upgrade where all nodes are upgraded at the same 
	RollingUpgrade *bool `json:"rolling_upgrade,omitempty"`
	RollMaxBatchSize *RollMaxBatchSize `json:"roll_max_batch_size,omitempty"`
	// Control encryption in transit between YugabyteDB nodes
	NodeToNode *bool `json:"node_to_node,omitempty"`
	// Control encryption in transit between YugabyteDB nodes and clients
	ClientToNode *bool `json:"client_to_node,omitempty"`
	// Root CA cert for node to node encryption. Required if node_to_node is true
	RootCa *string `json:"root_ca,omitempty"`
	// Root CA used for node to client encryption. Required if client_to_node is true
	ClientRootCa *string `json:"client_root_ca,omitempty"`
}

// NewUniverseEditEncryptionInTransit instantiates a new UniverseEditEncryptionInTransit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUniverseEditEncryptionInTransit() *UniverseEditEncryptionInTransit {
	this := UniverseEditEncryptionInTransit{}
	var sleepAfterMasterRestartMillis int32 = 180000
	this.SleepAfterMasterRestartMillis = &sleepAfterMasterRestartMillis
	var sleepAfterTserverRestartMillis int32 = 180000
	this.SleepAfterTserverRestartMillis = &sleepAfterTserverRestartMillis
	var rollingUpgrade bool = true
	this.RollingUpgrade = &rollingUpgrade
	return &this
}

// NewUniverseEditEncryptionInTransitWithDefaults instantiates a new UniverseEditEncryptionInTransit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUniverseEditEncryptionInTransitWithDefaults() *UniverseEditEncryptionInTransit {
	this := UniverseEditEncryptionInTransit{}
	var sleepAfterMasterRestartMillis int32 = 180000
	this.SleepAfterMasterRestartMillis = &sleepAfterMasterRestartMillis
	var sleepAfterTserverRestartMillis int32 = 180000
	this.SleepAfterTserverRestartMillis = &sleepAfterTserverRestartMillis
	var rollingUpgrade bool = true
	this.RollingUpgrade = &rollingUpgrade
	return &this
}

// GetSleepAfterMasterRestartMillis returns the SleepAfterMasterRestartMillis field value if set, zero value otherwise.
func (o *UniverseEditEncryptionInTransit) GetSleepAfterMasterRestartMillis() int32 {
	if o == nil || o.SleepAfterMasterRestartMillis == nil {
		var ret int32
		return ret
	}
	return *o.SleepAfterMasterRestartMillis
}

// GetSleepAfterMasterRestartMillisOk returns a tuple with the SleepAfterMasterRestartMillis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseEditEncryptionInTransit) GetSleepAfterMasterRestartMillisOk() (*int32, bool) {
	if o == nil || o.SleepAfterMasterRestartMillis == nil {
		return nil, false
	}
	return o.SleepAfterMasterRestartMillis, true
}

// HasSleepAfterMasterRestartMillis returns a boolean if a field has been set.
func (o *UniverseEditEncryptionInTransit) HasSleepAfterMasterRestartMillis() bool {
	if o != nil && o.SleepAfterMasterRestartMillis != nil {
		return true
	}

	return false
}

// SetSleepAfterMasterRestartMillis gets a reference to the given int32 and assigns it to the SleepAfterMasterRestartMillis field.
func (o *UniverseEditEncryptionInTransit) SetSleepAfterMasterRestartMillis(v int32) {
	o.SleepAfterMasterRestartMillis = &v
}

// GetSleepAfterTserverRestartMillis returns the SleepAfterTserverRestartMillis field value if set, zero value otherwise.
func (o *UniverseEditEncryptionInTransit) GetSleepAfterTserverRestartMillis() int32 {
	if o == nil || o.SleepAfterTserverRestartMillis == nil {
		var ret int32
		return ret
	}
	return *o.SleepAfterTserverRestartMillis
}

// GetSleepAfterTserverRestartMillisOk returns a tuple with the SleepAfterTserverRestartMillis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseEditEncryptionInTransit) GetSleepAfterTserverRestartMillisOk() (*int32, bool) {
	if o == nil || o.SleepAfterTserverRestartMillis == nil {
		return nil, false
	}
	return o.SleepAfterTserverRestartMillis, true
}

// HasSleepAfterTserverRestartMillis returns a boolean if a field has been set.
func (o *UniverseEditEncryptionInTransit) HasSleepAfterTserverRestartMillis() bool {
	if o != nil && o.SleepAfterTserverRestartMillis != nil {
		return true
	}

	return false
}

// SetSleepAfterTserverRestartMillis gets a reference to the given int32 and assigns it to the SleepAfterTserverRestartMillis field.
func (o *UniverseEditEncryptionInTransit) SetSleepAfterTserverRestartMillis(v int32) {
	o.SleepAfterTserverRestartMillis = &v
}

// GetRollingUpgrade returns the RollingUpgrade field value if set, zero value otherwise.
func (o *UniverseEditEncryptionInTransit) GetRollingUpgrade() bool {
	if o == nil || o.RollingUpgrade == nil {
		var ret bool
		return ret
	}
	return *o.RollingUpgrade
}

// GetRollingUpgradeOk returns a tuple with the RollingUpgrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseEditEncryptionInTransit) GetRollingUpgradeOk() (*bool, bool) {
	if o == nil || o.RollingUpgrade == nil {
		return nil, false
	}
	return o.RollingUpgrade, true
}

// HasRollingUpgrade returns a boolean if a field has been set.
func (o *UniverseEditEncryptionInTransit) HasRollingUpgrade() bool {
	if o != nil && o.RollingUpgrade != nil {
		return true
	}

	return false
}

// SetRollingUpgrade gets a reference to the given bool and assigns it to the RollingUpgrade field.
func (o *UniverseEditEncryptionInTransit) SetRollingUpgrade(v bool) {
	o.RollingUpgrade = &v
}

// GetRollMaxBatchSize returns the RollMaxBatchSize field value if set, zero value otherwise.
func (o *UniverseEditEncryptionInTransit) GetRollMaxBatchSize() RollMaxBatchSize {
	if o == nil || o.RollMaxBatchSize == nil {
		var ret RollMaxBatchSize
		return ret
	}
	return *o.RollMaxBatchSize
}

// GetRollMaxBatchSizeOk returns a tuple with the RollMaxBatchSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseEditEncryptionInTransit) GetRollMaxBatchSizeOk() (*RollMaxBatchSize, bool) {
	if o == nil || o.RollMaxBatchSize == nil {
		return nil, false
	}
	return o.RollMaxBatchSize, true
}

// HasRollMaxBatchSize returns a boolean if a field has been set.
func (o *UniverseEditEncryptionInTransit) HasRollMaxBatchSize() bool {
	if o != nil && o.RollMaxBatchSize != nil {
		return true
	}

	return false
}

// SetRollMaxBatchSize gets a reference to the given RollMaxBatchSize and assigns it to the RollMaxBatchSize field.
func (o *UniverseEditEncryptionInTransit) SetRollMaxBatchSize(v RollMaxBatchSize) {
	o.RollMaxBatchSize = &v
}

// GetNodeToNode returns the NodeToNode field value if set, zero value otherwise.
func (o *UniverseEditEncryptionInTransit) GetNodeToNode() bool {
	if o == nil || o.NodeToNode == nil {
		var ret bool
		return ret
	}
	return *o.NodeToNode
}

// GetNodeToNodeOk returns a tuple with the NodeToNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseEditEncryptionInTransit) GetNodeToNodeOk() (*bool, bool) {
	if o == nil || o.NodeToNode == nil {
		return nil, false
	}
	return o.NodeToNode, true
}

// HasNodeToNode returns a boolean if a field has been set.
func (o *UniverseEditEncryptionInTransit) HasNodeToNode() bool {
	if o != nil && o.NodeToNode != nil {
		return true
	}

	return false
}

// SetNodeToNode gets a reference to the given bool and assigns it to the NodeToNode field.
func (o *UniverseEditEncryptionInTransit) SetNodeToNode(v bool) {
	o.NodeToNode = &v
}

// GetClientToNode returns the ClientToNode field value if set, zero value otherwise.
func (o *UniverseEditEncryptionInTransit) GetClientToNode() bool {
	if o == nil || o.ClientToNode == nil {
		var ret bool
		return ret
	}
	return *o.ClientToNode
}

// GetClientToNodeOk returns a tuple with the ClientToNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseEditEncryptionInTransit) GetClientToNodeOk() (*bool, bool) {
	if o == nil || o.ClientToNode == nil {
		return nil, false
	}
	return o.ClientToNode, true
}

// HasClientToNode returns a boolean if a field has been set.
func (o *UniverseEditEncryptionInTransit) HasClientToNode() bool {
	if o != nil && o.ClientToNode != nil {
		return true
	}

	return false
}

// SetClientToNode gets a reference to the given bool and assigns it to the ClientToNode field.
func (o *UniverseEditEncryptionInTransit) SetClientToNode(v bool) {
	o.ClientToNode = &v
}

// GetRootCa returns the RootCa field value if set, zero value otherwise.
func (o *UniverseEditEncryptionInTransit) GetRootCa() string {
	if o == nil || o.RootCa == nil {
		var ret string
		return ret
	}
	return *o.RootCa
}

// GetRootCaOk returns a tuple with the RootCa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseEditEncryptionInTransit) GetRootCaOk() (*string, bool) {
	if o == nil || o.RootCa == nil {
		return nil, false
	}
	return o.RootCa, true
}

// HasRootCa returns a boolean if a field has been set.
func (o *UniverseEditEncryptionInTransit) HasRootCa() bool {
	if o != nil && o.RootCa != nil {
		return true
	}

	return false
}

// SetRootCa gets a reference to the given string and assigns it to the RootCa field.
func (o *UniverseEditEncryptionInTransit) SetRootCa(v string) {
	o.RootCa = &v
}

// GetClientRootCa returns the ClientRootCa field value if set, zero value otherwise.
func (o *UniverseEditEncryptionInTransit) GetClientRootCa() string {
	if o == nil || o.ClientRootCa == nil {
		var ret string
		return ret
	}
	return *o.ClientRootCa
}

// GetClientRootCaOk returns a tuple with the ClientRootCa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseEditEncryptionInTransit) GetClientRootCaOk() (*string, bool) {
	if o == nil || o.ClientRootCa == nil {
		return nil, false
	}
	return o.ClientRootCa, true
}

// HasClientRootCa returns a boolean if a field has been set.
func (o *UniverseEditEncryptionInTransit) HasClientRootCa() bool {
	if o != nil && o.ClientRootCa != nil {
		return true
	}

	return false
}

// SetClientRootCa gets a reference to the given string and assigns it to the ClientRootCa field.
func (o *UniverseEditEncryptionInTransit) SetClientRootCa(v string) {
	o.ClientRootCa = &v
}

func (o UniverseEditEncryptionInTransit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SleepAfterMasterRestartMillis != nil {
		toSerialize["sleep_after_master_restart_millis"] = o.SleepAfterMasterRestartMillis
	}
	if o.SleepAfterTserverRestartMillis != nil {
		toSerialize["sleep_after_tserver_restart_millis"] = o.SleepAfterTserverRestartMillis
	}
	if o.RollingUpgrade != nil {
		toSerialize["rolling_upgrade"] = o.RollingUpgrade
	}
	if o.RollMaxBatchSize != nil {
		toSerialize["roll_max_batch_size"] = o.RollMaxBatchSize
	}
	if o.NodeToNode != nil {
		toSerialize["node_to_node"] = o.NodeToNode
	}
	if o.ClientToNode != nil {
		toSerialize["client_to_node"] = o.ClientToNode
	}
	if o.RootCa != nil {
		toSerialize["root_ca"] = o.RootCa
	}
	if o.ClientRootCa != nil {
		toSerialize["client_root_ca"] = o.ClientRootCa
	}
	return json.Marshal(toSerialize)
}

type NullableUniverseEditEncryptionInTransit struct {
	value *UniverseEditEncryptionInTransit
	isSet bool
}

func (v NullableUniverseEditEncryptionInTransit) Get() *UniverseEditEncryptionInTransit {
	return v.value
}

func (v *NullableUniverseEditEncryptionInTransit) Set(val *UniverseEditEncryptionInTransit) {
	v.value = val
	v.isSet = true
}

func (v NullableUniverseEditEncryptionInTransit) IsSet() bool {
	return v.isSet
}

func (v *NullableUniverseEditEncryptionInTransit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUniverseEditEncryptionInTransit(val *UniverseEditEncryptionInTransit) *NullableUniverseEditEncryptionInTransit {
	return &NullableUniverseEditEncryptionInTransit{value: val, isSet: true}
}

func (v NullableUniverseEditEncryptionInTransit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUniverseEditEncryptionInTransit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


