/*
 * YugabyteDB Anywhere V2 APIs
 *
 * An improved set of APIs for managing YugabyteDB Anywhere
 *
 * API version: v2
 * Contact: support@yugabyte.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// UniverseRollbackUpgradeReq UniverseRollbackUpgrade  Payload to rollback a YugabyteDB software upgrade on a Universe. Part of  UniverseRollbackUpgradeReq 
type UniverseRollbackUpgradeReq struct {
	// Applicable for rolling restarts. Time to wait between master restarts. Defaults to 180000.
	SleepAfterMasterRestartMillis *int32 `json:"sleep_after_master_restart_millis,omitempty"`
	// Applicable for rolling restarts. Time to wait between tserver restarts. Defaults to 180000.
	SleepAfterTserverRestartMillis *int32 `json:"sleep_after_tserver_restart_millis,omitempty"`
	// Perform a rolling upgrade where only one node is upgraded at a time. This is the default behavior. False will perform a non-rolling upgrade where all nodes are upgraded at the same 
	RollingUpgrade *bool `json:"rolling_upgrade,omitempty"`
	RollMaxBatchSize *RollMaxBatchSize `json:"roll_max_batch_size,omitempty"`
}

// NewUniverseRollbackUpgradeReq instantiates a new UniverseRollbackUpgradeReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUniverseRollbackUpgradeReq() *UniverseRollbackUpgradeReq {
	this := UniverseRollbackUpgradeReq{}
	var sleepAfterMasterRestartMillis int32 = 180000
	this.SleepAfterMasterRestartMillis = &sleepAfterMasterRestartMillis
	var sleepAfterTserverRestartMillis int32 = 180000
	this.SleepAfterTserverRestartMillis = &sleepAfterTserverRestartMillis
	var rollingUpgrade bool = true
	this.RollingUpgrade = &rollingUpgrade
	return &this
}

// NewUniverseRollbackUpgradeReqWithDefaults instantiates a new UniverseRollbackUpgradeReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUniverseRollbackUpgradeReqWithDefaults() *UniverseRollbackUpgradeReq {
	this := UniverseRollbackUpgradeReq{}
	var sleepAfterMasterRestartMillis int32 = 180000
	this.SleepAfterMasterRestartMillis = &sleepAfterMasterRestartMillis
	var sleepAfterTserverRestartMillis int32 = 180000
	this.SleepAfterTserverRestartMillis = &sleepAfterTserverRestartMillis
	var rollingUpgrade bool = true
	this.RollingUpgrade = &rollingUpgrade
	return &this
}

// GetSleepAfterMasterRestartMillis returns the SleepAfterMasterRestartMillis field value if set, zero value otherwise.
func (o *UniverseRollbackUpgradeReq) GetSleepAfterMasterRestartMillis() int32 {
	if o == nil || o.SleepAfterMasterRestartMillis == nil {
		var ret int32
		return ret
	}
	return *o.SleepAfterMasterRestartMillis
}

// GetSleepAfterMasterRestartMillisOk returns a tuple with the SleepAfterMasterRestartMillis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseRollbackUpgradeReq) GetSleepAfterMasterRestartMillisOk() (*int32, bool) {
	if o == nil || o.SleepAfterMasterRestartMillis == nil {
		return nil, false
	}
	return o.SleepAfterMasterRestartMillis, true
}

// HasSleepAfterMasterRestartMillis returns a boolean if a field has been set.
func (o *UniverseRollbackUpgradeReq) HasSleepAfterMasterRestartMillis() bool {
	if o != nil && o.SleepAfterMasterRestartMillis != nil {
		return true
	}

	return false
}

// SetSleepAfterMasterRestartMillis gets a reference to the given int32 and assigns it to the SleepAfterMasterRestartMillis field.
func (o *UniverseRollbackUpgradeReq) SetSleepAfterMasterRestartMillis(v int32) {
	o.SleepAfterMasterRestartMillis = &v
}

// GetSleepAfterTserverRestartMillis returns the SleepAfterTserverRestartMillis field value if set, zero value otherwise.
func (o *UniverseRollbackUpgradeReq) GetSleepAfterTserverRestartMillis() int32 {
	if o == nil || o.SleepAfterTserverRestartMillis == nil {
		var ret int32
		return ret
	}
	return *o.SleepAfterTserverRestartMillis
}

// GetSleepAfterTserverRestartMillisOk returns a tuple with the SleepAfterTserverRestartMillis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseRollbackUpgradeReq) GetSleepAfterTserverRestartMillisOk() (*int32, bool) {
	if o == nil || o.SleepAfterTserverRestartMillis == nil {
		return nil, false
	}
	return o.SleepAfterTserverRestartMillis, true
}

// HasSleepAfterTserverRestartMillis returns a boolean if a field has been set.
func (o *UniverseRollbackUpgradeReq) HasSleepAfterTserverRestartMillis() bool {
	if o != nil && o.SleepAfterTserverRestartMillis != nil {
		return true
	}

	return false
}

// SetSleepAfterTserverRestartMillis gets a reference to the given int32 and assigns it to the SleepAfterTserverRestartMillis field.
func (o *UniverseRollbackUpgradeReq) SetSleepAfterTserverRestartMillis(v int32) {
	o.SleepAfterTserverRestartMillis = &v
}

// GetRollingUpgrade returns the RollingUpgrade field value if set, zero value otherwise.
func (o *UniverseRollbackUpgradeReq) GetRollingUpgrade() bool {
	if o == nil || o.RollingUpgrade == nil {
		var ret bool
		return ret
	}
	return *o.RollingUpgrade
}

// GetRollingUpgradeOk returns a tuple with the RollingUpgrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseRollbackUpgradeReq) GetRollingUpgradeOk() (*bool, bool) {
	if o == nil || o.RollingUpgrade == nil {
		return nil, false
	}
	return o.RollingUpgrade, true
}

// HasRollingUpgrade returns a boolean if a field has been set.
func (o *UniverseRollbackUpgradeReq) HasRollingUpgrade() bool {
	if o != nil && o.RollingUpgrade != nil {
		return true
	}

	return false
}

// SetRollingUpgrade gets a reference to the given bool and assigns it to the RollingUpgrade field.
func (o *UniverseRollbackUpgradeReq) SetRollingUpgrade(v bool) {
	o.RollingUpgrade = &v
}

// GetRollMaxBatchSize returns the RollMaxBatchSize field value if set, zero value otherwise.
func (o *UniverseRollbackUpgradeReq) GetRollMaxBatchSize() RollMaxBatchSize {
	if o == nil || o.RollMaxBatchSize == nil {
		var ret RollMaxBatchSize
		return ret
	}
	return *o.RollMaxBatchSize
}

// GetRollMaxBatchSizeOk returns a tuple with the RollMaxBatchSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniverseRollbackUpgradeReq) GetRollMaxBatchSizeOk() (*RollMaxBatchSize, bool) {
	if o == nil || o.RollMaxBatchSize == nil {
		return nil, false
	}
	return o.RollMaxBatchSize, true
}

// HasRollMaxBatchSize returns a boolean if a field has been set.
func (o *UniverseRollbackUpgradeReq) HasRollMaxBatchSize() bool {
	if o != nil && o.RollMaxBatchSize != nil {
		return true
	}

	return false
}

// SetRollMaxBatchSize gets a reference to the given RollMaxBatchSize and assigns it to the RollMaxBatchSize field.
func (o *UniverseRollbackUpgradeReq) SetRollMaxBatchSize(v RollMaxBatchSize) {
	o.RollMaxBatchSize = &v
}

func (o UniverseRollbackUpgradeReq) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SleepAfterMasterRestartMillis != nil {
		toSerialize["sleep_after_master_restart_millis"] = o.SleepAfterMasterRestartMillis
	}
	if o.SleepAfterTserverRestartMillis != nil {
		toSerialize["sleep_after_tserver_restart_millis"] = o.SleepAfterTserverRestartMillis
	}
	if o.RollingUpgrade != nil {
		toSerialize["rolling_upgrade"] = o.RollingUpgrade
	}
	if o.RollMaxBatchSize != nil {
		toSerialize["roll_max_batch_size"] = o.RollMaxBatchSize
	}
	return json.Marshal(toSerialize)
}

type NullableUniverseRollbackUpgradeReq struct {
	value *UniverseRollbackUpgradeReq
	isSet bool
}

func (v NullableUniverseRollbackUpgradeReq) Get() *UniverseRollbackUpgradeReq {
	return v.value
}

func (v *NullableUniverseRollbackUpgradeReq) Set(val *UniverseRollbackUpgradeReq) {
	v.value = val
	v.isSet = true
}

func (v NullableUniverseRollbackUpgradeReq) IsSet() bool {
	return v.isSet
}

func (v *NullableUniverseRollbackUpgradeReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUniverseRollbackUpgradeReq(val *UniverseRollbackUpgradeReq) *NullableUniverseRollbackUpgradeReq {
	return &NullableUniverseRollbackUpgradeReq{value: val, isSet: true}
}

func (v NullableUniverseRollbackUpgradeReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUniverseRollbackUpgradeReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


