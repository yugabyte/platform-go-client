/*
 * YugabyteDB Anywhere APIs
 *
 * ALPHA - NOT FOR EXTERNAL USE
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ywclient

import (
	"encoding/json"
)

// PerProcessDetails WARNING: This is a preview API that could change. User intent Properties that can be overriden on per-process basis.
type PerProcessDetails struct {
	DeviceInfo *DeviceInfo `json:"deviceInfo,omitempty"`
	InstanceType *string `json:"instanceType,omitempty"`
}

// NewPerProcessDetails instantiates a new PerProcessDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPerProcessDetails() *PerProcessDetails {
	this := PerProcessDetails{}
	return &this
}

// NewPerProcessDetailsWithDefaults instantiates a new PerProcessDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPerProcessDetailsWithDefaults() *PerProcessDetails {
	this := PerProcessDetails{}
	return &this
}

// GetDeviceInfo returns the DeviceInfo field value if set, zero value otherwise.
func (o *PerProcessDetails) GetDeviceInfo() DeviceInfo {
	if o == nil || o.DeviceInfo == nil {
		var ret DeviceInfo
		return ret
	}
	return *o.DeviceInfo
}

// GetDeviceInfoOk returns a tuple with the DeviceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PerProcessDetails) GetDeviceInfoOk() (*DeviceInfo, bool) {
	if o == nil || o.DeviceInfo == nil {
		return nil, false
	}
	return o.DeviceInfo, true
}

// HasDeviceInfo returns a boolean if a field has been set.
func (o *PerProcessDetails) HasDeviceInfo() bool {
	if o != nil && o.DeviceInfo != nil {
		return true
	}

	return false
}

// SetDeviceInfo gets a reference to the given DeviceInfo and assigns it to the DeviceInfo field.
func (o *PerProcessDetails) SetDeviceInfo(v DeviceInfo) {
	o.DeviceInfo = &v
}

// GetInstanceType returns the InstanceType field value if set, zero value otherwise.
func (o *PerProcessDetails) GetInstanceType() string {
	if o == nil || o.InstanceType == nil {
		var ret string
		return ret
	}
	return *o.InstanceType
}

// GetInstanceTypeOk returns a tuple with the InstanceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PerProcessDetails) GetInstanceTypeOk() (*string, bool) {
	if o == nil || o.InstanceType == nil {
		return nil, false
	}
	return o.InstanceType, true
}

// HasInstanceType returns a boolean if a field has been set.
func (o *PerProcessDetails) HasInstanceType() bool {
	if o != nil && o.InstanceType != nil {
		return true
	}

	return false
}

// SetInstanceType gets a reference to the given string and assigns it to the InstanceType field.
func (o *PerProcessDetails) SetInstanceType(v string) {
	o.InstanceType = &v
}

func (o PerProcessDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DeviceInfo != nil {
		toSerialize["deviceInfo"] = o.DeviceInfo
	}
	if o.InstanceType != nil {
		toSerialize["instanceType"] = o.InstanceType
	}
	return json.Marshal(toSerialize)
}

type NullablePerProcessDetails struct {
	value *PerProcessDetails
	isSet bool
}

func (v NullablePerProcessDetails) Get() *PerProcessDetails {
	return v.value
}

func (v *NullablePerProcessDetails) Set(val *PerProcessDetails) {
	v.value = val
	v.isSet = true
}

func (v NullablePerProcessDetails) IsSet() bool {
	return v.isSet
}

func (v *NullablePerProcessDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePerProcessDetails(val *PerProcessDetails) *NullablePerProcessDetails {
	return &NullablePerProcessDetails{value: val, isSet: true}
}

func (v NullablePerProcessDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePerProcessDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


