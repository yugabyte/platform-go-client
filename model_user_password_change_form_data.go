/*
 * YugabyteDB Anywhere APIs
 *
 * ALPHA - NOT FOR EXTERNAL USE
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ywclient

import (
	"encoding/json"
)

// UserPasswordChangeFormData User registration data. The API and UI use this to validate form data.
type UserPasswordChangeFormData struct {
	// Current Password
	CurrentPassword *string `json:"currentPassword,omitempty"`
	// New Password
	NewPassword *string `json:"newPassword,omitempty"`
}

// NewUserPasswordChangeFormData instantiates a new UserPasswordChangeFormData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPasswordChangeFormData() *UserPasswordChangeFormData {
	this := UserPasswordChangeFormData{}
	return &this
}

// NewUserPasswordChangeFormDataWithDefaults instantiates a new UserPasswordChangeFormData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPasswordChangeFormDataWithDefaults() *UserPasswordChangeFormData {
	this := UserPasswordChangeFormData{}
	return &this
}

// GetCurrentPassword returns the CurrentPassword field value if set, zero value otherwise.
func (o *UserPasswordChangeFormData) GetCurrentPassword() string {
	if o == nil || o.CurrentPassword == nil {
		var ret string
		return ret
	}
	return *o.CurrentPassword
}

// GetCurrentPasswordOk returns a tuple with the CurrentPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPasswordChangeFormData) GetCurrentPasswordOk() (*string, bool) {
	if o == nil || o.CurrentPassword == nil {
		return nil, false
	}
	return o.CurrentPassword, true
}

// HasCurrentPassword returns a boolean if a field has been set.
func (o *UserPasswordChangeFormData) HasCurrentPassword() bool {
	if o != nil && o.CurrentPassword != nil {
		return true
	}

	return false
}

// SetCurrentPassword gets a reference to the given string and assigns it to the CurrentPassword field.
func (o *UserPasswordChangeFormData) SetCurrentPassword(v string) {
	o.CurrentPassword = &v
}

// GetNewPassword returns the NewPassword field value if set, zero value otherwise.
func (o *UserPasswordChangeFormData) GetNewPassword() string {
	if o == nil || o.NewPassword == nil {
		var ret string
		return ret
	}
	return *o.NewPassword
}

// GetNewPasswordOk returns a tuple with the NewPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPasswordChangeFormData) GetNewPasswordOk() (*string, bool) {
	if o == nil || o.NewPassword == nil {
		return nil, false
	}
	return o.NewPassword, true
}

// HasNewPassword returns a boolean if a field has been set.
func (o *UserPasswordChangeFormData) HasNewPassword() bool {
	if o != nil && o.NewPassword != nil {
		return true
	}

	return false
}

// SetNewPassword gets a reference to the given string and assigns it to the NewPassword field.
func (o *UserPasswordChangeFormData) SetNewPassword(v string) {
	o.NewPassword = &v
}

func (o UserPasswordChangeFormData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CurrentPassword != nil {
		toSerialize["currentPassword"] = o.CurrentPassword
	}
	if o.NewPassword != nil {
		toSerialize["newPassword"] = o.NewPassword
	}
	return json.Marshal(toSerialize)
}

type NullableUserPasswordChangeFormData struct {
	value *UserPasswordChangeFormData
	isSet bool
}

func (v NullableUserPasswordChangeFormData) Get() *UserPasswordChangeFormData {
	return v.value
}

func (v *NullableUserPasswordChangeFormData) Set(val *UserPasswordChangeFormData) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPasswordChangeFormData) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPasswordChangeFormData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPasswordChangeFormData(val *UserPasswordChangeFormData) *NullableUserPasswordChangeFormData {
	return &NullableUserPasswordChangeFormData{value: val, isSet: true}
}

func (v NullableUserPasswordChangeFormData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPasswordChangeFormData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


