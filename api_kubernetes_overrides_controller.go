/*
 * YugabyteDB Anywhere APIs
 *
 * ALPHA - NOT FOR EXTERNAL USE
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ywclient

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// KubernetesOverridesControllerApiService KubernetesOverridesControllerApi service
type KubernetesOverridesControllerApiService service

type KubernetesOverridesControllerApiApiValidateKubernetesOverridesRequest struct {
	ctx _context.Context
	ApiService *KubernetesOverridesControllerApiService
	cUUID string
	universeConfigureTaskParams *UniverseConfigureTaskParams
}

func (r KubernetesOverridesControllerApiApiValidateKubernetesOverridesRequest) UniverseConfigureTaskParams(universeConfigureTaskParams UniverseConfigureTaskParams) KubernetesOverridesControllerApiApiValidateKubernetesOverridesRequest {
	r.universeConfigureTaskParams = &universeConfigureTaskParams
	return r
}

func (r KubernetesOverridesControllerApiApiValidateKubernetesOverridesRequest) Execute() (KubernetesOverridesResponse, *_nethttp.Response, error) {
	return r.ApiService.ValidateKubernetesOverridesExecute(r)
}

/*
 * ValidateKubernetesOverrides Validate kubernetes overrides.
 * Returns possible errors.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param cUUID
 * @return KubernetesOverridesControllerApiApiValidateKubernetesOverridesRequest
 */
func (a *KubernetesOverridesControllerApiService) ValidateKubernetesOverrides(ctx _context.Context, cUUID string) KubernetesOverridesControllerApiApiValidateKubernetesOverridesRequest {
	return KubernetesOverridesControllerApiApiValidateKubernetesOverridesRequest{
		ApiService: a,
		ctx: ctx,
		cUUID: cUUID,
	}
}

/*
 * Execute executes the request
 * @return KubernetesOverridesResponse
 */
func (a *KubernetesOverridesControllerApiService) ValidateKubernetesOverridesExecute(r KubernetesOverridesControllerApiApiValidateKubernetesOverridesRequest) (KubernetesOverridesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  KubernetesOverridesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KubernetesOverridesControllerApiService.ValidateKubernetesOverrides")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/customers/{cUUID}/validate_kubernetes_overrides"
	localVarPath = strings.Replace(localVarPath, "{"+"cUUID"+"}", _neturl.PathEscape(parameterToString(r.cUUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.universeConfigureTaskParams == nil {
		return localVarReturnValue, nil, reportError("universeConfigureTaskParams is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.universeConfigureTaskParams
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-AUTH-YW-API-TOKEN"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
