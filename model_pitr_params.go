/*
 * YugabyteDB Anywhere APIs
 *
 * ALPHA - NOT FOR EXTERNAL USE
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ywclient

import (
	"encoding/json"
)

// PitrParams PITR parameters
type PitrParams struct {
	// Retention period of a snapshot in seconds
	RetentionPeriodSec *int64 `json:"retentionPeriodSec,omitempty"`
	// <b style=\"color:#ff0000\">Deprecated since YBA version 2024.2.0.0.</b> Time interval between snapshots in seconds
	SnapshotIntervalSec *int64 `json:"snapshotIntervalSec,omitempty"`
}

// NewPitrParams instantiates a new PitrParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPitrParams() *PitrParams {
	this := PitrParams{}
	return &this
}

// NewPitrParamsWithDefaults instantiates a new PitrParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPitrParamsWithDefaults() *PitrParams {
	this := PitrParams{}
	return &this
}

// GetRetentionPeriodSec returns the RetentionPeriodSec field value if set, zero value otherwise.
func (o *PitrParams) GetRetentionPeriodSec() int64 {
	if o == nil || o.RetentionPeriodSec == nil {
		var ret int64
		return ret
	}
	return *o.RetentionPeriodSec
}

// GetRetentionPeriodSecOk returns a tuple with the RetentionPeriodSec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PitrParams) GetRetentionPeriodSecOk() (*int64, bool) {
	if o == nil || o.RetentionPeriodSec == nil {
		return nil, false
	}
	return o.RetentionPeriodSec, true
}

// HasRetentionPeriodSec returns a boolean if a field has been set.
func (o *PitrParams) HasRetentionPeriodSec() bool {
	if o != nil && o.RetentionPeriodSec != nil {
		return true
	}

	return false
}

// SetRetentionPeriodSec gets a reference to the given int64 and assigns it to the RetentionPeriodSec field.
func (o *PitrParams) SetRetentionPeriodSec(v int64) {
	o.RetentionPeriodSec = &v
}

// GetSnapshotIntervalSec returns the SnapshotIntervalSec field value if set, zero value otherwise.
func (o *PitrParams) GetSnapshotIntervalSec() int64 {
	if o == nil || o.SnapshotIntervalSec == nil {
		var ret int64
		return ret
	}
	return *o.SnapshotIntervalSec
}

// GetSnapshotIntervalSecOk returns a tuple with the SnapshotIntervalSec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PitrParams) GetSnapshotIntervalSecOk() (*int64, bool) {
	if o == nil || o.SnapshotIntervalSec == nil {
		return nil, false
	}
	return o.SnapshotIntervalSec, true
}

// HasSnapshotIntervalSec returns a boolean if a field has been set.
func (o *PitrParams) HasSnapshotIntervalSec() bool {
	if o != nil && o.SnapshotIntervalSec != nil {
		return true
	}

	return false
}

// SetSnapshotIntervalSec gets a reference to the given int64 and assigns it to the SnapshotIntervalSec field.
func (o *PitrParams) SetSnapshotIntervalSec(v int64) {
	o.SnapshotIntervalSec = &v
}

func (o PitrParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RetentionPeriodSec != nil {
		toSerialize["retentionPeriodSec"] = o.RetentionPeriodSec
	}
	if o.SnapshotIntervalSec != nil {
		toSerialize["snapshotIntervalSec"] = o.SnapshotIntervalSec
	}
	return json.Marshal(toSerialize)
}

type NullablePitrParams struct {
	value *PitrParams
	isSet bool
}

func (v NullablePitrParams) Get() *PitrParams {
	return v.value
}

func (v *NullablePitrParams) Set(val *PitrParams) {
	v.value = val
	v.isSet = true
}

func (v NullablePitrParams) IsSet() bool {
	return v.isSet
}

func (v *NullablePitrParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePitrParams(val *PitrParams) *NullablePitrParams {
	return &NullablePitrParams{value: val, isSet: true}
}

func (v NullablePitrParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePitrParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


