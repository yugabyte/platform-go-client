/*
 * YugabyteDB Anywhere APIs
 *
 * ALPHA - NOT FOR EXTERNAL USE
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ywclient

import (
	"encoding/json"
)

// AvailabilityZoneEditData Model used to edit an availability zone
type AvailabilityZoneEditData struct {
	// AZ secondary subnet
	SecondarySubnet *string `json:"secondarySubnet,omitempty"`
	// AZ subnet
	Subnet *string `json:"subnet,omitempty"`
}

// NewAvailabilityZoneEditData instantiates a new AvailabilityZoneEditData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAvailabilityZoneEditData() *AvailabilityZoneEditData {
	this := AvailabilityZoneEditData{}
	return &this
}

// NewAvailabilityZoneEditDataWithDefaults instantiates a new AvailabilityZoneEditData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAvailabilityZoneEditDataWithDefaults() *AvailabilityZoneEditData {
	this := AvailabilityZoneEditData{}
	return &this
}

// GetSecondarySubnet returns the SecondarySubnet field value if set, zero value otherwise.
func (o *AvailabilityZoneEditData) GetSecondarySubnet() string {
	if o == nil || o.SecondarySubnet == nil {
		var ret string
		return ret
	}
	return *o.SecondarySubnet
}

// GetSecondarySubnetOk returns a tuple with the SecondarySubnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailabilityZoneEditData) GetSecondarySubnetOk() (*string, bool) {
	if o == nil || o.SecondarySubnet == nil {
		return nil, false
	}
	return o.SecondarySubnet, true
}

// HasSecondarySubnet returns a boolean if a field has been set.
func (o *AvailabilityZoneEditData) HasSecondarySubnet() bool {
	if o != nil && o.SecondarySubnet != nil {
		return true
	}

	return false
}

// SetSecondarySubnet gets a reference to the given string and assigns it to the SecondarySubnet field.
func (o *AvailabilityZoneEditData) SetSecondarySubnet(v string) {
	o.SecondarySubnet = &v
}

// GetSubnet returns the Subnet field value if set, zero value otherwise.
func (o *AvailabilityZoneEditData) GetSubnet() string {
	if o == nil || o.Subnet == nil {
		var ret string
		return ret
	}
	return *o.Subnet
}

// GetSubnetOk returns a tuple with the Subnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailabilityZoneEditData) GetSubnetOk() (*string, bool) {
	if o == nil || o.Subnet == nil {
		return nil, false
	}
	return o.Subnet, true
}

// HasSubnet returns a boolean if a field has been set.
func (o *AvailabilityZoneEditData) HasSubnet() bool {
	if o != nil && o.Subnet != nil {
		return true
	}

	return false
}

// SetSubnet gets a reference to the given string and assigns it to the Subnet field.
func (o *AvailabilityZoneEditData) SetSubnet(v string) {
	o.Subnet = &v
}

func (o AvailabilityZoneEditData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SecondarySubnet != nil {
		toSerialize["secondarySubnet"] = o.SecondarySubnet
	}
	if o.Subnet != nil {
		toSerialize["subnet"] = o.Subnet
	}
	return json.Marshal(toSerialize)
}

type NullableAvailabilityZoneEditData struct {
	value *AvailabilityZoneEditData
	isSet bool
}

func (v NullableAvailabilityZoneEditData) Get() *AvailabilityZoneEditData {
	return v.value
}

func (v *NullableAvailabilityZoneEditData) Set(val *AvailabilityZoneEditData) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailabilityZoneEditData) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailabilityZoneEditData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailabilityZoneEditData(val *AvailabilityZoneEditData) *NullableAvailabilityZoneEditData {
	return &NullableAvailabilityZoneEditData{value: val, isSet: true}
}

func (v NullableAvailabilityZoneEditData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailabilityZoneEditData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


