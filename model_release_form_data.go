/*
 * Yugabyte Platform APIs
 *
 * ALPHA - NOT FOR EXTERNAL USE
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package yb_platform_client

import (
	"encoding/json"
)

// ReleaseFormData Specification for release locations
type ReleaseFormData struct {
	Gcs GCSLocation `json:"gcs"`
	Http HttpLocation `json:"http"`
	S3 S3Location `json:"s3"`
	Version string `json:"version"`
}

// NewReleaseFormData instantiates a new ReleaseFormData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReleaseFormData(gcs GCSLocation, http HttpLocation, s3 S3Location, version string, ) *ReleaseFormData {
	this := ReleaseFormData{}
	this.Gcs = gcs
	this.Http = http
	this.S3 = s3
	this.Version = version
	return &this
}

// NewReleaseFormDataWithDefaults instantiates a new ReleaseFormData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReleaseFormDataWithDefaults() *ReleaseFormData {
	this := ReleaseFormData{}
	return &this
}

// GetGcs returns the Gcs field value
func (o *ReleaseFormData) GetGcs() GCSLocation {
	if o == nil  {
		var ret GCSLocation
		return ret
	}

	return o.Gcs
}

// GetGcsOk returns a tuple with the Gcs field value
// and a boolean to check if the value has been set.
func (o *ReleaseFormData) GetGcsOk() (*GCSLocation, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Gcs, true
}

// SetGcs sets field value
func (o *ReleaseFormData) SetGcs(v GCSLocation) {
	o.Gcs = v
}

// GetHttp returns the Http field value
func (o *ReleaseFormData) GetHttp() HttpLocation {
	if o == nil  {
		var ret HttpLocation
		return ret
	}

	return o.Http
}

// GetHttpOk returns a tuple with the Http field value
// and a boolean to check if the value has been set.
func (o *ReleaseFormData) GetHttpOk() (*HttpLocation, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Http, true
}

// SetHttp sets field value
func (o *ReleaseFormData) SetHttp(v HttpLocation) {
	o.Http = v
}

// GetS3 returns the S3 field value
func (o *ReleaseFormData) GetS3() S3Location {
	if o == nil  {
		var ret S3Location
		return ret
	}

	return o.S3
}

// GetS3Ok returns a tuple with the S3 field value
// and a boolean to check if the value has been set.
func (o *ReleaseFormData) GetS3Ok() (*S3Location, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.S3, true
}

// SetS3 sets field value
func (o *ReleaseFormData) SetS3(v S3Location) {
	o.S3 = v
}

// GetVersion returns the Version field value
func (o *ReleaseFormData) GetVersion() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *ReleaseFormData) GetVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *ReleaseFormData) SetVersion(v string) {
	o.Version = v
}

func (o ReleaseFormData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["gcs"] = o.Gcs
	}
	if true {
		toSerialize["http"] = o.Http
	}
	if true {
		toSerialize["s3"] = o.S3
	}
	if true {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableReleaseFormData struct {
	value *ReleaseFormData
	isSet bool
}

func (v NullableReleaseFormData) Get() *ReleaseFormData {
	return v.value
}

func (v *NullableReleaseFormData) Set(val *ReleaseFormData) {
	v.value = val
	v.isSet = true
}

func (v NullableReleaseFormData) IsSet() bool {
	return v.isSet
}

func (v *NullableReleaseFormData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReleaseFormData(val *ReleaseFormData) *NullableReleaseFormData {
	return &NullableReleaseFormData{value: val, isSet: true}
}

func (v NullableReleaseFormData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReleaseFormData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


