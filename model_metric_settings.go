/*
 * YugabyteDB Anywhere APIs
 *
 * ALPHA - NOT FOR EXTERNAL USE
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ywclient

import (
	"encoding/json"
)

// MetricSettings Settings, selected for particular metric
type MetricSettings struct {
	// YbaApi Internal. Defines the method of metrics aggregation used to obtain additional aggregate time series. The provided aggregator wraps over the final query. Only applicable if `returnAggregatedValue = true`.
	AggregatedValueFunction *string `json:"aggregatedValueFunction,omitempty"`
	// YbaApi Internal. Metric name
	Metric string `json:"metric"`
	// YbaApi Internal. Top level aggregation for each metric line.
	NodeAggregation *string `json:"nodeAggregation,omitempty"`
	// YbaApi Internal. Defines if we return additional aggregate time series (ex. avg, min) when we are selecting a subset of time series to return (ex. top K, bottom k).
	ReturnAggregatedValue *bool `json:"returnAggregatedValue,omitempty"`
	// YbaApi Internal. Defines how many node lines we return in case we split by nodes/tables/etc.
	SplitCount *int32 `json:"splitCount,omitempty"`
	// YbaApi Internal. Controls if we split nodes, tables, etc. into own lines OR aggregate  and how we select lines in case of split query
	SplitMode *string `json:"splitMode,omitempty"`
	// YbaApi Internal. Defines set of labels, which we use for a split query
	SplitType *string `json:"splitType,omitempty"`
	// YbaApi Internal. Way of metrics aggregation over time
	TimeAggregation *string `json:"timeAggregation,omitempty"`
}

// NewMetricSettings instantiates a new MetricSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricSettings(metric string) *MetricSettings {
	this := MetricSettings{}
	this.Metric = metric
	return &this
}

// NewMetricSettingsWithDefaults instantiates a new MetricSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricSettingsWithDefaults() *MetricSettings {
	this := MetricSettings{}
	return &this
}

// GetAggregatedValueFunction returns the AggregatedValueFunction field value if set, zero value otherwise.
func (o *MetricSettings) GetAggregatedValueFunction() string {
	if o == nil || o.AggregatedValueFunction == nil {
		var ret string
		return ret
	}
	return *o.AggregatedValueFunction
}

// GetAggregatedValueFunctionOk returns a tuple with the AggregatedValueFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricSettings) GetAggregatedValueFunctionOk() (*string, bool) {
	if o == nil || o.AggregatedValueFunction == nil {
		return nil, false
	}
	return o.AggregatedValueFunction, true
}

// HasAggregatedValueFunction returns a boolean if a field has been set.
func (o *MetricSettings) HasAggregatedValueFunction() bool {
	if o != nil && o.AggregatedValueFunction != nil {
		return true
	}

	return false
}

// SetAggregatedValueFunction gets a reference to the given string and assigns it to the AggregatedValueFunction field.
func (o *MetricSettings) SetAggregatedValueFunction(v string) {
	o.AggregatedValueFunction = &v
}

// GetMetric returns the Metric field value
func (o *MetricSettings) GetMetric() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Metric
}

// GetMetricOk returns a tuple with the Metric field value
// and a boolean to check if the value has been set.
func (o *MetricSettings) GetMetricOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Metric, true
}

// SetMetric sets field value
func (o *MetricSettings) SetMetric(v string) {
	o.Metric = v
}

// GetNodeAggregation returns the NodeAggregation field value if set, zero value otherwise.
func (o *MetricSettings) GetNodeAggregation() string {
	if o == nil || o.NodeAggregation == nil {
		var ret string
		return ret
	}
	return *o.NodeAggregation
}

// GetNodeAggregationOk returns a tuple with the NodeAggregation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricSettings) GetNodeAggregationOk() (*string, bool) {
	if o == nil || o.NodeAggregation == nil {
		return nil, false
	}
	return o.NodeAggregation, true
}

// HasNodeAggregation returns a boolean if a field has been set.
func (o *MetricSettings) HasNodeAggregation() bool {
	if o != nil && o.NodeAggregation != nil {
		return true
	}

	return false
}

// SetNodeAggregation gets a reference to the given string and assigns it to the NodeAggregation field.
func (o *MetricSettings) SetNodeAggregation(v string) {
	o.NodeAggregation = &v
}

// GetReturnAggregatedValue returns the ReturnAggregatedValue field value if set, zero value otherwise.
func (o *MetricSettings) GetReturnAggregatedValue() bool {
	if o == nil || o.ReturnAggregatedValue == nil {
		var ret bool
		return ret
	}
	return *o.ReturnAggregatedValue
}

// GetReturnAggregatedValueOk returns a tuple with the ReturnAggregatedValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricSettings) GetReturnAggregatedValueOk() (*bool, bool) {
	if o == nil || o.ReturnAggregatedValue == nil {
		return nil, false
	}
	return o.ReturnAggregatedValue, true
}

// HasReturnAggregatedValue returns a boolean if a field has been set.
func (o *MetricSettings) HasReturnAggregatedValue() bool {
	if o != nil && o.ReturnAggregatedValue != nil {
		return true
	}

	return false
}

// SetReturnAggregatedValue gets a reference to the given bool and assigns it to the ReturnAggregatedValue field.
func (o *MetricSettings) SetReturnAggregatedValue(v bool) {
	o.ReturnAggregatedValue = &v
}

// GetSplitCount returns the SplitCount field value if set, zero value otherwise.
func (o *MetricSettings) GetSplitCount() int32 {
	if o == nil || o.SplitCount == nil {
		var ret int32
		return ret
	}
	return *o.SplitCount
}

// GetSplitCountOk returns a tuple with the SplitCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricSettings) GetSplitCountOk() (*int32, bool) {
	if o == nil || o.SplitCount == nil {
		return nil, false
	}
	return o.SplitCount, true
}

// HasSplitCount returns a boolean if a field has been set.
func (o *MetricSettings) HasSplitCount() bool {
	if o != nil && o.SplitCount != nil {
		return true
	}

	return false
}

// SetSplitCount gets a reference to the given int32 and assigns it to the SplitCount field.
func (o *MetricSettings) SetSplitCount(v int32) {
	o.SplitCount = &v
}

// GetSplitMode returns the SplitMode field value if set, zero value otherwise.
func (o *MetricSettings) GetSplitMode() string {
	if o == nil || o.SplitMode == nil {
		var ret string
		return ret
	}
	return *o.SplitMode
}

// GetSplitModeOk returns a tuple with the SplitMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricSettings) GetSplitModeOk() (*string, bool) {
	if o == nil || o.SplitMode == nil {
		return nil, false
	}
	return o.SplitMode, true
}

// HasSplitMode returns a boolean if a field has been set.
func (o *MetricSettings) HasSplitMode() bool {
	if o != nil && o.SplitMode != nil {
		return true
	}

	return false
}

// SetSplitMode gets a reference to the given string and assigns it to the SplitMode field.
func (o *MetricSettings) SetSplitMode(v string) {
	o.SplitMode = &v
}

// GetSplitType returns the SplitType field value if set, zero value otherwise.
func (o *MetricSettings) GetSplitType() string {
	if o == nil || o.SplitType == nil {
		var ret string
		return ret
	}
	return *o.SplitType
}

// GetSplitTypeOk returns a tuple with the SplitType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricSettings) GetSplitTypeOk() (*string, bool) {
	if o == nil || o.SplitType == nil {
		return nil, false
	}
	return o.SplitType, true
}

// HasSplitType returns a boolean if a field has been set.
func (o *MetricSettings) HasSplitType() bool {
	if o != nil && o.SplitType != nil {
		return true
	}

	return false
}

// SetSplitType gets a reference to the given string and assigns it to the SplitType field.
func (o *MetricSettings) SetSplitType(v string) {
	o.SplitType = &v
}

// GetTimeAggregation returns the TimeAggregation field value if set, zero value otherwise.
func (o *MetricSettings) GetTimeAggregation() string {
	if o == nil || o.TimeAggregation == nil {
		var ret string
		return ret
	}
	return *o.TimeAggregation
}

// GetTimeAggregationOk returns a tuple with the TimeAggregation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricSettings) GetTimeAggregationOk() (*string, bool) {
	if o == nil || o.TimeAggregation == nil {
		return nil, false
	}
	return o.TimeAggregation, true
}

// HasTimeAggregation returns a boolean if a field has been set.
func (o *MetricSettings) HasTimeAggregation() bool {
	if o != nil && o.TimeAggregation != nil {
		return true
	}

	return false
}

// SetTimeAggregation gets a reference to the given string and assigns it to the TimeAggregation field.
func (o *MetricSettings) SetTimeAggregation(v string) {
	o.TimeAggregation = &v
}

func (o MetricSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AggregatedValueFunction != nil {
		toSerialize["aggregatedValueFunction"] = o.AggregatedValueFunction
	}
	if true {
		toSerialize["metric"] = o.Metric
	}
	if o.NodeAggregation != nil {
		toSerialize["nodeAggregation"] = o.NodeAggregation
	}
	if o.ReturnAggregatedValue != nil {
		toSerialize["returnAggregatedValue"] = o.ReturnAggregatedValue
	}
	if o.SplitCount != nil {
		toSerialize["splitCount"] = o.SplitCount
	}
	if o.SplitMode != nil {
		toSerialize["splitMode"] = o.SplitMode
	}
	if o.SplitType != nil {
		toSerialize["splitType"] = o.SplitType
	}
	if o.TimeAggregation != nil {
		toSerialize["timeAggregation"] = o.TimeAggregation
	}
	return json.Marshal(toSerialize)
}

type NullableMetricSettings struct {
	value *MetricSettings
	isSet bool
}

func (v NullableMetricSettings) Get() *MetricSettings {
	return v.value
}

func (v *NullableMetricSettings) Set(val *MetricSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricSettings(val *MetricSettings) *NullableMetricSettings {
	return &NullableMetricSettings{value: val, isSet: true}
}

func (v NullableMetricSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


