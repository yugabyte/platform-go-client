/*
 * YugabyteDB Anywhere APIs
 *
 * ALPHA - NOT FOR EXTERNAL USE
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ywclient

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// AsynchronousReplicationApiService AsynchronousReplicationApi service
type AsynchronousReplicationApiService service

type AsynchronousReplicationApiApiCreateXClusterConfigRequest struct {
	ctx _context.Context
	ApiService *AsynchronousReplicationApiService
	cUUID string
	xclusterReplicationCreateFormData *XClusterConfigCreateFormData
	request *interface{}
}

func (r AsynchronousReplicationApiApiCreateXClusterConfigRequest) XclusterReplicationCreateFormData(xclusterReplicationCreateFormData XClusterConfigCreateFormData) AsynchronousReplicationApiApiCreateXClusterConfigRequest {
	r.xclusterReplicationCreateFormData = &xclusterReplicationCreateFormData
	return r
}
func (r AsynchronousReplicationApiApiCreateXClusterConfigRequest) Request(request interface{}) AsynchronousReplicationApiApiCreateXClusterConfigRequest {
	r.request = &request
	return r
}

func (r AsynchronousReplicationApiApiCreateXClusterConfigRequest) Execute() (YBPTask, *_nethttp.Response, error) {
	return r.ApiService.CreateXClusterConfigExecute(r)
}

/*
 * CreateXClusterConfig Create xcluster config
 * Available since YBA version 2.16.0.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param cUUID
 * @return AsynchronousReplicationApiApiCreateXClusterConfigRequest
 */
func (a *AsynchronousReplicationApiService) CreateXClusterConfig(ctx _context.Context, cUUID string) AsynchronousReplicationApiApiCreateXClusterConfigRequest {
	return AsynchronousReplicationApiApiCreateXClusterConfigRequest{
		ApiService: a,
		ctx: ctx,
		cUUID: cUUID,
	}
}

/*
 * Execute executes the request
 * @return YBPTask
 */
func (a *AsynchronousReplicationApiService) CreateXClusterConfigExecute(r AsynchronousReplicationApiApiCreateXClusterConfigRequest) (YBPTask, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  YBPTask
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AsynchronousReplicationApiService.CreateXClusterConfig")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/customers/{cUUID}/xcluster_configs"
	localVarPath = strings.Replace(localVarPath, "{"+"cUUID"+"}", _neturl.PathEscape(parameterToString(r.cUUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xclusterReplicationCreateFormData == nil {
		return localVarReturnValue, nil, reportError("xclusterReplicationCreateFormData is required and must be specified")
	}

	if r.request != nil {
		localVarQueryParams.Add("request", parameterToString(*r.request, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.xclusterReplicationCreateFormData
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-AUTH-YW-API-TOKEN"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AsynchronousReplicationApiApiDeleteXClusterConfigRequest struct {
	ctx _context.Context
	ApiService *AsynchronousReplicationApiService
	cUUID string
	xccUUID string
	isForceDelete *bool
	request *interface{}
}

func (r AsynchronousReplicationApiApiDeleteXClusterConfigRequest) IsForceDelete(isForceDelete bool) AsynchronousReplicationApiApiDeleteXClusterConfigRequest {
	r.isForceDelete = &isForceDelete
	return r
}
func (r AsynchronousReplicationApiApiDeleteXClusterConfigRequest) Request(request interface{}) AsynchronousReplicationApiApiDeleteXClusterConfigRequest {
	r.request = &request
	return r
}

func (r AsynchronousReplicationApiApiDeleteXClusterConfigRequest) Execute() (YBPTask, *_nethttp.Response, error) {
	return r.ApiService.DeleteXClusterConfigExecute(r)
}

/*
 * DeleteXClusterConfig Delete xcluster config
 * Available since YBA version 2.16.0.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param cUUID
 * @param xccUUID
 * @return AsynchronousReplicationApiApiDeleteXClusterConfigRequest
 */
func (a *AsynchronousReplicationApiService) DeleteXClusterConfig(ctx _context.Context, cUUID string, xccUUID string) AsynchronousReplicationApiApiDeleteXClusterConfigRequest {
	return AsynchronousReplicationApiApiDeleteXClusterConfigRequest{
		ApiService: a,
		ctx: ctx,
		cUUID: cUUID,
		xccUUID: xccUUID,
	}
}

/*
 * Execute executes the request
 * @return YBPTask
 */
func (a *AsynchronousReplicationApiService) DeleteXClusterConfigExecute(r AsynchronousReplicationApiApiDeleteXClusterConfigRequest) (YBPTask, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  YBPTask
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AsynchronousReplicationApiService.DeleteXClusterConfig")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/customers/{cUUID}/xcluster_configs/{xccUUID}"
	localVarPath = strings.Replace(localVarPath, "{"+"cUUID"+"}", _neturl.PathEscape(parameterToString(r.cUUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"xccUUID"+"}", _neturl.PathEscape(parameterToString(r.xccUUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.isForceDelete != nil {
		localVarQueryParams.Add("isForceDelete", parameterToString(*r.isForceDelete, ""))
	}
	if r.request != nil {
		localVarQueryParams.Add("request", parameterToString(*r.request, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-AUTH-YW-API-TOKEN"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AsynchronousReplicationApiApiEditXClusterConfigRequest struct {
	ctx _context.Context
	ApiService *AsynchronousReplicationApiService
	cUUID string
	xccUUID string
	xclusterReplicationEditFormData *XClusterConfigEditFormData
	request *interface{}
}

func (r AsynchronousReplicationApiApiEditXClusterConfigRequest) XclusterReplicationEditFormData(xclusterReplicationEditFormData XClusterConfigEditFormData) AsynchronousReplicationApiApiEditXClusterConfigRequest {
	r.xclusterReplicationEditFormData = &xclusterReplicationEditFormData
	return r
}
func (r AsynchronousReplicationApiApiEditXClusterConfigRequest) Request(request interface{}) AsynchronousReplicationApiApiEditXClusterConfigRequest {
	r.request = &request
	return r
}

func (r AsynchronousReplicationApiApiEditXClusterConfigRequest) Execute() (YBPTask, *_nethttp.Response, error) {
	return r.ApiService.EditXClusterConfigExecute(r)
}

/*
 * EditXClusterConfig Edit xcluster config
 * Available since YBA version 2.16.0.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param cUUID
 * @param xccUUID
 * @return AsynchronousReplicationApiApiEditXClusterConfigRequest
 */
func (a *AsynchronousReplicationApiService) EditXClusterConfig(ctx _context.Context, cUUID string, xccUUID string) AsynchronousReplicationApiApiEditXClusterConfigRequest {
	return AsynchronousReplicationApiApiEditXClusterConfigRequest{
		ApiService: a,
		ctx: ctx,
		cUUID: cUUID,
		xccUUID: xccUUID,
	}
}

/*
 * Execute executes the request
 * @return YBPTask
 */
func (a *AsynchronousReplicationApiService) EditXClusterConfigExecute(r AsynchronousReplicationApiApiEditXClusterConfigRequest) (YBPTask, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  YBPTask
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AsynchronousReplicationApiService.EditXClusterConfig")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/customers/{cUUID}/xcluster_configs/{xccUUID}"
	localVarPath = strings.Replace(localVarPath, "{"+"cUUID"+"}", _neturl.PathEscape(parameterToString(r.cUUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"xccUUID"+"}", _neturl.PathEscape(parameterToString(r.xccUUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xclusterReplicationEditFormData == nil {
		return localVarReturnValue, nil, reportError("xclusterReplicationEditFormData is required and must be specified")
	}

	if r.request != nil {
		localVarQueryParams.Add("request", parameterToString(*r.request, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.xclusterReplicationEditFormData
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-AUTH-YW-API-TOKEN"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AsynchronousReplicationApiApiGetXClusterConfigRequest struct {
	ctx _context.Context
	ApiService *AsynchronousReplicationApiService
	cUUID string
	xccUUID string
	syncWithDB *bool
}

func (r AsynchronousReplicationApiApiGetXClusterConfigRequest) SyncWithDB(syncWithDB bool) AsynchronousReplicationApiApiGetXClusterConfigRequest {
	r.syncWithDB = &syncWithDB
	return r
}

func (r AsynchronousReplicationApiApiGetXClusterConfigRequest) Execute() (XClusterConfigGetResp, *_nethttp.Response, error) {
	return r.ApiService.GetXClusterConfigExecute(r)
}

/*
 * GetXClusterConfig Get xcluster config
 * Available since YBA version 2.16.0.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param cUUID
 * @param xccUUID
 * @return AsynchronousReplicationApiApiGetXClusterConfigRequest
 */
func (a *AsynchronousReplicationApiService) GetXClusterConfig(ctx _context.Context, cUUID string, xccUUID string) AsynchronousReplicationApiApiGetXClusterConfigRequest {
	return AsynchronousReplicationApiApiGetXClusterConfigRequest{
		ApiService: a,
		ctx: ctx,
		cUUID: cUUID,
		xccUUID: xccUUID,
	}
}

/*
 * Execute executes the request
 * @return XClusterConfigGetResp
 */
func (a *AsynchronousReplicationApiService) GetXClusterConfigExecute(r AsynchronousReplicationApiApiGetXClusterConfigRequest) (XClusterConfigGetResp, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  XClusterConfigGetResp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AsynchronousReplicationApiService.GetXClusterConfig")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/customers/{cUUID}/xcluster_configs/{xccUUID}"
	localVarPath = strings.Replace(localVarPath, "{"+"cUUID"+"}", _neturl.PathEscape(parameterToString(r.cUUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"xccUUID"+"}", _neturl.PathEscape(parameterToString(r.xccUUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.syncWithDB != nil {
		localVarQueryParams.Add("syncWithDB", parameterToString(*r.syncWithDB, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-AUTH-YW-API-TOKEN"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AsynchronousReplicationApiApiNeedBootstrapTableRequest struct {
	ctx _context.Context
	ApiService *AsynchronousReplicationApiService
	cUUID string
	uniUUID string
	xclusterNeedBootstrapFormData *XClusterConfigNeedBootstrapFormData
	configType *string
	includeDetails *bool
	request *interface{}
}

func (r AsynchronousReplicationApiApiNeedBootstrapTableRequest) XclusterNeedBootstrapFormData(xclusterNeedBootstrapFormData XClusterConfigNeedBootstrapFormData) AsynchronousReplicationApiApiNeedBootstrapTableRequest {
	r.xclusterNeedBootstrapFormData = &xclusterNeedBootstrapFormData
	return r
}
func (r AsynchronousReplicationApiApiNeedBootstrapTableRequest) ConfigType(configType string) AsynchronousReplicationApiApiNeedBootstrapTableRequest {
	r.configType = &configType
	return r
}
func (r AsynchronousReplicationApiApiNeedBootstrapTableRequest) IncludeDetails(includeDetails bool) AsynchronousReplicationApiApiNeedBootstrapTableRequest {
	r.includeDetails = &includeDetails
	return r
}
func (r AsynchronousReplicationApiApiNeedBootstrapTableRequest) Request(request interface{}) AsynchronousReplicationApiApiNeedBootstrapTableRequest {
	r.request = &request
	return r
}

func (r AsynchronousReplicationApiApiNeedBootstrapTableRequest) Execute() (map[string]map[string]interface{}, *_nethttp.Response, error) {
	return r.ApiService.NeedBootstrapTableExecute(r)
}

/*
 * NeedBootstrapTable Whether tables need bootstrap before setting up cross cluster replication
 * WARNING: This is a preview API that could change.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param cUUID
 * @param uniUUID
 * @return AsynchronousReplicationApiApiNeedBootstrapTableRequest
 */
func (a *AsynchronousReplicationApiService) NeedBootstrapTable(ctx _context.Context, cUUID string, uniUUID string) AsynchronousReplicationApiApiNeedBootstrapTableRequest {
	return AsynchronousReplicationApiApiNeedBootstrapTableRequest{
		ApiService: a,
		ctx: ctx,
		cUUID: cUUID,
		uniUUID: uniUUID,
	}
}

/*
 * Execute executes the request
 * @return map[string]map[string]interface{}
 */
func (a *AsynchronousReplicationApiService) NeedBootstrapTableExecute(r AsynchronousReplicationApiApiNeedBootstrapTableRequest) (map[string]map[string]interface{}, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AsynchronousReplicationApiService.NeedBootstrapTable")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/customers/{cUUID}/universes/{uniUUID}/need_bootstrap"
	localVarPath = strings.Replace(localVarPath, "{"+"cUUID"+"}", _neturl.PathEscape(parameterToString(r.cUUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"uniUUID"+"}", _neturl.PathEscape(parameterToString(r.uniUUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xclusterNeedBootstrapFormData == nil {
		return localVarReturnValue, nil, reportError("xclusterNeedBootstrapFormData is required and must be specified")
	}

	if r.configType != nil {
		localVarQueryParams.Add("configType", parameterToString(*r.configType, ""))
	}
	if r.includeDetails != nil {
		localVarQueryParams.Add("includeDetails", parameterToString(*r.includeDetails, ""))
	}
	if r.request != nil {
		localVarQueryParams.Add("request", parameterToString(*r.request, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.xclusterNeedBootstrapFormData
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-AUTH-YW-API-TOKEN"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AsynchronousReplicationApiApiNeedBootstrapXClusterConfigRequest struct {
	ctx _context.Context
	ApiService *AsynchronousReplicationApiService
	cUUID string
	xccUUID string
	xclusterNeedBootstrapFormData *XClusterConfigNeedBootstrapFormData
	request *interface{}
}

func (r AsynchronousReplicationApiApiNeedBootstrapXClusterConfigRequest) XclusterNeedBootstrapFormData(xclusterNeedBootstrapFormData XClusterConfigNeedBootstrapFormData) AsynchronousReplicationApiApiNeedBootstrapXClusterConfigRequest {
	r.xclusterNeedBootstrapFormData = &xclusterNeedBootstrapFormData
	return r
}
func (r AsynchronousReplicationApiApiNeedBootstrapXClusterConfigRequest) Request(request interface{}) AsynchronousReplicationApiApiNeedBootstrapXClusterConfigRequest {
	r.request = &request
	return r
}

func (r AsynchronousReplicationApiApiNeedBootstrapXClusterConfigRequest) Execute() (map[string]map[string]interface{}, *_nethttp.Response, error) {
	return r.ApiService.NeedBootstrapXClusterConfigExecute(r)
}

/*
 * NeedBootstrapXClusterConfig Whether tables in an xCluster replication config have fallen far behind and need bootstrap
 * YbaApi Internal.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param cUUID
 * @param xccUUID
 * @return AsynchronousReplicationApiApiNeedBootstrapXClusterConfigRequest
 */
func (a *AsynchronousReplicationApiService) NeedBootstrapXClusterConfig(ctx _context.Context, cUUID string, xccUUID string) AsynchronousReplicationApiApiNeedBootstrapXClusterConfigRequest {
	return AsynchronousReplicationApiApiNeedBootstrapXClusterConfigRequest{
		ApiService: a,
		ctx: ctx,
		cUUID: cUUID,
		xccUUID: xccUUID,
	}
}

/*
 * Execute executes the request
 * @return map[string]map[string]interface{}
 */
func (a *AsynchronousReplicationApiService) NeedBootstrapXClusterConfigExecute(r AsynchronousReplicationApiApiNeedBootstrapXClusterConfigRequest) (map[string]map[string]interface{}, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AsynchronousReplicationApiService.NeedBootstrapXClusterConfig")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/customers/{cUUID}/xcluster_configs/{xccUUID}/need_bootstrap"
	localVarPath = strings.Replace(localVarPath, "{"+"cUUID"+"}", _neturl.PathEscape(parameterToString(r.cUUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"xccUUID"+"}", _neturl.PathEscape(parameterToString(r.xccUUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xclusterNeedBootstrapFormData == nil {
		return localVarReturnValue, nil, reportError("xclusterNeedBootstrapFormData is required and must be specified")
	}

	if r.request != nil {
		localVarQueryParams.Add("request", parameterToString(*r.request, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.xclusterNeedBootstrapFormData
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-AUTH-YW-API-TOKEN"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AsynchronousReplicationApiApiRestartXClusterConfigRequest struct {
	ctx _context.Context
	ApiService *AsynchronousReplicationApiService
	cUUID string
	xccUUID string
	xclusterReplicationRestartFormData *XClusterConfigRestartFormData
	isForceDelete *bool
	request *interface{}
}

func (r AsynchronousReplicationApiApiRestartXClusterConfigRequest) XclusterReplicationRestartFormData(xclusterReplicationRestartFormData XClusterConfigRestartFormData) AsynchronousReplicationApiApiRestartXClusterConfigRequest {
	r.xclusterReplicationRestartFormData = &xclusterReplicationRestartFormData
	return r
}
func (r AsynchronousReplicationApiApiRestartXClusterConfigRequest) IsForceDelete(isForceDelete bool) AsynchronousReplicationApiApiRestartXClusterConfigRequest {
	r.isForceDelete = &isForceDelete
	return r
}
func (r AsynchronousReplicationApiApiRestartXClusterConfigRequest) Request(request interface{}) AsynchronousReplicationApiApiRestartXClusterConfigRequest {
	r.request = &request
	return r
}

func (r AsynchronousReplicationApiApiRestartXClusterConfigRequest) Execute() (YBPTask, *_nethttp.Response, error) {
	return r.ApiService.RestartXClusterConfigExecute(r)
}

/*
 * RestartXClusterConfig Restart xcluster config
 * Available since YBA version 2.16.0.0.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param cUUID
 * @param xccUUID
 * @return AsynchronousReplicationApiApiRestartXClusterConfigRequest
 */
func (a *AsynchronousReplicationApiService) RestartXClusterConfig(ctx _context.Context, cUUID string, xccUUID string) AsynchronousReplicationApiApiRestartXClusterConfigRequest {
	return AsynchronousReplicationApiApiRestartXClusterConfigRequest{
		ApiService: a,
		ctx: ctx,
		cUUID: cUUID,
		xccUUID: xccUUID,
	}
}

/*
 * Execute executes the request
 * @return YBPTask
 */
func (a *AsynchronousReplicationApiService) RestartXClusterConfigExecute(r AsynchronousReplicationApiApiRestartXClusterConfigRequest) (YBPTask, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  YBPTask
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AsynchronousReplicationApiService.RestartXClusterConfig")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/customers/{cUUID}/xcluster_configs/{xccUUID}"
	localVarPath = strings.Replace(localVarPath, "{"+"cUUID"+"}", _neturl.PathEscape(parameterToString(r.cUUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"xccUUID"+"}", _neturl.PathEscape(parameterToString(r.xccUUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xclusterReplicationRestartFormData == nil {
		return localVarReturnValue, nil, reportError("xclusterReplicationRestartFormData is required and must be specified")
	}

	if r.isForceDelete != nil {
		localVarQueryParams.Add("isForceDelete", parameterToString(*r.isForceDelete, ""))
	}
	if r.request != nil {
		localVarQueryParams.Add("request", parameterToString(*r.request, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.xclusterReplicationRestartFormData
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-AUTH-YW-API-TOKEN"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AsynchronousReplicationApiApiSyncXClusterConfigRequest struct {
	ctx _context.Context
	ApiService *AsynchronousReplicationApiService
	cUUID string
	targetUniverseUUID *string
	request *interface{}
}

func (r AsynchronousReplicationApiApiSyncXClusterConfigRequest) TargetUniverseUUID(targetUniverseUUID string) AsynchronousReplicationApiApiSyncXClusterConfigRequest {
	r.targetUniverseUUID = &targetUniverseUUID
	return r
}
func (r AsynchronousReplicationApiApiSyncXClusterConfigRequest) Request(request interface{}) AsynchronousReplicationApiApiSyncXClusterConfigRequest {
	r.request = &request
	return r
}

func (r AsynchronousReplicationApiApiSyncXClusterConfigRequest) Execute() (YBPTask, *_nethttp.Response, error) {
	return r.ApiService.SyncXClusterConfigExecute(r)
}

/*
 * SyncXClusterConfig Sync xcluster config - deprecated
 * <b style="color:#ff0000">Deprecated since YBA version 2.23.0.0.</b></p> Sync xcluster config (V2) instead.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param cUUID
 * @return AsynchronousReplicationApiApiSyncXClusterConfigRequest
 */
func (a *AsynchronousReplicationApiService) SyncXClusterConfig(ctx _context.Context, cUUID string) AsynchronousReplicationApiApiSyncXClusterConfigRequest {
	return AsynchronousReplicationApiApiSyncXClusterConfigRequest{
		ApiService: a,
		ctx: ctx,
		cUUID: cUUID,
	}
}

/*
 * Execute executes the request
 * @return YBPTask
 */
func (a *AsynchronousReplicationApiService) SyncXClusterConfigExecute(r AsynchronousReplicationApiApiSyncXClusterConfigRequest) (YBPTask, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  YBPTask
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AsynchronousReplicationApiService.SyncXClusterConfig")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/customers/{cUUID}/xcluster_configs/sync"
	localVarPath = strings.Replace(localVarPath, "{"+"cUUID"+"}", _neturl.PathEscape(parameterToString(r.cUUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.targetUniverseUUID != nil {
		localVarQueryParams.Add("targetUniverseUUID", parameterToString(*r.targetUniverseUUID, ""))
	}
	if r.request != nil {
		localVarQueryParams.Add("request", parameterToString(*r.request, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-AUTH-YW-API-TOKEN"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AsynchronousReplicationApiApiSyncXClusterConfigV2Request struct {
	ctx _context.Context
	ApiService *AsynchronousReplicationApiService
	cUUID string
	xccUUID string
	request *interface{}
}

func (r AsynchronousReplicationApiApiSyncXClusterConfigV2Request) Request(request interface{}) AsynchronousReplicationApiApiSyncXClusterConfigV2Request {
	r.request = &request
	return r
}

func (r AsynchronousReplicationApiApiSyncXClusterConfigV2Request) Execute() (YBPTask, *_nethttp.Response, error) {
	return r.ApiService.SyncXClusterConfigV2Execute(r)
}

/*
 * SyncXClusterConfigV2 Sync xcluster config (V2)
 * Available since YBA version 2.23.0.0
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param cUUID
 * @param xccUUID
 * @return AsynchronousReplicationApiApiSyncXClusterConfigV2Request
 */
func (a *AsynchronousReplicationApiService) SyncXClusterConfigV2(ctx _context.Context, cUUID string, xccUUID string) AsynchronousReplicationApiApiSyncXClusterConfigV2Request {
	return AsynchronousReplicationApiApiSyncXClusterConfigV2Request{
		ApiService: a,
		ctx: ctx,
		cUUID: cUUID,
		xccUUID: xccUUID,
	}
}

/*
 * Execute executes the request
 * @return YBPTask
 */
func (a *AsynchronousReplicationApiService) SyncXClusterConfigV2Execute(r AsynchronousReplicationApiApiSyncXClusterConfigV2Request) (YBPTask, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  YBPTask
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AsynchronousReplicationApiService.SyncXClusterConfigV2")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/customers/{cUUID}/xcluster_configs/{xccUUID}/sync"
	localVarPath = strings.Replace(localVarPath, "{"+"cUUID"+"}", _neturl.PathEscape(parameterToString(r.cUUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"xccUUID"+"}", _neturl.PathEscape(parameterToString(r.xccUUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.request != nil {
		localVarQueryParams.Add("request", parameterToString(*r.request, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-AUTH-YW-API-TOKEN"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
