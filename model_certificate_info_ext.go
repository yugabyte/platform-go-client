/*
 * YugabyteDB Anywhere APIs
 *
 * ALPHA - NOT FOR EXTERNAL USE
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ywclient

import (
	"encoding/json"
	"time"
)

// CertificateInfoExt SSL certificate used by the universe
type CertificateInfoExt struct {
	// Type of the certificate
	CertType *string `json:"certType,omitempty"`
	// Certificate path
	Certificate *string `json:"certificate,omitempty"`
	// The certificate file's checksum
	Checksum *string `json:"checksum,omitempty"`
	CustomCertPathParams CustomCertInfo `json:"customCertPathParams"`
	CustomHCPKICertInfo HashicorpVaultConfigParams `json:"customHCPKICertInfo"`
	CustomServerCertInfo CustomServerCertInfo `json:"customServerCertInfo"`
	// Customer UUID of the backup which it belongs to
	CustomerUUID *string `json:"customerUUID,omitempty"`
	// The certificate's expiry date. Deprecated: Use expirtyDateIso instead
	ExpiryDate *time.Time `json:"expiryDate,omitempty"`
	// The certificate's expiry date
	ExpiryDateIso *time.Time `json:"expiryDateIso,omitempty"`
	// Indicates whether the certificate is in use. This value is `true` if the universe contains a reference to the certificate.
	InUse *bool `json:"inUse,omitempty"`
	// Certificate label
	Label *string `json:"label,omitempty"`
	// Private key path
	PrivateKey *string `json:"privateKey,omitempty"`
	// The certificate's creation date. Deprecated: use stateDateIso instead
	StartDate *time.Time `json:"startDate,omitempty"`
	// The certificate's creation date
	StartDateIso *time.Time `json:"startDateIso,omitempty"`
	UniverseDetailSubsets []UniverseDetailSubset `json:"universeDetailSubsets"`
	// Associated universe details for the certificate
	UniverseDetails *[]UniverseDetailSubset `json:"universeDetails,omitempty"`
	// Certificate UUID
	Uuid *string `json:"uuid,omitempty"`
}

// NewCertificateInfoExt instantiates a new CertificateInfoExt object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateInfoExt(customCertPathParams CustomCertInfo, customHCPKICertInfo HashicorpVaultConfigParams, customServerCertInfo CustomServerCertInfo, universeDetailSubsets []UniverseDetailSubset, ) *CertificateInfoExt {
	this := CertificateInfoExt{}
	this.CustomCertPathParams = customCertPathParams
	this.CustomHCPKICertInfo = customHCPKICertInfo
	this.CustomServerCertInfo = customServerCertInfo
	this.UniverseDetailSubsets = universeDetailSubsets
	return &this
}

// NewCertificateInfoExtWithDefaults instantiates a new CertificateInfoExt object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateInfoExtWithDefaults() *CertificateInfoExt {
	this := CertificateInfoExt{}
	return &this
}

// GetCertType returns the CertType field value if set, zero value otherwise.
func (o *CertificateInfoExt) GetCertType() string {
	if o == nil || o.CertType == nil {
		var ret string
		return ret
	}
	return *o.CertType
}

// GetCertTypeOk returns a tuple with the CertType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateInfoExt) GetCertTypeOk() (*string, bool) {
	if o == nil || o.CertType == nil {
		return nil, false
	}
	return o.CertType, true
}

// HasCertType returns a boolean if a field has been set.
func (o *CertificateInfoExt) HasCertType() bool {
	if o != nil && o.CertType != nil {
		return true
	}

	return false
}

// SetCertType gets a reference to the given string and assigns it to the CertType field.
func (o *CertificateInfoExt) SetCertType(v string) {
	o.CertType = &v
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *CertificateInfoExt) GetCertificate() string {
	if o == nil || o.Certificate == nil {
		var ret string
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateInfoExt) GetCertificateOk() (*string, bool) {
	if o == nil || o.Certificate == nil {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *CertificateInfoExt) HasCertificate() bool {
	if o != nil && o.Certificate != nil {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given string and assigns it to the Certificate field.
func (o *CertificateInfoExt) SetCertificate(v string) {
	o.Certificate = &v
}

// GetChecksum returns the Checksum field value if set, zero value otherwise.
func (o *CertificateInfoExt) GetChecksum() string {
	if o == nil || o.Checksum == nil {
		var ret string
		return ret
	}
	return *o.Checksum
}

// GetChecksumOk returns a tuple with the Checksum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateInfoExt) GetChecksumOk() (*string, bool) {
	if o == nil || o.Checksum == nil {
		return nil, false
	}
	return o.Checksum, true
}

// HasChecksum returns a boolean if a field has been set.
func (o *CertificateInfoExt) HasChecksum() bool {
	if o != nil && o.Checksum != nil {
		return true
	}

	return false
}

// SetChecksum gets a reference to the given string and assigns it to the Checksum field.
func (o *CertificateInfoExt) SetChecksum(v string) {
	o.Checksum = &v
}

// GetCustomCertPathParams returns the CustomCertPathParams field value
func (o *CertificateInfoExt) GetCustomCertPathParams() CustomCertInfo {
	if o == nil  {
		var ret CustomCertInfo
		return ret
	}

	return o.CustomCertPathParams
}

// GetCustomCertPathParamsOk returns a tuple with the CustomCertPathParams field value
// and a boolean to check if the value has been set.
func (o *CertificateInfoExt) GetCustomCertPathParamsOk() (*CustomCertInfo, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CustomCertPathParams, true
}

// SetCustomCertPathParams sets field value
func (o *CertificateInfoExt) SetCustomCertPathParams(v CustomCertInfo) {
	o.CustomCertPathParams = v
}

// GetCustomHCPKICertInfo returns the CustomHCPKICertInfo field value
func (o *CertificateInfoExt) GetCustomHCPKICertInfo() HashicorpVaultConfigParams {
	if o == nil  {
		var ret HashicorpVaultConfigParams
		return ret
	}

	return o.CustomHCPKICertInfo
}

// GetCustomHCPKICertInfoOk returns a tuple with the CustomHCPKICertInfo field value
// and a boolean to check if the value has been set.
func (o *CertificateInfoExt) GetCustomHCPKICertInfoOk() (*HashicorpVaultConfigParams, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CustomHCPKICertInfo, true
}

// SetCustomHCPKICertInfo sets field value
func (o *CertificateInfoExt) SetCustomHCPKICertInfo(v HashicorpVaultConfigParams) {
	o.CustomHCPKICertInfo = v
}

// GetCustomServerCertInfo returns the CustomServerCertInfo field value
func (o *CertificateInfoExt) GetCustomServerCertInfo() CustomServerCertInfo {
	if o == nil  {
		var ret CustomServerCertInfo
		return ret
	}

	return o.CustomServerCertInfo
}

// GetCustomServerCertInfoOk returns a tuple with the CustomServerCertInfo field value
// and a boolean to check if the value has been set.
func (o *CertificateInfoExt) GetCustomServerCertInfoOk() (*CustomServerCertInfo, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CustomServerCertInfo, true
}

// SetCustomServerCertInfo sets field value
func (o *CertificateInfoExt) SetCustomServerCertInfo(v CustomServerCertInfo) {
	o.CustomServerCertInfo = v
}

// GetCustomerUUID returns the CustomerUUID field value if set, zero value otherwise.
func (o *CertificateInfoExt) GetCustomerUUID() string {
	if o == nil || o.CustomerUUID == nil {
		var ret string
		return ret
	}
	return *o.CustomerUUID
}

// GetCustomerUUIDOk returns a tuple with the CustomerUUID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateInfoExt) GetCustomerUUIDOk() (*string, bool) {
	if o == nil || o.CustomerUUID == nil {
		return nil, false
	}
	return o.CustomerUUID, true
}

// HasCustomerUUID returns a boolean if a field has been set.
func (o *CertificateInfoExt) HasCustomerUUID() bool {
	if o != nil && o.CustomerUUID != nil {
		return true
	}

	return false
}

// SetCustomerUUID gets a reference to the given string and assigns it to the CustomerUUID field.
func (o *CertificateInfoExt) SetCustomerUUID(v string) {
	o.CustomerUUID = &v
}

// GetExpiryDate returns the ExpiryDate field value if set, zero value otherwise.
func (o *CertificateInfoExt) GetExpiryDate() time.Time {
	if o == nil || o.ExpiryDate == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpiryDate
}

// GetExpiryDateOk returns a tuple with the ExpiryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateInfoExt) GetExpiryDateOk() (*time.Time, bool) {
	if o == nil || o.ExpiryDate == nil {
		return nil, false
	}
	return o.ExpiryDate, true
}

// HasExpiryDate returns a boolean if a field has been set.
func (o *CertificateInfoExt) HasExpiryDate() bool {
	if o != nil && o.ExpiryDate != nil {
		return true
	}

	return false
}

// SetExpiryDate gets a reference to the given time.Time and assigns it to the ExpiryDate field.
func (o *CertificateInfoExt) SetExpiryDate(v time.Time) {
	o.ExpiryDate = &v
}

// GetExpiryDateIso returns the ExpiryDateIso field value if set, zero value otherwise.
func (o *CertificateInfoExt) GetExpiryDateIso() time.Time {
	if o == nil || o.ExpiryDateIso == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpiryDateIso
}

// GetExpiryDateIsoOk returns a tuple with the ExpiryDateIso field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateInfoExt) GetExpiryDateIsoOk() (*time.Time, bool) {
	if o == nil || o.ExpiryDateIso == nil {
		return nil, false
	}
	return o.ExpiryDateIso, true
}

// HasExpiryDateIso returns a boolean if a field has been set.
func (o *CertificateInfoExt) HasExpiryDateIso() bool {
	if o != nil && o.ExpiryDateIso != nil {
		return true
	}

	return false
}

// SetExpiryDateIso gets a reference to the given time.Time and assigns it to the ExpiryDateIso field.
func (o *CertificateInfoExt) SetExpiryDateIso(v time.Time) {
	o.ExpiryDateIso = &v
}

// GetInUse returns the InUse field value if set, zero value otherwise.
func (o *CertificateInfoExt) GetInUse() bool {
	if o == nil || o.InUse == nil {
		var ret bool
		return ret
	}
	return *o.InUse
}

// GetInUseOk returns a tuple with the InUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateInfoExt) GetInUseOk() (*bool, bool) {
	if o == nil || o.InUse == nil {
		return nil, false
	}
	return o.InUse, true
}

// HasInUse returns a boolean if a field has been set.
func (o *CertificateInfoExt) HasInUse() bool {
	if o != nil && o.InUse != nil {
		return true
	}

	return false
}

// SetInUse gets a reference to the given bool and assigns it to the InUse field.
func (o *CertificateInfoExt) SetInUse(v bool) {
	o.InUse = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *CertificateInfoExt) GetLabel() string {
	if o == nil || o.Label == nil {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateInfoExt) GetLabelOk() (*string, bool) {
	if o == nil || o.Label == nil {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *CertificateInfoExt) HasLabel() bool {
	if o != nil && o.Label != nil {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *CertificateInfoExt) SetLabel(v string) {
	o.Label = &v
}

// GetPrivateKey returns the PrivateKey field value if set, zero value otherwise.
func (o *CertificateInfoExt) GetPrivateKey() string {
	if o == nil || o.PrivateKey == nil {
		var ret string
		return ret
	}
	return *o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateInfoExt) GetPrivateKeyOk() (*string, bool) {
	if o == nil || o.PrivateKey == nil {
		return nil, false
	}
	return o.PrivateKey, true
}

// HasPrivateKey returns a boolean if a field has been set.
func (o *CertificateInfoExt) HasPrivateKey() bool {
	if o != nil && o.PrivateKey != nil {
		return true
	}

	return false
}

// SetPrivateKey gets a reference to the given string and assigns it to the PrivateKey field.
func (o *CertificateInfoExt) SetPrivateKey(v string) {
	o.PrivateKey = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *CertificateInfoExt) GetStartDate() time.Time {
	if o == nil || o.StartDate == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateInfoExt) GetStartDateOk() (*time.Time, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *CertificateInfoExt) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *CertificateInfoExt) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetStartDateIso returns the StartDateIso field value if set, zero value otherwise.
func (o *CertificateInfoExt) GetStartDateIso() time.Time {
	if o == nil || o.StartDateIso == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDateIso
}

// GetStartDateIsoOk returns a tuple with the StartDateIso field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateInfoExt) GetStartDateIsoOk() (*time.Time, bool) {
	if o == nil || o.StartDateIso == nil {
		return nil, false
	}
	return o.StartDateIso, true
}

// HasStartDateIso returns a boolean if a field has been set.
func (o *CertificateInfoExt) HasStartDateIso() bool {
	if o != nil && o.StartDateIso != nil {
		return true
	}

	return false
}

// SetStartDateIso gets a reference to the given time.Time and assigns it to the StartDateIso field.
func (o *CertificateInfoExt) SetStartDateIso(v time.Time) {
	o.StartDateIso = &v
}

// GetUniverseDetailSubsets returns the UniverseDetailSubsets field value
func (o *CertificateInfoExt) GetUniverseDetailSubsets() []UniverseDetailSubset {
	if o == nil  {
		var ret []UniverseDetailSubset
		return ret
	}

	return o.UniverseDetailSubsets
}

// GetUniverseDetailSubsetsOk returns a tuple with the UniverseDetailSubsets field value
// and a boolean to check if the value has been set.
func (o *CertificateInfoExt) GetUniverseDetailSubsetsOk() (*[]UniverseDetailSubset, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UniverseDetailSubsets, true
}

// SetUniverseDetailSubsets sets field value
func (o *CertificateInfoExt) SetUniverseDetailSubsets(v []UniverseDetailSubset) {
	o.UniverseDetailSubsets = v
}

// GetUniverseDetails returns the UniverseDetails field value if set, zero value otherwise.
func (o *CertificateInfoExt) GetUniverseDetails() []UniverseDetailSubset {
	if o == nil || o.UniverseDetails == nil {
		var ret []UniverseDetailSubset
		return ret
	}
	return *o.UniverseDetails
}

// GetUniverseDetailsOk returns a tuple with the UniverseDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateInfoExt) GetUniverseDetailsOk() (*[]UniverseDetailSubset, bool) {
	if o == nil || o.UniverseDetails == nil {
		return nil, false
	}
	return o.UniverseDetails, true
}

// HasUniverseDetails returns a boolean if a field has been set.
func (o *CertificateInfoExt) HasUniverseDetails() bool {
	if o != nil && o.UniverseDetails != nil {
		return true
	}

	return false
}

// SetUniverseDetails gets a reference to the given []UniverseDetailSubset and assigns it to the UniverseDetails field.
func (o *CertificateInfoExt) SetUniverseDetails(v []UniverseDetailSubset) {
	o.UniverseDetails = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *CertificateInfoExt) GetUuid() string {
	if o == nil || o.Uuid == nil {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateInfoExt) GetUuidOk() (*string, bool) {
	if o == nil || o.Uuid == nil {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *CertificateInfoExt) HasUuid() bool {
	if o != nil && o.Uuid != nil {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *CertificateInfoExt) SetUuid(v string) {
	o.Uuid = &v
}

func (o CertificateInfoExt) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CertType != nil {
		toSerialize["certType"] = o.CertType
	}
	if o.Certificate != nil {
		toSerialize["certificate"] = o.Certificate
	}
	if o.Checksum != nil {
		toSerialize["checksum"] = o.Checksum
	}
	if true {
		toSerialize["customCertPathParams"] = o.CustomCertPathParams
	}
	if true {
		toSerialize["customHCPKICertInfo"] = o.CustomHCPKICertInfo
	}
	if true {
		toSerialize["customServerCertInfo"] = o.CustomServerCertInfo
	}
	if o.CustomerUUID != nil {
		toSerialize["customerUUID"] = o.CustomerUUID
	}
	if o.ExpiryDate != nil {
		toSerialize["expiryDate"] = o.ExpiryDate
	}
	if o.ExpiryDateIso != nil {
		toSerialize["expiryDateIso"] = o.ExpiryDateIso
	}
	if o.InUse != nil {
		toSerialize["inUse"] = o.InUse
	}
	if o.Label != nil {
		toSerialize["label"] = o.Label
	}
	if o.PrivateKey != nil {
		toSerialize["privateKey"] = o.PrivateKey
	}
	if o.StartDate != nil {
		toSerialize["startDate"] = o.StartDate
	}
	if o.StartDateIso != nil {
		toSerialize["startDateIso"] = o.StartDateIso
	}
	if true {
		toSerialize["universeDetailSubsets"] = o.UniverseDetailSubsets
	}
	if o.UniverseDetails != nil {
		toSerialize["universeDetails"] = o.UniverseDetails
	}
	if o.Uuid != nil {
		toSerialize["uuid"] = o.Uuid
	}
	return json.Marshal(toSerialize)
}

type NullableCertificateInfoExt struct {
	value *CertificateInfoExt
	isSet bool
}

func (v NullableCertificateInfoExt) Get() *CertificateInfoExt {
	return v.value
}

func (v *NullableCertificateInfoExt) Set(val *CertificateInfoExt) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateInfoExt) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateInfoExt) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateInfoExt(val *CertificateInfoExt) *NullableCertificateInfoExt {
	return &NullableCertificateInfoExt{value: val, isSet: true}
}

func (v NullableCertificateInfoExt) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateInfoExt) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


