/*
 * YugabyteDB Anywhere APIs
 *
 * ALPHA - NOT FOR EXTERNAL USE
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ywclient

import (
	"encoding/json"
)

// PermissionInfo struct for PermissionInfo
type PermissionInfo struct {
	Description *string `json:"description,omitempty"`
	Permission *string `json:"permission,omitempty"`
	PrerequisitePermissions *[]PermissionInfoIdentifier `json:"prerequisite_permissions,omitempty"`
	ResourceType *string `json:"resource_type,omitempty"`
}

// NewPermissionInfo instantiates a new PermissionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermissionInfo() *PermissionInfo {
	this := PermissionInfo{}
	return &this
}

// NewPermissionInfoWithDefaults instantiates a new PermissionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionInfoWithDefaults() *PermissionInfo {
	this := PermissionInfo{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PermissionInfo) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionInfo) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PermissionInfo) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PermissionInfo) SetDescription(v string) {
	o.Description = &v
}

// GetPermission returns the Permission field value if set, zero value otherwise.
func (o *PermissionInfo) GetPermission() string {
	if o == nil || o.Permission == nil {
		var ret string
		return ret
	}
	return *o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionInfo) GetPermissionOk() (*string, bool) {
	if o == nil || o.Permission == nil {
		return nil, false
	}
	return o.Permission, true
}

// HasPermission returns a boolean if a field has been set.
func (o *PermissionInfo) HasPermission() bool {
	if o != nil && o.Permission != nil {
		return true
	}

	return false
}

// SetPermission gets a reference to the given string and assigns it to the Permission field.
func (o *PermissionInfo) SetPermission(v string) {
	o.Permission = &v
}

// GetPrerequisitePermissions returns the PrerequisitePermissions field value if set, zero value otherwise.
func (o *PermissionInfo) GetPrerequisitePermissions() []PermissionInfoIdentifier {
	if o == nil || o.PrerequisitePermissions == nil {
		var ret []PermissionInfoIdentifier
		return ret
	}
	return *o.PrerequisitePermissions
}

// GetPrerequisitePermissionsOk returns a tuple with the PrerequisitePermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionInfo) GetPrerequisitePermissionsOk() (*[]PermissionInfoIdentifier, bool) {
	if o == nil || o.PrerequisitePermissions == nil {
		return nil, false
	}
	return o.PrerequisitePermissions, true
}

// HasPrerequisitePermissions returns a boolean if a field has been set.
func (o *PermissionInfo) HasPrerequisitePermissions() bool {
	if o != nil && o.PrerequisitePermissions != nil {
		return true
	}

	return false
}

// SetPrerequisitePermissions gets a reference to the given []PermissionInfoIdentifier and assigns it to the PrerequisitePermissions field.
func (o *PermissionInfo) SetPrerequisitePermissions(v []PermissionInfoIdentifier) {
	o.PrerequisitePermissions = &v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *PermissionInfo) GetResourceType() string {
	if o == nil || o.ResourceType == nil {
		var ret string
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionInfo) GetResourceTypeOk() (*string, bool) {
	if o == nil || o.ResourceType == nil {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *PermissionInfo) HasResourceType() bool {
	if o != nil && o.ResourceType != nil {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *PermissionInfo) SetResourceType(v string) {
	o.ResourceType = &v
}

func (o PermissionInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Permission != nil {
		toSerialize["permission"] = o.Permission
	}
	if o.PrerequisitePermissions != nil {
		toSerialize["prerequisite_permissions"] = o.PrerequisitePermissions
	}
	if o.ResourceType != nil {
		toSerialize["resource_type"] = o.ResourceType
	}
	return json.Marshal(toSerialize)
}

type NullablePermissionInfo struct {
	value *PermissionInfo
	isSet bool
}

func (v NullablePermissionInfo) Get() *PermissionInfo {
	return v.value
}

func (v *NullablePermissionInfo) Set(val *PermissionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionInfo(val *PermissionInfo) *NullablePermissionInfo {
	return &NullablePermissionInfo{value: val, isSet: true}
}

func (v NullablePermissionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


