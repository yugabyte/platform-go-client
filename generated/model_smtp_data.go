/*
 * Yugabyte Platform APIs
 *
 * ALPHA - NOT FOR EXTERNAL USE
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package yb_platform_client

import (
	"encoding/json"
)

// SmtpData SMTP configuration information
type SmtpData struct {
	// SMTP email 'from' address
	EmailFrom *string `json:"emailFrom,omitempty"`
	// SMTP password
	SmtpPassword *string `json:"smtpPassword,omitempty"`
	// SMTP port number
	SmtpPort *int32 `json:"smtpPort,omitempty"`
	// SMTP server
	SmtpServer *string `json:"smtpServer,omitempty"`
	// SMTP email username
	SmtpUsername *string `json:"smtpUsername,omitempty"`
	// Connect to SMTP server using SSL
	UseSSL *bool `json:"useSSL,omitempty"`
	// Connect to SMTP server using TLS
	UseTLS *bool `json:"useTLS,omitempty"`
}

// NewSmtpData instantiates a new SmtpData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmtpData() *SmtpData {
	this := SmtpData{}
	return &this
}

// NewSmtpDataWithDefaults instantiates a new SmtpData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmtpDataWithDefaults() *SmtpData {
	this := SmtpData{}
	return &this
}

// GetEmailFrom returns the EmailFrom field value if set, zero value otherwise.
func (o *SmtpData) GetEmailFrom() string {
	if o == nil || o.EmailFrom == nil {
		var ret string
		return ret
	}
	return *o.EmailFrom
}

// GetEmailFromOk returns a tuple with the EmailFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmtpData) GetEmailFromOk() (*string, bool) {
	if o == nil || o.EmailFrom == nil {
		return nil, false
	}
	return o.EmailFrom, true
}

// HasEmailFrom returns a boolean if a field has been set.
func (o *SmtpData) HasEmailFrom() bool {
	if o != nil && o.EmailFrom != nil {
		return true
	}

	return false
}

// SetEmailFrom gets a reference to the given string and assigns it to the EmailFrom field.
func (o *SmtpData) SetEmailFrom(v string) {
	o.EmailFrom = &v
}

// GetSmtpPassword returns the SmtpPassword field value if set, zero value otherwise.
func (o *SmtpData) GetSmtpPassword() string {
	if o == nil || o.SmtpPassword == nil {
		var ret string
		return ret
	}
	return *o.SmtpPassword
}

// GetSmtpPasswordOk returns a tuple with the SmtpPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmtpData) GetSmtpPasswordOk() (*string, bool) {
	if o == nil || o.SmtpPassword == nil {
		return nil, false
	}
	return o.SmtpPassword, true
}

// HasSmtpPassword returns a boolean if a field has been set.
func (o *SmtpData) HasSmtpPassword() bool {
	if o != nil && o.SmtpPassword != nil {
		return true
	}

	return false
}

// SetSmtpPassword gets a reference to the given string and assigns it to the SmtpPassword field.
func (o *SmtpData) SetSmtpPassword(v string) {
	o.SmtpPassword = &v
}

// GetSmtpPort returns the SmtpPort field value if set, zero value otherwise.
func (o *SmtpData) GetSmtpPort() int32 {
	if o == nil || o.SmtpPort == nil {
		var ret int32
		return ret
	}
	return *o.SmtpPort
}

// GetSmtpPortOk returns a tuple with the SmtpPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmtpData) GetSmtpPortOk() (*int32, bool) {
	if o == nil || o.SmtpPort == nil {
		return nil, false
	}
	return o.SmtpPort, true
}

// HasSmtpPort returns a boolean if a field has been set.
func (o *SmtpData) HasSmtpPort() bool {
	if o != nil && o.SmtpPort != nil {
		return true
	}

	return false
}

// SetSmtpPort gets a reference to the given int32 and assigns it to the SmtpPort field.
func (o *SmtpData) SetSmtpPort(v int32) {
	o.SmtpPort = &v
}

// GetSmtpServer returns the SmtpServer field value if set, zero value otherwise.
func (o *SmtpData) GetSmtpServer() string {
	if o == nil || o.SmtpServer == nil {
		var ret string
		return ret
	}
	return *o.SmtpServer
}

// GetSmtpServerOk returns a tuple with the SmtpServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmtpData) GetSmtpServerOk() (*string, bool) {
	if o == nil || o.SmtpServer == nil {
		return nil, false
	}
	return o.SmtpServer, true
}

// HasSmtpServer returns a boolean if a field has been set.
func (o *SmtpData) HasSmtpServer() bool {
	if o != nil && o.SmtpServer != nil {
		return true
	}

	return false
}

// SetSmtpServer gets a reference to the given string and assigns it to the SmtpServer field.
func (o *SmtpData) SetSmtpServer(v string) {
	o.SmtpServer = &v
}

// GetSmtpUsername returns the SmtpUsername field value if set, zero value otherwise.
func (o *SmtpData) GetSmtpUsername() string {
	if o == nil || o.SmtpUsername == nil {
		var ret string
		return ret
	}
	return *o.SmtpUsername
}

// GetSmtpUsernameOk returns a tuple with the SmtpUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmtpData) GetSmtpUsernameOk() (*string, bool) {
	if o == nil || o.SmtpUsername == nil {
		return nil, false
	}
	return o.SmtpUsername, true
}

// HasSmtpUsername returns a boolean if a field has been set.
func (o *SmtpData) HasSmtpUsername() bool {
	if o != nil && o.SmtpUsername != nil {
		return true
	}

	return false
}

// SetSmtpUsername gets a reference to the given string and assigns it to the SmtpUsername field.
func (o *SmtpData) SetSmtpUsername(v string) {
	o.SmtpUsername = &v
}

// GetUseSSL returns the UseSSL field value if set, zero value otherwise.
func (o *SmtpData) GetUseSSL() bool {
	if o == nil || o.UseSSL == nil {
		var ret bool
		return ret
	}
	return *o.UseSSL
}

// GetUseSSLOk returns a tuple with the UseSSL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmtpData) GetUseSSLOk() (*bool, bool) {
	if o == nil || o.UseSSL == nil {
		return nil, false
	}
	return o.UseSSL, true
}

// HasUseSSL returns a boolean if a field has been set.
func (o *SmtpData) HasUseSSL() bool {
	if o != nil && o.UseSSL != nil {
		return true
	}

	return false
}

// SetUseSSL gets a reference to the given bool and assigns it to the UseSSL field.
func (o *SmtpData) SetUseSSL(v bool) {
	o.UseSSL = &v
}

// GetUseTLS returns the UseTLS field value if set, zero value otherwise.
func (o *SmtpData) GetUseTLS() bool {
	if o == nil || o.UseTLS == nil {
		var ret bool
		return ret
	}
	return *o.UseTLS
}

// GetUseTLSOk returns a tuple with the UseTLS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmtpData) GetUseTLSOk() (*bool, bool) {
	if o == nil || o.UseTLS == nil {
		return nil, false
	}
	return o.UseTLS, true
}

// HasUseTLS returns a boolean if a field has been set.
func (o *SmtpData) HasUseTLS() bool {
	if o != nil && o.UseTLS != nil {
		return true
	}

	return false
}

// SetUseTLS gets a reference to the given bool and assigns it to the UseTLS field.
func (o *SmtpData) SetUseTLS(v bool) {
	o.UseTLS = &v
}

func (o SmtpData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EmailFrom != nil {
		toSerialize["emailFrom"] = o.EmailFrom
	}
	if o.SmtpPassword != nil {
		toSerialize["smtpPassword"] = o.SmtpPassword
	}
	if o.SmtpPort != nil {
		toSerialize["smtpPort"] = o.SmtpPort
	}
	if o.SmtpServer != nil {
		toSerialize["smtpServer"] = o.SmtpServer
	}
	if o.SmtpUsername != nil {
		toSerialize["smtpUsername"] = o.SmtpUsername
	}
	if o.UseSSL != nil {
		toSerialize["useSSL"] = o.UseSSL
	}
	if o.UseTLS != nil {
		toSerialize["useTLS"] = o.UseTLS
	}
	return json.Marshal(toSerialize)
}

type NullableSmtpData struct {
	value *SmtpData
	isSet bool
}

func (v NullableSmtpData) Get() *SmtpData {
	return v.value
}

func (v *NullableSmtpData) Set(val *SmtpData) {
	v.value = val
	v.isSet = true
}

func (v NullableSmtpData) IsSet() bool {
	return v.isSet
}

func (v *NullableSmtpData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmtpData(val *SmtpData) *NullableSmtpData {
	return &NullableSmtpData{value: val, isSet: true}
}

func (v NullableSmtpData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmtpData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


