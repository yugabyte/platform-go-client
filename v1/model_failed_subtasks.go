/*
 * YugabyteDB Anywhere APIs
 *
 * ALPHA - NOT FOR EXTERNAL USE
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// FailedSubtasks Failed Subtasks
type FailedSubtasks struct {
	// List of failed subtasks
	FailedSubTasks *[]SubtaskData `json:"failedSubTasks,omitempty"`
}

// NewFailedSubtasks instantiates a new FailedSubtasks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFailedSubtasks() *FailedSubtasks {
	this := FailedSubtasks{}
	return &this
}

// NewFailedSubtasksWithDefaults instantiates a new FailedSubtasks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFailedSubtasksWithDefaults() *FailedSubtasks {
	this := FailedSubtasks{}
	return &this
}

// GetFailedSubTasks returns the FailedSubTasks field value if set, zero value otherwise.
func (o *FailedSubtasks) GetFailedSubTasks() []SubtaskData {
	if o == nil || o.FailedSubTasks == nil {
		var ret []SubtaskData
		return ret
	}
	return *o.FailedSubTasks
}

// GetFailedSubTasksOk returns a tuple with the FailedSubTasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailedSubtasks) GetFailedSubTasksOk() (*[]SubtaskData, bool) {
	if o == nil || o.FailedSubTasks == nil {
		return nil, false
	}
	return o.FailedSubTasks, true
}

// HasFailedSubTasks returns a boolean if a field has been set.
func (o *FailedSubtasks) HasFailedSubTasks() bool {
	if o != nil && o.FailedSubTasks != nil {
		return true
	}

	return false
}

// SetFailedSubTasks gets a reference to the given []SubtaskData and assigns it to the FailedSubTasks field.
func (o *FailedSubtasks) SetFailedSubTasks(v []SubtaskData) {
	o.FailedSubTasks = &v
}

func (o FailedSubtasks) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FailedSubTasks != nil {
		toSerialize["failedSubTasks"] = o.FailedSubTasks
	}
	return json.Marshal(toSerialize)
}

type NullableFailedSubtasks struct {
	value *FailedSubtasks
	isSet bool
}

func (v NullableFailedSubtasks) Get() *FailedSubtasks {
	return v.value
}

func (v *NullableFailedSubtasks) Set(val *FailedSubtasks) {
	v.value = val
	v.isSet = true
}

func (v NullableFailedSubtasks) IsSet() bool {
	return v.isSet
}

func (v *NullableFailedSubtasks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFailedSubtasks(val *FailedSubtasks) *NullableFailedSubtasks {
	return &NullableFailedSubtasks{value: val, isSet: true}
}

func (v NullableFailedSubtasks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFailedSubtasks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


