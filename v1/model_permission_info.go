/*
 * YugabyteDB Anywhere APIs
 *
 * ALPHA - NOT FOR EXTERNAL USE
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// PermissionInfo struct for PermissionInfo
type PermissionInfo struct {
	Action *string `json:"action,omitempty"`
	Description *string `json:"description,omitempty"`
	Name *string `json:"name,omitempty"`
	PermissionValidOnResource *bool `json:"permissionValidOnResource,omitempty"`
	PrerequisitePermissions *[]Permission `json:"prerequisitePermissions,omitempty"`
	ResourceType *string `json:"resourceType,omitempty"`
}

// NewPermissionInfo instantiates a new PermissionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermissionInfo() *PermissionInfo {
	this := PermissionInfo{}
	return &this
}

// NewPermissionInfoWithDefaults instantiates a new PermissionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionInfoWithDefaults() *PermissionInfo {
	this := PermissionInfo{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *PermissionInfo) GetAction() string {
	if o == nil || o.Action == nil {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionInfo) GetActionOk() (*string, bool) {
	if o == nil || o.Action == nil {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *PermissionInfo) HasAction() bool {
	if o != nil && o.Action != nil {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *PermissionInfo) SetAction(v string) {
	o.Action = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PermissionInfo) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionInfo) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PermissionInfo) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PermissionInfo) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PermissionInfo) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionInfo) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PermissionInfo) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PermissionInfo) SetName(v string) {
	o.Name = &v
}

// GetPermissionValidOnResource returns the PermissionValidOnResource field value if set, zero value otherwise.
func (o *PermissionInfo) GetPermissionValidOnResource() bool {
	if o == nil || o.PermissionValidOnResource == nil {
		var ret bool
		return ret
	}
	return *o.PermissionValidOnResource
}

// GetPermissionValidOnResourceOk returns a tuple with the PermissionValidOnResource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionInfo) GetPermissionValidOnResourceOk() (*bool, bool) {
	if o == nil || o.PermissionValidOnResource == nil {
		return nil, false
	}
	return o.PermissionValidOnResource, true
}

// HasPermissionValidOnResource returns a boolean if a field has been set.
func (o *PermissionInfo) HasPermissionValidOnResource() bool {
	if o != nil && o.PermissionValidOnResource != nil {
		return true
	}

	return false
}

// SetPermissionValidOnResource gets a reference to the given bool and assigns it to the PermissionValidOnResource field.
func (o *PermissionInfo) SetPermissionValidOnResource(v bool) {
	o.PermissionValidOnResource = &v
}

// GetPrerequisitePermissions returns the PrerequisitePermissions field value if set, zero value otherwise.
func (o *PermissionInfo) GetPrerequisitePermissions() []Permission {
	if o == nil || o.PrerequisitePermissions == nil {
		var ret []Permission
		return ret
	}
	return *o.PrerequisitePermissions
}

// GetPrerequisitePermissionsOk returns a tuple with the PrerequisitePermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionInfo) GetPrerequisitePermissionsOk() (*[]Permission, bool) {
	if o == nil || o.PrerequisitePermissions == nil {
		return nil, false
	}
	return o.PrerequisitePermissions, true
}

// HasPrerequisitePermissions returns a boolean if a field has been set.
func (o *PermissionInfo) HasPrerequisitePermissions() bool {
	if o != nil && o.PrerequisitePermissions != nil {
		return true
	}

	return false
}

// SetPrerequisitePermissions gets a reference to the given []Permission and assigns it to the PrerequisitePermissions field.
func (o *PermissionInfo) SetPrerequisitePermissions(v []Permission) {
	o.PrerequisitePermissions = &v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *PermissionInfo) GetResourceType() string {
	if o == nil || o.ResourceType == nil {
		var ret string
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionInfo) GetResourceTypeOk() (*string, bool) {
	if o == nil || o.ResourceType == nil {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *PermissionInfo) HasResourceType() bool {
	if o != nil && o.ResourceType != nil {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *PermissionInfo) SetResourceType(v string) {
	o.ResourceType = &v
}

func (o PermissionInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Action != nil {
		toSerialize["action"] = o.Action
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.PermissionValidOnResource != nil {
		toSerialize["permissionValidOnResource"] = o.PermissionValidOnResource
	}
	if o.PrerequisitePermissions != nil {
		toSerialize["prerequisitePermissions"] = o.PrerequisitePermissions
	}
	if o.ResourceType != nil {
		toSerialize["resourceType"] = o.ResourceType
	}
	return json.Marshal(toSerialize)
}

type NullablePermissionInfo struct {
	value *PermissionInfo
	isSet bool
}

func (v NullablePermissionInfo) Get() *PermissionInfo {
	return v.value
}

func (v *NullablePermissionInfo) Set(val *PermissionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionInfo(val *PermissionInfo) *NullablePermissionInfo {
	return &NullablePermissionInfo{value: val, isSet: true}
}

func (v NullablePermissionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


