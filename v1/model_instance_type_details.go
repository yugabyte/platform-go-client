/*
 * YugabyteDB Anywhere APIs
 *
 * ALPHA - NOT FOR EXTERNAL USE
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// InstanceTypeDetails struct for InstanceTypeDetails
type InstanceTypeDetails struct {
	// Architecture for the instance.
	Arch *string `json:"arch,omitempty"`
	// Tenancy for the instance.
	Tenancy *string `json:"tenancy,omitempty"`
	// Volume Details for the instance.
	VolumeDetailsList *[]VolumeDetails `json:"volumeDetailsList,omitempty"`
}

// NewInstanceTypeDetails instantiates a new InstanceTypeDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceTypeDetails() *InstanceTypeDetails {
	this := InstanceTypeDetails{}
	return &this
}

// NewInstanceTypeDetailsWithDefaults instantiates a new InstanceTypeDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceTypeDetailsWithDefaults() *InstanceTypeDetails {
	this := InstanceTypeDetails{}
	return &this
}

// GetArch returns the Arch field value if set, zero value otherwise.
func (o *InstanceTypeDetails) GetArch() string {
	if o == nil || o.Arch == nil {
		var ret string
		return ret
	}
	return *o.Arch
}

// GetArchOk returns a tuple with the Arch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceTypeDetails) GetArchOk() (*string, bool) {
	if o == nil || o.Arch == nil {
		return nil, false
	}
	return o.Arch, true
}

// HasArch returns a boolean if a field has been set.
func (o *InstanceTypeDetails) HasArch() bool {
	if o != nil && o.Arch != nil {
		return true
	}

	return false
}

// SetArch gets a reference to the given string and assigns it to the Arch field.
func (o *InstanceTypeDetails) SetArch(v string) {
	o.Arch = &v
}

// GetTenancy returns the Tenancy field value if set, zero value otherwise.
func (o *InstanceTypeDetails) GetTenancy() string {
	if o == nil || o.Tenancy == nil {
		var ret string
		return ret
	}
	return *o.Tenancy
}

// GetTenancyOk returns a tuple with the Tenancy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceTypeDetails) GetTenancyOk() (*string, bool) {
	if o == nil || o.Tenancy == nil {
		return nil, false
	}
	return o.Tenancy, true
}

// HasTenancy returns a boolean if a field has been set.
func (o *InstanceTypeDetails) HasTenancy() bool {
	if o != nil && o.Tenancy != nil {
		return true
	}

	return false
}

// SetTenancy gets a reference to the given string and assigns it to the Tenancy field.
func (o *InstanceTypeDetails) SetTenancy(v string) {
	o.Tenancy = &v
}

// GetVolumeDetailsList returns the VolumeDetailsList field value if set, zero value otherwise.
func (o *InstanceTypeDetails) GetVolumeDetailsList() []VolumeDetails {
	if o == nil || o.VolumeDetailsList == nil {
		var ret []VolumeDetails
		return ret
	}
	return *o.VolumeDetailsList
}

// GetVolumeDetailsListOk returns a tuple with the VolumeDetailsList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceTypeDetails) GetVolumeDetailsListOk() (*[]VolumeDetails, bool) {
	if o == nil || o.VolumeDetailsList == nil {
		return nil, false
	}
	return o.VolumeDetailsList, true
}

// HasVolumeDetailsList returns a boolean if a field has been set.
func (o *InstanceTypeDetails) HasVolumeDetailsList() bool {
	if o != nil && o.VolumeDetailsList != nil {
		return true
	}

	return false
}

// SetVolumeDetailsList gets a reference to the given []VolumeDetails and assigns it to the VolumeDetailsList field.
func (o *InstanceTypeDetails) SetVolumeDetailsList(v []VolumeDetails) {
	o.VolumeDetailsList = &v
}

func (o InstanceTypeDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Arch != nil {
		toSerialize["arch"] = o.Arch
	}
	if o.Tenancy != nil {
		toSerialize["tenancy"] = o.Tenancy
	}
	if o.VolumeDetailsList != nil {
		toSerialize["volumeDetailsList"] = o.VolumeDetailsList
	}
	return json.Marshal(toSerialize)
}

type NullableInstanceTypeDetails struct {
	value *InstanceTypeDetails
	isSet bool
}

func (v NullableInstanceTypeDetails) Get() *InstanceTypeDetails {
	return v.value
}

func (v *NullableInstanceTypeDetails) Set(val *InstanceTypeDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceTypeDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceTypeDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceTypeDetails(val *InstanceTypeDetails) *NullableInstanceTypeDetails {
	return &NullableInstanceTypeDetails{value: val, isSet: true}
}

func (v NullableInstanceTypeDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceTypeDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


