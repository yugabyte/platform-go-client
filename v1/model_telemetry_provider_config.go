/*
 * YugabyteDB Anywhere APIs
 *
 * ALPHA - NOT FOR EXTERNAL USE
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// TelemetryProviderConfig Telemetry Provider Configuration
type TelemetryProviderConfig struct {
	// Telemetry Provider Type
	Type *string `json:"type,omitempty"`
}

// NewTelemetryProviderConfig instantiates a new TelemetryProviderConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTelemetryProviderConfig() *TelemetryProviderConfig {
	this := TelemetryProviderConfig{}
	return &this
}

// NewTelemetryProviderConfigWithDefaults instantiates a new TelemetryProviderConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTelemetryProviderConfigWithDefaults() *TelemetryProviderConfig {
	this := TelemetryProviderConfig{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TelemetryProviderConfig) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelemetryProviderConfig) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TelemetryProviderConfig) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TelemetryProviderConfig) SetType(v string) {
	o.Type = &v
}

func (o TelemetryProviderConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableTelemetryProviderConfig struct {
	value *TelemetryProviderConfig
	isSet bool
}

func (v NullableTelemetryProviderConfig) Get() *TelemetryProviderConfig {
	return v.value
}

func (v *NullableTelemetryProviderConfig) Set(val *TelemetryProviderConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryProviderConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryProviderConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryProviderConfig(val *TelemetryProviderConfig) *NullableTelemetryProviderConfig {
	return &NullableTelemetryProviderConfig{value: val, isSet: true}
}

func (v NullableTelemetryProviderConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryProviderConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


