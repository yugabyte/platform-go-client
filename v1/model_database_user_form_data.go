/*
 * YugabyteDB Anywhere APIs
 *
 * ALPHA - NOT FOR EXTERNAL USE
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// DatabaseUserFormData struct for DatabaseUserFormData
type DatabaseUserFormData struct {
	DbName string `json:"dbName"`
	Password string `json:"password"`
	Username string `json:"username"`
	YcqlAdminPassword string `json:"ycqlAdminPassword"`
	YcqlAdminUsername string `json:"ycqlAdminUsername"`
	YsqlAdminPassword string `json:"ysqlAdminPassword"`
	YsqlAdminUsername string `json:"ysqlAdminUsername"`
}

// NewDatabaseUserFormData instantiates a new DatabaseUserFormData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseUserFormData(dbName string, password string, username string, ycqlAdminPassword string, ycqlAdminUsername string, ysqlAdminPassword string, ysqlAdminUsername string) *DatabaseUserFormData {
	this := DatabaseUserFormData{}
	this.DbName = dbName
	this.Password = password
	this.Username = username
	this.YcqlAdminPassword = ycqlAdminPassword
	this.YcqlAdminUsername = ycqlAdminUsername
	this.YsqlAdminPassword = ysqlAdminPassword
	this.YsqlAdminUsername = ysqlAdminUsername
	return &this
}

// NewDatabaseUserFormDataWithDefaults instantiates a new DatabaseUserFormData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseUserFormDataWithDefaults() *DatabaseUserFormData {
	this := DatabaseUserFormData{}
	return &this
}

// GetDbName returns the DbName field value
func (o *DatabaseUserFormData) GetDbName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DbName
}

// GetDbNameOk returns a tuple with the DbName field value
// and a boolean to check if the value has been set.
func (o *DatabaseUserFormData) GetDbNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DbName, true
}

// SetDbName sets field value
func (o *DatabaseUserFormData) SetDbName(v string) {
	o.DbName = v
}

// GetPassword returns the Password field value
func (o *DatabaseUserFormData) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *DatabaseUserFormData) GetPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *DatabaseUserFormData) SetPassword(v string) {
	o.Password = v
}

// GetUsername returns the Username field value
func (o *DatabaseUserFormData) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *DatabaseUserFormData) GetUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *DatabaseUserFormData) SetUsername(v string) {
	o.Username = v
}

// GetYcqlAdminPassword returns the YcqlAdminPassword field value
func (o *DatabaseUserFormData) GetYcqlAdminPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.YcqlAdminPassword
}

// GetYcqlAdminPasswordOk returns a tuple with the YcqlAdminPassword field value
// and a boolean to check if the value has been set.
func (o *DatabaseUserFormData) GetYcqlAdminPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.YcqlAdminPassword, true
}

// SetYcqlAdminPassword sets field value
func (o *DatabaseUserFormData) SetYcqlAdminPassword(v string) {
	o.YcqlAdminPassword = v
}

// GetYcqlAdminUsername returns the YcqlAdminUsername field value
func (o *DatabaseUserFormData) GetYcqlAdminUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.YcqlAdminUsername
}

// GetYcqlAdminUsernameOk returns a tuple with the YcqlAdminUsername field value
// and a boolean to check if the value has been set.
func (o *DatabaseUserFormData) GetYcqlAdminUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.YcqlAdminUsername, true
}

// SetYcqlAdminUsername sets field value
func (o *DatabaseUserFormData) SetYcqlAdminUsername(v string) {
	o.YcqlAdminUsername = v
}

// GetYsqlAdminPassword returns the YsqlAdminPassword field value
func (o *DatabaseUserFormData) GetYsqlAdminPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.YsqlAdminPassword
}

// GetYsqlAdminPasswordOk returns a tuple with the YsqlAdminPassword field value
// and a boolean to check if the value has been set.
func (o *DatabaseUserFormData) GetYsqlAdminPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.YsqlAdminPassword, true
}

// SetYsqlAdminPassword sets field value
func (o *DatabaseUserFormData) SetYsqlAdminPassword(v string) {
	o.YsqlAdminPassword = v
}

// GetYsqlAdminUsername returns the YsqlAdminUsername field value
func (o *DatabaseUserFormData) GetYsqlAdminUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.YsqlAdminUsername
}

// GetYsqlAdminUsernameOk returns a tuple with the YsqlAdminUsername field value
// and a boolean to check if the value has been set.
func (o *DatabaseUserFormData) GetYsqlAdminUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.YsqlAdminUsername, true
}

// SetYsqlAdminUsername sets field value
func (o *DatabaseUserFormData) SetYsqlAdminUsername(v string) {
	o.YsqlAdminUsername = v
}

func (o DatabaseUserFormData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["dbName"] = o.DbName
	}
	if true {
		toSerialize["password"] = o.Password
	}
	if true {
		toSerialize["username"] = o.Username
	}
	if true {
		toSerialize["ycqlAdminPassword"] = o.YcqlAdminPassword
	}
	if true {
		toSerialize["ycqlAdminUsername"] = o.YcqlAdminUsername
	}
	if true {
		toSerialize["ysqlAdminPassword"] = o.YsqlAdminPassword
	}
	if true {
		toSerialize["ysqlAdminUsername"] = o.YsqlAdminUsername
	}
	return json.Marshal(toSerialize)
}

type NullableDatabaseUserFormData struct {
	value *DatabaseUserFormData
	isSet bool
}

func (v NullableDatabaseUserFormData) Get() *DatabaseUserFormData {
	return v.value
}

func (v *NullableDatabaseUserFormData) Set(val *DatabaseUserFormData) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseUserFormData) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseUserFormData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseUserFormData(val *DatabaseUserFormData) *NullableDatabaseUserFormData {
	return &NullableDatabaseUserFormData{value: val, isSet: true}
}

func (v NullableDatabaseUserFormData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseUserFormData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


