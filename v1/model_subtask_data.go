/*
 * YugabyteDB Anywhere APIs
 *
 * ALPHA - NOT FOR EXTERNAL USE
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"time"
)

// SubtaskData Detailed subtask data
type SubtaskData struct {
	// Creation time (unix timestamp) of the task
	CreationTime *time.Time `json:"creationTime,omitempty"`
	// WARNING: This is a preview API that could change. Subtask error code
	ErrorCode *string `json:"errorCode,omitempty"`
	// Failed SubTask Error message
	ErrorString *string `json:"errorString,omitempty"`
	// Failed SubTask Group Type
	SubTaskGroupType *string `json:"subTaskGroupType,omitempty"`
	// Failed SubTask State
	SubTaskState *string `json:"subTaskState,omitempty"`
	// Failed SubTask Type
	SubTaskType *string `json:"subTaskType,omitempty"`
	// Failed SubTask UUID
	SubTaskUUID *string `json:"subTaskUUID,omitempty"`
}

// NewSubtaskData instantiates a new SubtaskData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubtaskData() *SubtaskData {
	this := SubtaskData{}
	return &this
}

// NewSubtaskDataWithDefaults instantiates a new SubtaskData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubtaskDataWithDefaults() *SubtaskData {
	this := SubtaskData{}
	return &this
}

// GetCreationTime returns the CreationTime field value if set, zero value otherwise.
func (o *SubtaskData) GetCreationTime() time.Time {
	if o == nil || o.CreationTime == nil {
		var ret time.Time
		return ret
	}
	return *o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubtaskData) GetCreationTimeOk() (*time.Time, bool) {
	if o == nil || o.CreationTime == nil {
		return nil, false
	}
	return o.CreationTime, true
}

// HasCreationTime returns a boolean if a field has been set.
func (o *SubtaskData) HasCreationTime() bool {
	if o != nil && o.CreationTime != nil {
		return true
	}

	return false
}

// SetCreationTime gets a reference to the given time.Time and assigns it to the CreationTime field.
func (o *SubtaskData) SetCreationTime(v time.Time) {
	o.CreationTime = &v
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *SubtaskData) GetErrorCode() string {
	if o == nil || o.ErrorCode == nil {
		var ret string
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubtaskData) GetErrorCodeOk() (*string, bool) {
	if o == nil || o.ErrorCode == nil {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *SubtaskData) HasErrorCode() bool {
	if o != nil && o.ErrorCode != nil {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given string and assigns it to the ErrorCode field.
func (o *SubtaskData) SetErrorCode(v string) {
	o.ErrorCode = &v
}

// GetErrorString returns the ErrorString field value if set, zero value otherwise.
func (o *SubtaskData) GetErrorString() string {
	if o == nil || o.ErrorString == nil {
		var ret string
		return ret
	}
	return *o.ErrorString
}

// GetErrorStringOk returns a tuple with the ErrorString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubtaskData) GetErrorStringOk() (*string, bool) {
	if o == nil || o.ErrorString == nil {
		return nil, false
	}
	return o.ErrorString, true
}

// HasErrorString returns a boolean if a field has been set.
func (o *SubtaskData) HasErrorString() bool {
	if o != nil && o.ErrorString != nil {
		return true
	}

	return false
}

// SetErrorString gets a reference to the given string and assigns it to the ErrorString field.
func (o *SubtaskData) SetErrorString(v string) {
	o.ErrorString = &v
}

// GetSubTaskGroupType returns the SubTaskGroupType field value if set, zero value otherwise.
func (o *SubtaskData) GetSubTaskGroupType() string {
	if o == nil || o.SubTaskGroupType == nil {
		var ret string
		return ret
	}
	return *o.SubTaskGroupType
}

// GetSubTaskGroupTypeOk returns a tuple with the SubTaskGroupType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubtaskData) GetSubTaskGroupTypeOk() (*string, bool) {
	if o == nil || o.SubTaskGroupType == nil {
		return nil, false
	}
	return o.SubTaskGroupType, true
}

// HasSubTaskGroupType returns a boolean if a field has been set.
func (o *SubtaskData) HasSubTaskGroupType() bool {
	if o != nil && o.SubTaskGroupType != nil {
		return true
	}

	return false
}

// SetSubTaskGroupType gets a reference to the given string and assigns it to the SubTaskGroupType field.
func (o *SubtaskData) SetSubTaskGroupType(v string) {
	o.SubTaskGroupType = &v
}

// GetSubTaskState returns the SubTaskState field value if set, zero value otherwise.
func (o *SubtaskData) GetSubTaskState() string {
	if o == nil || o.SubTaskState == nil {
		var ret string
		return ret
	}
	return *o.SubTaskState
}

// GetSubTaskStateOk returns a tuple with the SubTaskState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubtaskData) GetSubTaskStateOk() (*string, bool) {
	if o == nil || o.SubTaskState == nil {
		return nil, false
	}
	return o.SubTaskState, true
}

// HasSubTaskState returns a boolean if a field has been set.
func (o *SubtaskData) HasSubTaskState() bool {
	if o != nil && o.SubTaskState != nil {
		return true
	}

	return false
}

// SetSubTaskState gets a reference to the given string and assigns it to the SubTaskState field.
func (o *SubtaskData) SetSubTaskState(v string) {
	o.SubTaskState = &v
}

// GetSubTaskType returns the SubTaskType field value if set, zero value otherwise.
func (o *SubtaskData) GetSubTaskType() string {
	if o == nil || o.SubTaskType == nil {
		var ret string
		return ret
	}
	return *o.SubTaskType
}

// GetSubTaskTypeOk returns a tuple with the SubTaskType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubtaskData) GetSubTaskTypeOk() (*string, bool) {
	if o == nil || o.SubTaskType == nil {
		return nil, false
	}
	return o.SubTaskType, true
}

// HasSubTaskType returns a boolean if a field has been set.
func (o *SubtaskData) HasSubTaskType() bool {
	if o != nil && o.SubTaskType != nil {
		return true
	}

	return false
}

// SetSubTaskType gets a reference to the given string and assigns it to the SubTaskType field.
func (o *SubtaskData) SetSubTaskType(v string) {
	o.SubTaskType = &v
}

// GetSubTaskUUID returns the SubTaskUUID field value if set, zero value otherwise.
func (o *SubtaskData) GetSubTaskUUID() string {
	if o == nil || o.SubTaskUUID == nil {
		var ret string
		return ret
	}
	return *o.SubTaskUUID
}

// GetSubTaskUUIDOk returns a tuple with the SubTaskUUID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubtaskData) GetSubTaskUUIDOk() (*string, bool) {
	if o == nil || o.SubTaskUUID == nil {
		return nil, false
	}
	return o.SubTaskUUID, true
}

// HasSubTaskUUID returns a boolean if a field has been set.
func (o *SubtaskData) HasSubTaskUUID() bool {
	if o != nil && o.SubTaskUUID != nil {
		return true
	}

	return false
}

// SetSubTaskUUID gets a reference to the given string and assigns it to the SubTaskUUID field.
func (o *SubtaskData) SetSubTaskUUID(v string) {
	o.SubTaskUUID = &v
}

func (o SubtaskData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreationTime != nil {
		toSerialize["creationTime"] = o.CreationTime
	}
	if o.ErrorCode != nil {
		toSerialize["errorCode"] = o.ErrorCode
	}
	if o.ErrorString != nil {
		toSerialize["errorString"] = o.ErrorString
	}
	if o.SubTaskGroupType != nil {
		toSerialize["subTaskGroupType"] = o.SubTaskGroupType
	}
	if o.SubTaskState != nil {
		toSerialize["subTaskState"] = o.SubTaskState
	}
	if o.SubTaskType != nil {
		toSerialize["subTaskType"] = o.SubTaskType
	}
	if o.SubTaskUUID != nil {
		toSerialize["subTaskUUID"] = o.SubTaskUUID
	}
	return json.Marshal(toSerialize)
}

type NullableSubtaskData struct {
	value *SubtaskData
	isSet bool
}

func (v NullableSubtaskData) Get() *SubtaskData {
	return v.value
}

func (v *NullableSubtaskData) Set(val *SubtaskData) {
	v.value = val
	v.isSet = true
}

func (v NullableSubtaskData) IsSet() bool {
	return v.isSet
}

func (v *NullableSubtaskData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubtaskData(val *SubtaskData) *NullableSubtaskData {
	return &NullableSubtaskData{value: val, isSet: true}
}

func (v NullableSubtaskData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubtaskData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


