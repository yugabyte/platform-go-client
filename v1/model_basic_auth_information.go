/*
 * YugabyteDB Anywhere APIs
 *
 * ALPHA - NOT FOR EXTERNAL USE
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// BasicAuthInformation struct for BasicAuthInformation
type BasicAuthInformation struct {
	HTTPAuthInformation
	// Password
	Password *string `json:"password,omitempty"`
	// Username
	Username *string `json:"username,omitempty"`
}

// NewBasicAuthInformation instantiates a new BasicAuthInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBasicAuthInformation() *BasicAuthInformation {
	this := BasicAuthInformation{}
	return &this
}

// NewBasicAuthInformationWithDefaults instantiates a new BasicAuthInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBasicAuthInformationWithDefaults() *BasicAuthInformation {
	this := BasicAuthInformation{}
	return &this
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *BasicAuthInformation) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicAuthInformation) GetPasswordOk() (*string, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *BasicAuthInformation) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *BasicAuthInformation) SetPassword(v string) {
	o.Password = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *BasicAuthInformation) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicAuthInformation) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *BasicAuthInformation) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *BasicAuthInformation) SetUsername(v string) {
	o.Username = &v
}

func (o BasicAuthInformation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedHTTPAuthInformation, errHTTPAuthInformation := json.Marshal(o.HTTPAuthInformation)
	if errHTTPAuthInformation != nil {
		return []byte{}, errHTTPAuthInformation
	}
	errHTTPAuthInformation = json.Unmarshal([]byte(serializedHTTPAuthInformation), &toSerialize)
	if errHTTPAuthInformation != nil {
		return []byte{}, errHTTPAuthInformation
	}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	return json.Marshal(toSerialize)
}

type NullableBasicAuthInformation struct {
	value *BasicAuthInformation
	isSet bool
}

func (v NullableBasicAuthInformation) Get() *BasicAuthInformation {
	return v.value
}

func (v *NullableBasicAuthInformation) Set(val *BasicAuthInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableBasicAuthInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableBasicAuthInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBasicAuthInformation(val *BasicAuthInformation) *NullableBasicAuthInformation {
	return &NullableBasicAuthInformation{value: val, isSet: true}
}

func (v NullableBasicAuthInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBasicAuthInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


