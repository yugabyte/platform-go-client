/*
 * YugabyteDB Anywhere APIs
 *
 * ALPHA - NOT FOR EXTERNAL USE
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// YBPError Generic error response from the YugabyteDB Anywhere API
type YBPError struct {
	// User-visible unstructured error message
	Error *string `json:"error,omitempty"`
	// User visible structured error message as json object
	ErrorJson *map[string]interface{} `json:"errorJson,omitempty"`
	// Method for HTTP call that resulted in this error
	HttpMethod *string `json:"httpMethod,omitempty"`
	// User request JSON object
	RequestJson *map[string]interface{} `json:"requestJson,omitempty"`
	// URI for HTTP request that resulted in this error
	RequestUri *string `json:"requestUri,omitempty"`
	// Always set to false to indicate failure
	Success *bool `json:"success,omitempty"`
}

// NewYBPError instantiates a new YBPError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewYBPError() *YBPError {
	this := YBPError{}
	return &this
}

// NewYBPErrorWithDefaults instantiates a new YBPError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewYBPErrorWithDefaults() *YBPError {
	this := YBPError{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *YBPError) GetError() string {
	if o == nil || o.Error == nil {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *YBPError) GetErrorOk() (*string, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *YBPError) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *YBPError) SetError(v string) {
	o.Error = &v
}

// GetErrorJson returns the ErrorJson field value if set, zero value otherwise.
func (o *YBPError) GetErrorJson() map[string]interface{} {
	if o == nil || o.ErrorJson == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.ErrorJson
}

// GetErrorJsonOk returns a tuple with the ErrorJson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *YBPError) GetErrorJsonOk() (*map[string]interface{}, bool) {
	if o == nil || o.ErrorJson == nil {
		return nil, false
	}
	return o.ErrorJson, true
}

// HasErrorJson returns a boolean if a field has been set.
func (o *YBPError) HasErrorJson() bool {
	if o != nil && o.ErrorJson != nil {
		return true
	}

	return false
}

// SetErrorJson gets a reference to the given map[string]interface{} and assigns it to the ErrorJson field.
func (o *YBPError) SetErrorJson(v map[string]interface{}) {
	o.ErrorJson = &v
}

// GetHttpMethod returns the HttpMethod field value if set, zero value otherwise.
func (o *YBPError) GetHttpMethod() string {
	if o == nil || o.HttpMethod == nil {
		var ret string
		return ret
	}
	return *o.HttpMethod
}

// GetHttpMethodOk returns a tuple with the HttpMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *YBPError) GetHttpMethodOk() (*string, bool) {
	if o == nil || o.HttpMethod == nil {
		return nil, false
	}
	return o.HttpMethod, true
}

// HasHttpMethod returns a boolean if a field has been set.
func (o *YBPError) HasHttpMethod() bool {
	if o != nil && o.HttpMethod != nil {
		return true
	}

	return false
}

// SetHttpMethod gets a reference to the given string and assigns it to the HttpMethod field.
func (o *YBPError) SetHttpMethod(v string) {
	o.HttpMethod = &v
}

// GetRequestJson returns the RequestJson field value if set, zero value otherwise.
func (o *YBPError) GetRequestJson() map[string]interface{} {
	if o == nil || o.RequestJson == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.RequestJson
}

// GetRequestJsonOk returns a tuple with the RequestJson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *YBPError) GetRequestJsonOk() (*map[string]interface{}, bool) {
	if o == nil || o.RequestJson == nil {
		return nil, false
	}
	return o.RequestJson, true
}

// HasRequestJson returns a boolean if a field has been set.
func (o *YBPError) HasRequestJson() bool {
	if o != nil && o.RequestJson != nil {
		return true
	}

	return false
}

// SetRequestJson gets a reference to the given map[string]interface{} and assigns it to the RequestJson field.
func (o *YBPError) SetRequestJson(v map[string]interface{}) {
	o.RequestJson = &v
}

// GetRequestUri returns the RequestUri field value if set, zero value otherwise.
func (o *YBPError) GetRequestUri() string {
	if o == nil || o.RequestUri == nil {
		var ret string
		return ret
	}
	return *o.RequestUri
}

// GetRequestUriOk returns a tuple with the RequestUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *YBPError) GetRequestUriOk() (*string, bool) {
	if o == nil || o.RequestUri == nil {
		return nil, false
	}
	return o.RequestUri, true
}

// HasRequestUri returns a boolean if a field has been set.
func (o *YBPError) HasRequestUri() bool {
	if o != nil && o.RequestUri != nil {
		return true
	}

	return false
}

// SetRequestUri gets a reference to the given string and assigns it to the RequestUri field.
func (o *YBPError) SetRequestUri(v string) {
	o.RequestUri = &v
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *YBPError) GetSuccess() bool {
	if o == nil || o.Success == nil {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *YBPError) GetSuccessOk() (*bool, bool) {
	if o == nil || o.Success == nil {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *YBPError) HasSuccess() bool {
	if o != nil && o.Success != nil {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *YBPError) SetSuccess(v bool) {
	o.Success = &v
}

func (o YBPError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if o.ErrorJson != nil {
		toSerialize["errorJson"] = o.ErrorJson
	}
	if o.HttpMethod != nil {
		toSerialize["httpMethod"] = o.HttpMethod
	}
	if o.RequestJson != nil {
		toSerialize["requestJson"] = o.RequestJson
	}
	if o.RequestUri != nil {
		toSerialize["requestUri"] = o.RequestUri
	}
	if o.Success != nil {
		toSerialize["success"] = o.Success
	}
	return json.Marshal(toSerialize)
}

type NullableYBPError struct {
	value *YBPError
	isSet bool
}

func (v NullableYBPError) Get() *YBPError {
	return v.value
}

func (v *NullableYBPError) Set(val *YBPError) {
	v.value = val
	v.isSet = true
}

func (v NullableYBPError) IsSet() bool {
	return v.isSet
}

func (v *NullableYBPError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableYBPError(val *YBPError) *NullableYBPError {
	return &NullableYBPError{value: val, isSet: true}
}

func (v NullableYBPError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableYBPError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


