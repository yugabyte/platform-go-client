/*
 * YugabyteDB Anywhere APIs
 *
 * ALPHA - NOT FOR EXTERNAL USE
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// NamespaceInfoResp Namespace information response
type NamespaceInfoResp struct {
	// Namespace name
	Name *string `json:"name,omitempty"`
	// Namespace UUID
	NamespaceUUID *string `json:"namespaceUUID,omitempty"`
	// Table type
	TableType *string `json:"tableType,omitempty"`
}

// NewNamespaceInfoResp instantiates a new NamespaceInfoResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNamespaceInfoResp() *NamespaceInfoResp {
	this := NamespaceInfoResp{}
	return &this
}

// NewNamespaceInfoRespWithDefaults instantiates a new NamespaceInfoResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNamespaceInfoRespWithDefaults() *NamespaceInfoResp {
	this := NamespaceInfoResp{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NamespaceInfoResp) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceInfoResp) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NamespaceInfoResp) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NamespaceInfoResp) SetName(v string) {
	o.Name = &v
}

// GetNamespaceUUID returns the NamespaceUUID field value if set, zero value otherwise.
func (o *NamespaceInfoResp) GetNamespaceUUID() string {
	if o == nil || o.NamespaceUUID == nil {
		var ret string
		return ret
	}
	return *o.NamespaceUUID
}

// GetNamespaceUUIDOk returns a tuple with the NamespaceUUID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceInfoResp) GetNamespaceUUIDOk() (*string, bool) {
	if o == nil || o.NamespaceUUID == nil {
		return nil, false
	}
	return o.NamespaceUUID, true
}

// HasNamespaceUUID returns a boolean if a field has been set.
func (o *NamespaceInfoResp) HasNamespaceUUID() bool {
	if o != nil && o.NamespaceUUID != nil {
		return true
	}

	return false
}

// SetNamespaceUUID gets a reference to the given string and assigns it to the NamespaceUUID field.
func (o *NamespaceInfoResp) SetNamespaceUUID(v string) {
	o.NamespaceUUID = &v
}

// GetTableType returns the TableType field value if set, zero value otherwise.
func (o *NamespaceInfoResp) GetTableType() string {
	if o == nil || o.TableType == nil {
		var ret string
		return ret
	}
	return *o.TableType
}

// GetTableTypeOk returns a tuple with the TableType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceInfoResp) GetTableTypeOk() (*string, bool) {
	if o == nil || o.TableType == nil {
		return nil, false
	}
	return o.TableType, true
}

// HasTableType returns a boolean if a field has been set.
func (o *NamespaceInfoResp) HasTableType() bool {
	if o != nil && o.TableType != nil {
		return true
	}

	return false
}

// SetTableType gets a reference to the given string and assigns it to the TableType field.
func (o *NamespaceInfoResp) SetTableType(v string) {
	o.TableType = &v
}

func (o NamespaceInfoResp) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.NamespaceUUID != nil {
		toSerialize["namespaceUUID"] = o.NamespaceUUID
	}
	if o.TableType != nil {
		toSerialize["tableType"] = o.TableType
	}
	return json.Marshal(toSerialize)
}

type NullableNamespaceInfoResp struct {
	value *NamespaceInfoResp
	isSet bool
}

func (v NullableNamespaceInfoResp) Get() *NamespaceInfoResp {
	return v.value
}

func (v *NullableNamespaceInfoResp) Set(val *NamespaceInfoResp) {
	v.value = val
	v.isSet = true
}

func (v NullableNamespaceInfoResp) IsSet() bool {
	return v.isSet
}

func (v *NullableNamespaceInfoResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNamespaceInfoResp(val *NamespaceInfoResp) *NullableNamespaceInfoResp {
	return &NullableNamespaceInfoResp{value: val, isSet: true}
}

func (v NullableNamespaceInfoResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNamespaceInfoResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


