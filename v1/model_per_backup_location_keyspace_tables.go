/*
 * YugabyteDB Anywhere APIs
 *
 * ALPHA - NOT FOR EXTERNAL USE
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// PerBackupLocationKeyspaceTables struct for PerBackupLocationKeyspaceTables
type PerBackupLocationKeyspaceTables struct {
	// Original keyspace name
	OriginalKeyspace *string `json:"originalKeyspace,omitempty"`
	// List of parent tables associated with the keyspace
	TableNameList *[]string `json:"tableNameList,omitempty"`
}

// NewPerBackupLocationKeyspaceTables instantiates a new PerBackupLocationKeyspaceTables object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPerBackupLocationKeyspaceTables() *PerBackupLocationKeyspaceTables {
	this := PerBackupLocationKeyspaceTables{}
	return &this
}

// NewPerBackupLocationKeyspaceTablesWithDefaults instantiates a new PerBackupLocationKeyspaceTables object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPerBackupLocationKeyspaceTablesWithDefaults() *PerBackupLocationKeyspaceTables {
	this := PerBackupLocationKeyspaceTables{}
	return &this
}

// GetOriginalKeyspace returns the OriginalKeyspace field value if set, zero value otherwise.
func (o *PerBackupLocationKeyspaceTables) GetOriginalKeyspace() string {
	if o == nil || o.OriginalKeyspace == nil {
		var ret string
		return ret
	}
	return *o.OriginalKeyspace
}

// GetOriginalKeyspaceOk returns a tuple with the OriginalKeyspace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PerBackupLocationKeyspaceTables) GetOriginalKeyspaceOk() (*string, bool) {
	if o == nil || o.OriginalKeyspace == nil {
		return nil, false
	}
	return o.OriginalKeyspace, true
}

// HasOriginalKeyspace returns a boolean if a field has been set.
func (o *PerBackupLocationKeyspaceTables) HasOriginalKeyspace() bool {
	if o != nil && o.OriginalKeyspace != nil {
		return true
	}

	return false
}

// SetOriginalKeyspace gets a reference to the given string and assigns it to the OriginalKeyspace field.
func (o *PerBackupLocationKeyspaceTables) SetOriginalKeyspace(v string) {
	o.OriginalKeyspace = &v
}

// GetTableNameList returns the TableNameList field value if set, zero value otherwise.
func (o *PerBackupLocationKeyspaceTables) GetTableNameList() []string {
	if o == nil || o.TableNameList == nil {
		var ret []string
		return ret
	}
	return *o.TableNameList
}

// GetTableNameListOk returns a tuple with the TableNameList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PerBackupLocationKeyspaceTables) GetTableNameListOk() (*[]string, bool) {
	if o == nil || o.TableNameList == nil {
		return nil, false
	}
	return o.TableNameList, true
}

// HasTableNameList returns a boolean if a field has been set.
func (o *PerBackupLocationKeyspaceTables) HasTableNameList() bool {
	if o != nil && o.TableNameList != nil {
		return true
	}

	return false
}

// SetTableNameList gets a reference to the given []string and assigns it to the TableNameList field.
func (o *PerBackupLocationKeyspaceTables) SetTableNameList(v []string) {
	o.TableNameList = &v
}

func (o PerBackupLocationKeyspaceTables) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.OriginalKeyspace != nil {
		toSerialize["originalKeyspace"] = o.OriginalKeyspace
	}
	if o.TableNameList != nil {
		toSerialize["tableNameList"] = o.TableNameList
	}
	return json.Marshal(toSerialize)
}

type NullablePerBackupLocationKeyspaceTables struct {
	value *PerBackupLocationKeyspaceTables
	isSet bool
}

func (v NullablePerBackupLocationKeyspaceTables) Get() *PerBackupLocationKeyspaceTables {
	return v.value
}

func (v *NullablePerBackupLocationKeyspaceTables) Set(val *PerBackupLocationKeyspaceTables) {
	v.value = val
	v.isSet = true
}

func (v NullablePerBackupLocationKeyspaceTables) IsSet() bool {
	return v.isSet
}

func (v *NullablePerBackupLocationKeyspaceTables) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePerBackupLocationKeyspaceTables(val *PerBackupLocationKeyspaceTables) *NullablePerBackupLocationKeyspaceTables {
	return &NullablePerBackupLocationKeyspaceTables{value: val, isSet: true}
}

func (v NullablePerBackupLocationKeyspaceTables) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePerBackupLocationKeyspaceTables) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


