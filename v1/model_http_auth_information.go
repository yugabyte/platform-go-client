/*
 * YugabyteDB Anywhere APIs
 *
 * ALPHA - NOT FOR EXTERNAL USE
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// HTTPAuthInformation struct for HTTPAuthInformation
type HTTPAuthInformation struct {
	// HTTP Auth type
	Type *string `json:"type,omitempty"`
}

// NewHTTPAuthInformation instantiates a new HTTPAuthInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHTTPAuthInformation() *HTTPAuthInformation {
	this := HTTPAuthInformation{}
	return &this
}

// NewHTTPAuthInformationWithDefaults instantiates a new HTTPAuthInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHTTPAuthInformationWithDefaults() *HTTPAuthInformation {
	this := HTTPAuthInformation{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *HTTPAuthInformation) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HTTPAuthInformation) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *HTTPAuthInformation) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *HTTPAuthInformation) SetType(v string) {
	o.Type = &v
}

func (o HTTPAuthInformation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableHTTPAuthInformation struct {
	value *HTTPAuthInformation
	isSet bool
}

func (v NullableHTTPAuthInformation) Get() *HTTPAuthInformation {
	return v.value
}

func (v *NullableHTTPAuthInformation) Set(val *HTTPAuthInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableHTTPAuthInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableHTTPAuthInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHTTPAuthInformation(val *HTTPAuthInformation) *NullableHTTPAuthInformation {
	return &NullableHTTPAuthInformation{value: val, isSet: true}
}

func (v NullableHTTPAuthInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHTTPAuthInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


