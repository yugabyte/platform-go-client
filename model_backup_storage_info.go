/*
 * YugabyteDB Anywhere APIs
 *
 * ALPHA - NOT FOR EXTERNAL USE
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ywclient

import (
	"encoding/json"
)

// BackupStorageInfo Backup Storage Info for doing restore operation
type BackupStorageInfo struct {
	// Backup type
	BackupType *string `json:"backupType,omitempty"`
	// WARNING: This is a preview API that could change. Ignore all restore errors
	IgnoreErrors *bool `json:"ignoreErrors,omitempty"`
	// Keyspace name
	Keyspace *string `json:"keyspace,omitempty"`
	// User name of the new tables owner
	NewOwner *string `json:"newOwner,omitempty"`
	// User name of the current tables owner
	OldOwner *string `json:"oldOwner,omitempty"`
	// Only restore selected tables instead of restoring all tables in backup
	SelectiveTableRestore *bool `json:"selectiveTableRestore,omitempty"`
	// Is SSE
	Sse *bool `json:"sse,omitempty"`
	// Storage location
	StorageLocation *string `json:"storageLocation,omitempty"`
	// Tables
	TableNameList *[]string `json:"tableNameList,omitempty"`
	// Use tablespaces during restore
	UseTablespaces *bool `json:"useTablespaces,omitempty"`
}

// NewBackupStorageInfo instantiates a new BackupStorageInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupStorageInfo() *BackupStorageInfo {
	this := BackupStorageInfo{}
	return &this
}

// NewBackupStorageInfoWithDefaults instantiates a new BackupStorageInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupStorageInfoWithDefaults() *BackupStorageInfo {
	this := BackupStorageInfo{}
	return &this
}

// GetBackupType returns the BackupType field value if set, zero value otherwise.
func (o *BackupStorageInfo) GetBackupType() string {
	if o == nil || o.BackupType == nil {
		var ret string
		return ret
	}
	return *o.BackupType
}

// GetBackupTypeOk returns a tuple with the BackupType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupStorageInfo) GetBackupTypeOk() (*string, bool) {
	if o == nil || o.BackupType == nil {
		return nil, false
	}
	return o.BackupType, true
}

// HasBackupType returns a boolean if a field has been set.
func (o *BackupStorageInfo) HasBackupType() bool {
	if o != nil && o.BackupType != nil {
		return true
	}

	return false
}

// SetBackupType gets a reference to the given string and assigns it to the BackupType field.
func (o *BackupStorageInfo) SetBackupType(v string) {
	o.BackupType = &v
}

// GetIgnoreErrors returns the IgnoreErrors field value if set, zero value otherwise.
func (o *BackupStorageInfo) GetIgnoreErrors() bool {
	if o == nil || o.IgnoreErrors == nil {
		var ret bool
		return ret
	}
	return *o.IgnoreErrors
}

// GetIgnoreErrorsOk returns a tuple with the IgnoreErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupStorageInfo) GetIgnoreErrorsOk() (*bool, bool) {
	if o == nil || o.IgnoreErrors == nil {
		return nil, false
	}
	return o.IgnoreErrors, true
}

// HasIgnoreErrors returns a boolean if a field has been set.
func (o *BackupStorageInfo) HasIgnoreErrors() bool {
	if o != nil && o.IgnoreErrors != nil {
		return true
	}

	return false
}

// SetIgnoreErrors gets a reference to the given bool and assigns it to the IgnoreErrors field.
func (o *BackupStorageInfo) SetIgnoreErrors(v bool) {
	o.IgnoreErrors = &v
}

// GetKeyspace returns the Keyspace field value if set, zero value otherwise.
func (o *BackupStorageInfo) GetKeyspace() string {
	if o == nil || o.Keyspace == nil {
		var ret string
		return ret
	}
	return *o.Keyspace
}

// GetKeyspaceOk returns a tuple with the Keyspace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupStorageInfo) GetKeyspaceOk() (*string, bool) {
	if o == nil || o.Keyspace == nil {
		return nil, false
	}
	return o.Keyspace, true
}

// HasKeyspace returns a boolean if a field has been set.
func (o *BackupStorageInfo) HasKeyspace() bool {
	if o != nil && o.Keyspace != nil {
		return true
	}

	return false
}

// SetKeyspace gets a reference to the given string and assigns it to the Keyspace field.
func (o *BackupStorageInfo) SetKeyspace(v string) {
	o.Keyspace = &v
}

// GetNewOwner returns the NewOwner field value if set, zero value otherwise.
func (o *BackupStorageInfo) GetNewOwner() string {
	if o == nil || o.NewOwner == nil {
		var ret string
		return ret
	}
	return *o.NewOwner
}

// GetNewOwnerOk returns a tuple with the NewOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupStorageInfo) GetNewOwnerOk() (*string, bool) {
	if o == nil || o.NewOwner == nil {
		return nil, false
	}
	return o.NewOwner, true
}

// HasNewOwner returns a boolean if a field has been set.
func (o *BackupStorageInfo) HasNewOwner() bool {
	if o != nil && o.NewOwner != nil {
		return true
	}

	return false
}

// SetNewOwner gets a reference to the given string and assigns it to the NewOwner field.
func (o *BackupStorageInfo) SetNewOwner(v string) {
	o.NewOwner = &v
}

// GetOldOwner returns the OldOwner field value if set, zero value otherwise.
func (o *BackupStorageInfo) GetOldOwner() string {
	if o == nil || o.OldOwner == nil {
		var ret string
		return ret
	}
	return *o.OldOwner
}

// GetOldOwnerOk returns a tuple with the OldOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupStorageInfo) GetOldOwnerOk() (*string, bool) {
	if o == nil || o.OldOwner == nil {
		return nil, false
	}
	return o.OldOwner, true
}

// HasOldOwner returns a boolean if a field has been set.
func (o *BackupStorageInfo) HasOldOwner() bool {
	if o != nil && o.OldOwner != nil {
		return true
	}

	return false
}

// SetOldOwner gets a reference to the given string and assigns it to the OldOwner field.
func (o *BackupStorageInfo) SetOldOwner(v string) {
	o.OldOwner = &v
}

// GetSelectiveTableRestore returns the SelectiveTableRestore field value if set, zero value otherwise.
func (o *BackupStorageInfo) GetSelectiveTableRestore() bool {
	if o == nil || o.SelectiveTableRestore == nil {
		var ret bool
		return ret
	}
	return *o.SelectiveTableRestore
}

// GetSelectiveTableRestoreOk returns a tuple with the SelectiveTableRestore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupStorageInfo) GetSelectiveTableRestoreOk() (*bool, bool) {
	if o == nil || o.SelectiveTableRestore == nil {
		return nil, false
	}
	return o.SelectiveTableRestore, true
}

// HasSelectiveTableRestore returns a boolean if a field has been set.
func (o *BackupStorageInfo) HasSelectiveTableRestore() bool {
	if o != nil && o.SelectiveTableRestore != nil {
		return true
	}

	return false
}

// SetSelectiveTableRestore gets a reference to the given bool and assigns it to the SelectiveTableRestore field.
func (o *BackupStorageInfo) SetSelectiveTableRestore(v bool) {
	o.SelectiveTableRestore = &v
}

// GetSse returns the Sse field value if set, zero value otherwise.
func (o *BackupStorageInfo) GetSse() bool {
	if o == nil || o.Sse == nil {
		var ret bool
		return ret
	}
	return *o.Sse
}

// GetSseOk returns a tuple with the Sse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupStorageInfo) GetSseOk() (*bool, bool) {
	if o == nil || o.Sse == nil {
		return nil, false
	}
	return o.Sse, true
}

// HasSse returns a boolean if a field has been set.
func (o *BackupStorageInfo) HasSse() bool {
	if o != nil && o.Sse != nil {
		return true
	}

	return false
}

// SetSse gets a reference to the given bool and assigns it to the Sse field.
func (o *BackupStorageInfo) SetSse(v bool) {
	o.Sse = &v
}

// GetStorageLocation returns the StorageLocation field value if set, zero value otherwise.
func (o *BackupStorageInfo) GetStorageLocation() string {
	if o == nil || o.StorageLocation == nil {
		var ret string
		return ret
	}
	return *o.StorageLocation
}

// GetStorageLocationOk returns a tuple with the StorageLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupStorageInfo) GetStorageLocationOk() (*string, bool) {
	if o == nil || o.StorageLocation == nil {
		return nil, false
	}
	return o.StorageLocation, true
}

// HasStorageLocation returns a boolean if a field has been set.
func (o *BackupStorageInfo) HasStorageLocation() bool {
	if o != nil && o.StorageLocation != nil {
		return true
	}

	return false
}

// SetStorageLocation gets a reference to the given string and assigns it to the StorageLocation field.
func (o *BackupStorageInfo) SetStorageLocation(v string) {
	o.StorageLocation = &v
}

// GetTableNameList returns the TableNameList field value if set, zero value otherwise.
func (o *BackupStorageInfo) GetTableNameList() []string {
	if o == nil || o.TableNameList == nil {
		var ret []string
		return ret
	}
	return *o.TableNameList
}

// GetTableNameListOk returns a tuple with the TableNameList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupStorageInfo) GetTableNameListOk() (*[]string, bool) {
	if o == nil || o.TableNameList == nil {
		return nil, false
	}
	return o.TableNameList, true
}

// HasTableNameList returns a boolean if a field has been set.
func (o *BackupStorageInfo) HasTableNameList() bool {
	if o != nil && o.TableNameList != nil {
		return true
	}

	return false
}

// SetTableNameList gets a reference to the given []string and assigns it to the TableNameList field.
func (o *BackupStorageInfo) SetTableNameList(v []string) {
	o.TableNameList = &v
}

// GetUseTablespaces returns the UseTablespaces field value if set, zero value otherwise.
func (o *BackupStorageInfo) GetUseTablespaces() bool {
	if o == nil || o.UseTablespaces == nil {
		var ret bool
		return ret
	}
	return *o.UseTablespaces
}

// GetUseTablespacesOk returns a tuple with the UseTablespaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupStorageInfo) GetUseTablespacesOk() (*bool, bool) {
	if o == nil || o.UseTablespaces == nil {
		return nil, false
	}
	return o.UseTablespaces, true
}

// HasUseTablespaces returns a boolean if a field has been set.
func (o *BackupStorageInfo) HasUseTablespaces() bool {
	if o != nil && o.UseTablespaces != nil {
		return true
	}

	return false
}

// SetUseTablespaces gets a reference to the given bool and assigns it to the UseTablespaces field.
func (o *BackupStorageInfo) SetUseTablespaces(v bool) {
	o.UseTablespaces = &v
}

func (o BackupStorageInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BackupType != nil {
		toSerialize["backupType"] = o.BackupType
	}
	if o.IgnoreErrors != nil {
		toSerialize["ignoreErrors"] = o.IgnoreErrors
	}
	if o.Keyspace != nil {
		toSerialize["keyspace"] = o.Keyspace
	}
	if o.NewOwner != nil {
		toSerialize["newOwner"] = o.NewOwner
	}
	if o.OldOwner != nil {
		toSerialize["oldOwner"] = o.OldOwner
	}
	if o.SelectiveTableRestore != nil {
		toSerialize["selectiveTableRestore"] = o.SelectiveTableRestore
	}
	if o.Sse != nil {
		toSerialize["sse"] = o.Sse
	}
	if o.StorageLocation != nil {
		toSerialize["storageLocation"] = o.StorageLocation
	}
	if o.TableNameList != nil {
		toSerialize["tableNameList"] = o.TableNameList
	}
	if o.UseTablespaces != nil {
		toSerialize["useTablespaces"] = o.UseTablespaces
	}
	return json.Marshal(toSerialize)
}

type NullableBackupStorageInfo struct {
	value *BackupStorageInfo
	isSet bool
}

func (v NullableBackupStorageInfo) Get() *BackupStorageInfo {
	return v.value
}

func (v *NullableBackupStorageInfo) Set(val *BackupStorageInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupStorageInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupStorageInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupStorageInfo(val *BackupStorageInfo) *NullableBackupStorageInfo {
	return &NullableBackupStorageInfo{value: val, isSet: true}
}

func (v NullableBackupStorageInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupStorageInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


