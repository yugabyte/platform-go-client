/*
 * YugabyteDB Anywhere APIs
 *
 * ALPHA - NOT FOR EXTERNAL USE
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ywclient

import (
	"encoding/json"
)

// KeyspaceTables struct for KeyspaceTables
type KeyspaceTables struct {
	// Keyspace
	Keyspace *string `json:"keyspace,omitempty"`
	// Tables
	TableNames *[]string `json:"tableNames,omitempty"`
}

// NewKeyspaceTables instantiates a new KeyspaceTables object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyspaceTables() *KeyspaceTables {
	this := KeyspaceTables{}
	return &this
}

// NewKeyspaceTablesWithDefaults instantiates a new KeyspaceTables object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyspaceTablesWithDefaults() *KeyspaceTables {
	this := KeyspaceTables{}
	return &this
}

// GetKeyspace returns the Keyspace field value if set, zero value otherwise.
func (o *KeyspaceTables) GetKeyspace() string {
	if o == nil || o.Keyspace == nil {
		var ret string
		return ret
	}
	return *o.Keyspace
}

// GetKeyspaceOk returns a tuple with the Keyspace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyspaceTables) GetKeyspaceOk() (*string, bool) {
	if o == nil || o.Keyspace == nil {
		return nil, false
	}
	return o.Keyspace, true
}

// HasKeyspace returns a boolean if a field has been set.
func (o *KeyspaceTables) HasKeyspace() bool {
	if o != nil && o.Keyspace != nil {
		return true
	}

	return false
}

// SetKeyspace gets a reference to the given string and assigns it to the Keyspace field.
func (o *KeyspaceTables) SetKeyspace(v string) {
	o.Keyspace = &v
}

// GetTableNames returns the TableNames field value if set, zero value otherwise.
func (o *KeyspaceTables) GetTableNames() []string {
	if o == nil || o.TableNames == nil {
		var ret []string
		return ret
	}
	return *o.TableNames
}

// GetTableNamesOk returns a tuple with the TableNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyspaceTables) GetTableNamesOk() (*[]string, bool) {
	if o == nil || o.TableNames == nil {
		return nil, false
	}
	return o.TableNames, true
}

// HasTableNames returns a boolean if a field has been set.
func (o *KeyspaceTables) HasTableNames() bool {
	if o != nil && o.TableNames != nil {
		return true
	}

	return false
}

// SetTableNames gets a reference to the given []string and assigns it to the TableNames field.
func (o *KeyspaceTables) SetTableNames(v []string) {
	o.TableNames = &v
}

func (o KeyspaceTables) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Keyspace != nil {
		toSerialize["keyspace"] = o.Keyspace
	}
	if o.TableNames != nil {
		toSerialize["tableNames"] = o.TableNames
	}
	return json.Marshal(toSerialize)
}

type NullableKeyspaceTables struct {
	value *KeyspaceTables
	isSet bool
}

func (v NullableKeyspaceTables) Get() *KeyspaceTables {
	return v.value
}

func (v *NullableKeyspaceTables) Set(val *KeyspaceTables) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyspaceTables) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyspaceTables) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyspaceTables(val *KeyspaceTables) *NullableKeyspaceTables {
	return &NullableKeyspaceTables{value: val, isSet: true}
}

func (v NullableKeyspaceTables) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyspaceTables) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


