/*
 * Yugabyte Platform APIs
 *
 * ALPHA - NOT FOR EXTERNAL USE
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package yb_platform_client

import (
	"encoding/json"
)

// DeviceInfo Device information
type DeviceInfo struct {
	// Desired IOPS for the volumes mounted on this instance
	DiskIops *int32 `json:"diskIops,omitempty"`
	// Comma-separated list of mount points for the devices in each instance
	MountPoints *string `json:"mountPoints,omitempty"`
	// Number of volumes to be mounted on this instance at the default path
	NumVolumes *int32 `json:"numVolumes,omitempty"`
	// Name of the storage class
	StorageClass *string `json:"storageClass,omitempty"`
	// Storage type used for this instance
	StorageType *string `json:"storageType,omitempty"`
	// Desired throughput for the volumes mounted on this instance
	Throughput *int32 `json:"throughput,omitempty"`
	// The size of each volume in each instance
	VolumeSize *int32 `json:"volumeSize,omitempty"`
}

// NewDeviceInfo instantiates a new DeviceInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceInfo() *DeviceInfo {
	this := DeviceInfo{}
	return &this
}

// NewDeviceInfoWithDefaults instantiates a new DeviceInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceInfoWithDefaults() *DeviceInfo {
	this := DeviceInfo{}
	return &this
}

// GetDiskIops returns the DiskIops field value if set, zero value otherwise.
func (o *DeviceInfo) GetDiskIops() int32 {
	if o == nil || o.DiskIops == nil {
		var ret int32
		return ret
	}
	return *o.DiskIops
}

// GetDiskIopsOk returns a tuple with the DiskIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInfo) GetDiskIopsOk() (*int32, bool) {
	if o == nil || o.DiskIops == nil {
		return nil, false
	}
	return o.DiskIops, true
}

// HasDiskIops returns a boolean if a field has been set.
func (o *DeviceInfo) HasDiskIops() bool {
	if o != nil && o.DiskIops != nil {
		return true
	}

	return false
}

// SetDiskIops gets a reference to the given int32 and assigns it to the DiskIops field.
func (o *DeviceInfo) SetDiskIops(v int32) {
	o.DiskIops = &v
}

// GetMountPoints returns the MountPoints field value if set, zero value otherwise.
func (o *DeviceInfo) GetMountPoints() string {
	if o == nil || o.MountPoints == nil {
		var ret string
		return ret
	}
	return *o.MountPoints
}

// GetMountPointsOk returns a tuple with the MountPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInfo) GetMountPointsOk() (*string, bool) {
	if o == nil || o.MountPoints == nil {
		return nil, false
	}
	return o.MountPoints, true
}

// HasMountPoints returns a boolean if a field has been set.
func (o *DeviceInfo) HasMountPoints() bool {
	if o != nil && o.MountPoints != nil {
		return true
	}

	return false
}

// SetMountPoints gets a reference to the given string and assigns it to the MountPoints field.
func (o *DeviceInfo) SetMountPoints(v string) {
	o.MountPoints = &v
}

// GetNumVolumes returns the NumVolumes field value if set, zero value otherwise.
func (o *DeviceInfo) GetNumVolumes() int32 {
	if o == nil || o.NumVolumes == nil {
		var ret int32
		return ret
	}
	return *o.NumVolumes
}

// GetNumVolumesOk returns a tuple with the NumVolumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInfo) GetNumVolumesOk() (*int32, bool) {
	if o == nil || o.NumVolumes == nil {
		return nil, false
	}
	return o.NumVolumes, true
}

// HasNumVolumes returns a boolean if a field has been set.
func (o *DeviceInfo) HasNumVolumes() bool {
	if o != nil && o.NumVolumes != nil {
		return true
	}

	return false
}

// SetNumVolumes gets a reference to the given int32 and assigns it to the NumVolumes field.
func (o *DeviceInfo) SetNumVolumes(v int32) {
	o.NumVolumes = &v
}

// GetStorageClass returns the StorageClass field value if set, zero value otherwise.
func (o *DeviceInfo) GetStorageClass() string {
	if o == nil || o.StorageClass == nil {
		var ret string
		return ret
	}
	return *o.StorageClass
}

// GetStorageClassOk returns a tuple with the StorageClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInfo) GetStorageClassOk() (*string, bool) {
	if o == nil || o.StorageClass == nil {
		return nil, false
	}
	return o.StorageClass, true
}

// HasStorageClass returns a boolean if a field has been set.
func (o *DeviceInfo) HasStorageClass() bool {
	if o != nil && o.StorageClass != nil {
		return true
	}

	return false
}

// SetStorageClass gets a reference to the given string and assigns it to the StorageClass field.
func (o *DeviceInfo) SetStorageClass(v string) {
	o.StorageClass = &v
}

// GetStorageType returns the StorageType field value if set, zero value otherwise.
func (o *DeviceInfo) GetStorageType() string {
	if o == nil || o.StorageType == nil {
		var ret string
		return ret
	}
	return *o.StorageType
}

// GetStorageTypeOk returns a tuple with the StorageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInfo) GetStorageTypeOk() (*string, bool) {
	if o == nil || o.StorageType == nil {
		return nil, false
	}
	return o.StorageType, true
}

// HasStorageType returns a boolean if a field has been set.
func (o *DeviceInfo) HasStorageType() bool {
	if o != nil && o.StorageType != nil {
		return true
	}

	return false
}

// SetStorageType gets a reference to the given string and assigns it to the StorageType field.
func (o *DeviceInfo) SetStorageType(v string) {
	o.StorageType = &v
}

// GetThroughput returns the Throughput field value if set, zero value otherwise.
func (o *DeviceInfo) GetThroughput() int32 {
	if o == nil || o.Throughput == nil {
		var ret int32
		return ret
	}
	return *o.Throughput
}

// GetThroughputOk returns a tuple with the Throughput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInfo) GetThroughputOk() (*int32, bool) {
	if o == nil || o.Throughput == nil {
		return nil, false
	}
	return o.Throughput, true
}

// HasThroughput returns a boolean if a field has been set.
func (o *DeviceInfo) HasThroughput() bool {
	if o != nil && o.Throughput != nil {
		return true
	}

	return false
}

// SetThroughput gets a reference to the given int32 and assigns it to the Throughput field.
func (o *DeviceInfo) SetThroughput(v int32) {
	o.Throughput = &v
}

// GetVolumeSize returns the VolumeSize field value if set, zero value otherwise.
func (o *DeviceInfo) GetVolumeSize() int32 {
	if o == nil || o.VolumeSize == nil {
		var ret int32
		return ret
	}
	return *o.VolumeSize
}

// GetVolumeSizeOk returns a tuple with the VolumeSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInfo) GetVolumeSizeOk() (*int32, bool) {
	if o == nil || o.VolumeSize == nil {
		return nil, false
	}
	return o.VolumeSize, true
}

// HasVolumeSize returns a boolean if a field has been set.
func (o *DeviceInfo) HasVolumeSize() bool {
	if o != nil && o.VolumeSize != nil {
		return true
	}

	return false
}

// SetVolumeSize gets a reference to the given int32 and assigns it to the VolumeSize field.
func (o *DeviceInfo) SetVolumeSize(v int32) {
	o.VolumeSize = &v
}

func (o DeviceInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DiskIops != nil {
		toSerialize["diskIops"] = o.DiskIops
	}
	if o.MountPoints != nil {
		toSerialize["mountPoints"] = o.MountPoints
	}
	if o.NumVolumes != nil {
		toSerialize["numVolumes"] = o.NumVolumes
	}
	if o.StorageClass != nil {
		toSerialize["storageClass"] = o.StorageClass
	}
	if o.StorageType != nil {
		toSerialize["storageType"] = o.StorageType
	}
	if o.Throughput != nil {
		toSerialize["throughput"] = o.Throughput
	}
	if o.VolumeSize != nil {
		toSerialize["volumeSize"] = o.VolumeSize
	}
	return json.Marshal(toSerialize)
}

type NullableDeviceInfo struct {
	value *DeviceInfo
	isSet bool
}

func (v NullableDeviceInfo) Get() *DeviceInfo {
	return v.value
}

func (v *NullableDeviceInfo) Set(val *DeviceInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceInfo(val *DeviceInfo) *NullableDeviceInfo {
	return &NullableDeviceInfo{value: val, isSet: true}
}

func (v NullableDeviceInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


