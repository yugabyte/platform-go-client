/*
 * YugabyteDB Anywhere APIs
 *
 * ALPHA - NOT FOR EXTERNAL USE
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ywclient

import (
	"encoding/json"
)

// SoftwareUpgradeInfoResponse Software Upgrade Info response
type SoftwareUpgradeInfoResponse struct {
	// WARNING: This is a preview API that could change. Finalize required
	FinalizeRequired *bool `json:"finalizeRequired,omitempty"`
	// WARNING: This is a preview API that could change. YSQL Major version upgrade
	YsqlMajorVersionUpgrade *bool `json:"ysqlMajorVersionUpgrade,omitempty"`
}

// NewSoftwareUpgradeInfoResponse instantiates a new SoftwareUpgradeInfoResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSoftwareUpgradeInfoResponse() *SoftwareUpgradeInfoResponse {
	this := SoftwareUpgradeInfoResponse{}
	return &this
}

// NewSoftwareUpgradeInfoResponseWithDefaults instantiates a new SoftwareUpgradeInfoResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSoftwareUpgradeInfoResponseWithDefaults() *SoftwareUpgradeInfoResponse {
	this := SoftwareUpgradeInfoResponse{}
	return &this
}

// GetFinalizeRequired returns the FinalizeRequired field value if set, zero value otherwise.
func (o *SoftwareUpgradeInfoResponse) GetFinalizeRequired() bool {
	if o == nil || o.FinalizeRequired == nil {
		var ret bool
		return ret
	}
	return *o.FinalizeRequired
}

// GetFinalizeRequiredOk returns a tuple with the FinalizeRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwareUpgradeInfoResponse) GetFinalizeRequiredOk() (*bool, bool) {
	if o == nil || o.FinalizeRequired == nil {
		return nil, false
	}
	return o.FinalizeRequired, true
}

// HasFinalizeRequired returns a boolean if a field has been set.
func (o *SoftwareUpgradeInfoResponse) HasFinalizeRequired() bool {
	if o != nil && o.FinalizeRequired != nil {
		return true
	}

	return false
}

// SetFinalizeRequired gets a reference to the given bool and assigns it to the FinalizeRequired field.
func (o *SoftwareUpgradeInfoResponse) SetFinalizeRequired(v bool) {
	o.FinalizeRequired = &v
}

// GetYsqlMajorVersionUpgrade returns the YsqlMajorVersionUpgrade field value if set, zero value otherwise.
func (o *SoftwareUpgradeInfoResponse) GetYsqlMajorVersionUpgrade() bool {
	if o == nil || o.YsqlMajorVersionUpgrade == nil {
		var ret bool
		return ret
	}
	return *o.YsqlMajorVersionUpgrade
}

// GetYsqlMajorVersionUpgradeOk returns a tuple with the YsqlMajorVersionUpgrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwareUpgradeInfoResponse) GetYsqlMajorVersionUpgradeOk() (*bool, bool) {
	if o == nil || o.YsqlMajorVersionUpgrade == nil {
		return nil, false
	}
	return o.YsqlMajorVersionUpgrade, true
}

// HasYsqlMajorVersionUpgrade returns a boolean if a field has been set.
func (o *SoftwareUpgradeInfoResponse) HasYsqlMajorVersionUpgrade() bool {
	if o != nil && o.YsqlMajorVersionUpgrade != nil {
		return true
	}

	return false
}

// SetYsqlMajorVersionUpgrade gets a reference to the given bool and assigns it to the YsqlMajorVersionUpgrade field.
func (o *SoftwareUpgradeInfoResponse) SetYsqlMajorVersionUpgrade(v bool) {
	o.YsqlMajorVersionUpgrade = &v
}

func (o SoftwareUpgradeInfoResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FinalizeRequired != nil {
		toSerialize["finalizeRequired"] = o.FinalizeRequired
	}
	if o.YsqlMajorVersionUpgrade != nil {
		toSerialize["ysqlMajorVersionUpgrade"] = o.YsqlMajorVersionUpgrade
	}
	return json.Marshal(toSerialize)
}

type NullableSoftwareUpgradeInfoResponse struct {
	value *SoftwareUpgradeInfoResponse
	isSet bool
}

func (v NullableSoftwareUpgradeInfoResponse) Get() *SoftwareUpgradeInfoResponse {
	return v.value
}

func (v *NullableSoftwareUpgradeInfoResponse) Set(val *SoftwareUpgradeInfoResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSoftwareUpgradeInfoResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSoftwareUpgradeInfoResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSoftwareUpgradeInfoResponse(val *SoftwareUpgradeInfoResponse) *NullableSoftwareUpgradeInfoResponse {
	return &NullableSoftwareUpgradeInfoResponse{value: val, isSet: true}
}

func (v NullableSoftwareUpgradeInfoResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSoftwareUpgradeInfoResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


