/*
 * YugabyteDB Anywhere APIs
 *
 * ALPHA - NOT FOR EXTERNAL USE
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ywclient

import (
	"encoding/json"
)

// NamespaceSafetime struct for NamespaceSafetime
type NamespaceSafetime struct {
	EstimatedDataLossMs float64 `json:"estimatedDataLossMs"`
	NamespaceId string `json:"namespaceId"`
	NamespaceName string `json:"namespaceName"`
	SafetimeEpochUs int64 `json:"safetimeEpochUs"`
	SafetimeLagUs int64 `json:"safetimeLagUs"`
	SafetimeSkewUs int64 `json:"safetimeSkewUs"`
}

// NewNamespaceSafetime instantiates a new NamespaceSafetime object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNamespaceSafetime(estimatedDataLossMs float64, namespaceId string, namespaceName string, safetimeEpochUs int64, safetimeLagUs int64, safetimeSkewUs int64) *NamespaceSafetime {
	this := NamespaceSafetime{}
	this.EstimatedDataLossMs = estimatedDataLossMs
	this.NamespaceId = namespaceId
	this.NamespaceName = namespaceName
	this.SafetimeEpochUs = safetimeEpochUs
	this.SafetimeLagUs = safetimeLagUs
	this.SafetimeSkewUs = safetimeSkewUs
	return &this
}

// NewNamespaceSafetimeWithDefaults instantiates a new NamespaceSafetime object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNamespaceSafetimeWithDefaults() *NamespaceSafetime {
	this := NamespaceSafetime{}
	return &this
}

// GetEstimatedDataLossMs returns the EstimatedDataLossMs field value
func (o *NamespaceSafetime) GetEstimatedDataLossMs() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.EstimatedDataLossMs
}

// GetEstimatedDataLossMsOk returns a tuple with the EstimatedDataLossMs field value
// and a boolean to check if the value has been set.
func (o *NamespaceSafetime) GetEstimatedDataLossMsOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EstimatedDataLossMs, true
}

// SetEstimatedDataLossMs sets field value
func (o *NamespaceSafetime) SetEstimatedDataLossMs(v float64) {
	o.EstimatedDataLossMs = v
}

// GetNamespaceId returns the NamespaceId field value
func (o *NamespaceSafetime) GetNamespaceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NamespaceId
}

// GetNamespaceIdOk returns a tuple with the NamespaceId field value
// and a boolean to check if the value has been set.
func (o *NamespaceSafetime) GetNamespaceIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NamespaceId, true
}

// SetNamespaceId sets field value
func (o *NamespaceSafetime) SetNamespaceId(v string) {
	o.NamespaceId = v
}

// GetNamespaceName returns the NamespaceName field value
func (o *NamespaceSafetime) GetNamespaceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NamespaceName
}

// GetNamespaceNameOk returns a tuple with the NamespaceName field value
// and a boolean to check if the value has been set.
func (o *NamespaceSafetime) GetNamespaceNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NamespaceName, true
}

// SetNamespaceName sets field value
func (o *NamespaceSafetime) SetNamespaceName(v string) {
	o.NamespaceName = v
}

// GetSafetimeEpochUs returns the SafetimeEpochUs field value
func (o *NamespaceSafetime) GetSafetimeEpochUs() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SafetimeEpochUs
}

// GetSafetimeEpochUsOk returns a tuple with the SafetimeEpochUs field value
// and a boolean to check if the value has been set.
func (o *NamespaceSafetime) GetSafetimeEpochUsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SafetimeEpochUs, true
}

// SetSafetimeEpochUs sets field value
func (o *NamespaceSafetime) SetSafetimeEpochUs(v int64) {
	o.SafetimeEpochUs = v
}

// GetSafetimeLagUs returns the SafetimeLagUs field value
func (o *NamespaceSafetime) GetSafetimeLagUs() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SafetimeLagUs
}

// GetSafetimeLagUsOk returns a tuple with the SafetimeLagUs field value
// and a boolean to check if the value has been set.
func (o *NamespaceSafetime) GetSafetimeLagUsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SafetimeLagUs, true
}

// SetSafetimeLagUs sets field value
func (o *NamespaceSafetime) SetSafetimeLagUs(v int64) {
	o.SafetimeLagUs = v
}

// GetSafetimeSkewUs returns the SafetimeSkewUs field value
func (o *NamespaceSafetime) GetSafetimeSkewUs() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SafetimeSkewUs
}

// GetSafetimeSkewUsOk returns a tuple with the SafetimeSkewUs field value
// and a boolean to check if the value has been set.
func (o *NamespaceSafetime) GetSafetimeSkewUsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SafetimeSkewUs, true
}

// SetSafetimeSkewUs sets field value
func (o *NamespaceSafetime) SetSafetimeSkewUs(v int64) {
	o.SafetimeSkewUs = v
}

func (o NamespaceSafetime) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["estimatedDataLossMs"] = o.EstimatedDataLossMs
	}
	if true {
		toSerialize["namespaceId"] = o.NamespaceId
	}
	if true {
		toSerialize["namespaceName"] = o.NamespaceName
	}
	if true {
		toSerialize["safetimeEpochUs"] = o.SafetimeEpochUs
	}
	if true {
		toSerialize["safetimeLagUs"] = o.SafetimeLagUs
	}
	if true {
		toSerialize["safetimeSkewUs"] = o.SafetimeSkewUs
	}
	return json.Marshal(toSerialize)
}

type NullableNamespaceSafetime struct {
	value *NamespaceSafetime
	isSet bool
}

func (v NullableNamespaceSafetime) Get() *NamespaceSafetime {
	return v.value
}

func (v *NullableNamespaceSafetime) Set(val *NamespaceSafetime) {
	v.value = val
	v.isSet = true
}

func (v NullableNamespaceSafetime) IsSet() bool {
	return v.isSet
}

func (v *NullableNamespaceSafetime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNamespaceSafetime(val *NamespaceSafetime) *NullableNamespaceSafetime {
	return &NullableNamespaceSafetime{value: val, isSet: true}
}

func (v NullableNamespaceSafetime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNamespaceSafetime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


