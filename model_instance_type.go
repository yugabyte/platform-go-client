/*
 * Yugabyte Platform APIs
 *
 * ALPHA - NOT FOR EXTERNAL USE
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ywclient

import (
	"encoding/json"
)

// InstanceType Information about an instance
type InstanceType struct {
	// True if the instance is active
	Active *bool `json:"active,omitempty"`
	IdKey InstanceTypeKey `json:"idKey"`
	InstanceTypeCode string `json:"instanceTypeCode"`
	InstanceTypeDetails InstanceTypeDetails `json:"instanceTypeDetails"`
	// The instance's memory size, in gigabytes
	MemSizeGB *float64 `json:"memSizeGB,omitempty"`
	// The instance's number of CPU cores
	NumCores *float64 `json:"numCores,omitempty"`
	Provider Provider `json:"provider"`
	ProviderCode string `json:"providerCode"`
	ProviderUuid string `json:"providerUuid"`
}

// NewInstanceType instantiates a new InstanceType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceType(idKey InstanceTypeKey, instanceTypeCode string, instanceTypeDetails InstanceTypeDetails, provider Provider, providerCode string, providerUuid string, ) *InstanceType {
	this := InstanceType{}
	this.IdKey = idKey
	this.InstanceTypeCode = instanceTypeCode
	this.InstanceTypeDetails = instanceTypeDetails
	this.Provider = provider
	this.ProviderCode = providerCode
	this.ProviderUuid = providerUuid
	return &this
}

// NewInstanceTypeWithDefaults instantiates a new InstanceType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceTypeWithDefaults() *InstanceType {
	this := InstanceType{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *InstanceType) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceType) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *InstanceType) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *InstanceType) SetActive(v bool) {
	o.Active = &v
}

// GetIdKey returns the IdKey field value
func (o *InstanceType) GetIdKey() InstanceTypeKey {
	if o == nil  {
		var ret InstanceTypeKey
		return ret
	}

	return o.IdKey
}

// GetIdKeyOk returns a tuple with the IdKey field value
// and a boolean to check if the value has been set.
func (o *InstanceType) GetIdKeyOk() (*InstanceTypeKey, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IdKey, true
}

// SetIdKey sets field value
func (o *InstanceType) SetIdKey(v InstanceTypeKey) {
	o.IdKey = v
}

// GetInstanceTypeCode returns the InstanceTypeCode field value
func (o *InstanceType) GetInstanceTypeCode() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.InstanceTypeCode
}

// GetInstanceTypeCodeOk returns a tuple with the InstanceTypeCode field value
// and a boolean to check if the value has been set.
func (o *InstanceType) GetInstanceTypeCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.InstanceTypeCode, true
}

// SetInstanceTypeCode sets field value
func (o *InstanceType) SetInstanceTypeCode(v string) {
	o.InstanceTypeCode = v
}

// GetInstanceTypeDetails returns the InstanceTypeDetails field value
func (o *InstanceType) GetInstanceTypeDetails() InstanceTypeDetails {
	if o == nil  {
		var ret InstanceTypeDetails
		return ret
	}

	return o.InstanceTypeDetails
}

// GetInstanceTypeDetailsOk returns a tuple with the InstanceTypeDetails field value
// and a boolean to check if the value has been set.
func (o *InstanceType) GetInstanceTypeDetailsOk() (*InstanceTypeDetails, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.InstanceTypeDetails, true
}

// SetInstanceTypeDetails sets field value
func (o *InstanceType) SetInstanceTypeDetails(v InstanceTypeDetails) {
	o.InstanceTypeDetails = v
}

// GetMemSizeGB returns the MemSizeGB field value if set, zero value otherwise.
func (o *InstanceType) GetMemSizeGB() float64 {
	if o == nil || o.MemSizeGB == nil {
		var ret float64
		return ret
	}
	return *o.MemSizeGB
}

// GetMemSizeGBOk returns a tuple with the MemSizeGB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceType) GetMemSizeGBOk() (*float64, bool) {
	if o == nil || o.MemSizeGB == nil {
		return nil, false
	}
	return o.MemSizeGB, true
}

// HasMemSizeGB returns a boolean if a field has been set.
func (o *InstanceType) HasMemSizeGB() bool {
	if o != nil && o.MemSizeGB != nil {
		return true
	}

	return false
}

// SetMemSizeGB gets a reference to the given float64 and assigns it to the MemSizeGB field.
func (o *InstanceType) SetMemSizeGB(v float64) {
	o.MemSizeGB = &v
}

// GetNumCores returns the NumCores field value if set, zero value otherwise.
func (o *InstanceType) GetNumCores() float64 {
	if o == nil || o.NumCores == nil {
		var ret float64
		return ret
	}
	return *o.NumCores
}

// GetNumCoresOk returns a tuple with the NumCores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceType) GetNumCoresOk() (*float64, bool) {
	if o == nil || o.NumCores == nil {
		return nil, false
	}
	return o.NumCores, true
}

// HasNumCores returns a boolean if a field has been set.
func (o *InstanceType) HasNumCores() bool {
	if o != nil && o.NumCores != nil {
		return true
	}

	return false
}

// SetNumCores gets a reference to the given float64 and assigns it to the NumCores field.
func (o *InstanceType) SetNumCores(v float64) {
	o.NumCores = &v
}

// GetProvider returns the Provider field value
func (o *InstanceType) GetProvider() Provider {
	if o == nil  {
		var ret Provider
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *InstanceType) GetProviderOk() (*Provider, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *InstanceType) SetProvider(v Provider) {
	o.Provider = v
}

// GetProviderCode returns the ProviderCode field value
func (o *InstanceType) GetProviderCode() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.ProviderCode
}

// GetProviderCodeOk returns a tuple with the ProviderCode field value
// and a boolean to check if the value has been set.
func (o *InstanceType) GetProviderCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ProviderCode, true
}

// SetProviderCode sets field value
func (o *InstanceType) SetProviderCode(v string) {
	o.ProviderCode = v
}

// GetProviderUuid returns the ProviderUuid field value
func (o *InstanceType) GetProviderUuid() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.ProviderUuid
}

// GetProviderUuidOk returns a tuple with the ProviderUuid field value
// and a boolean to check if the value has been set.
func (o *InstanceType) GetProviderUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ProviderUuid, true
}

// SetProviderUuid sets field value
func (o *InstanceType) SetProviderUuid(v string) {
	o.ProviderUuid = v
}

func (o InstanceType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if true {
		toSerialize["idKey"] = o.IdKey
	}
	if true {
		toSerialize["instanceTypeCode"] = o.InstanceTypeCode
	}
	if true {
		toSerialize["instanceTypeDetails"] = o.InstanceTypeDetails
	}
	if o.MemSizeGB != nil {
		toSerialize["memSizeGB"] = o.MemSizeGB
	}
	if o.NumCores != nil {
		toSerialize["numCores"] = o.NumCores
	}
	if true {
		toSerialize["provider"] = o.Provider
	}
	if true {
		toSerialize["providerCode"] = o.ProviderCode
	}
	if true {
		toSerialize["providerUuid"] = o.ProviderUuid
	}
	return json.Marshal(toSerialize)
}

type NullableInstanceType struct {
	value *InstanceType
	isSet bool
}

func (v NullableInstanceType) Get() *InstanceType {
	return v.value
}

func (v *NullableInstanceType) Set(val *InstanceType) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceType) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceType(val *InstanceType) *NullableInstanceType {
	return &NullableInstanceType{value: val, isSet: true}
}

func (v NullableInstanceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


