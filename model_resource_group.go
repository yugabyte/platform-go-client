/*
 * YugabyteDB Anywhere APIs
 *
 * ALPHA - NOT FOR EXTERNAL USE
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ywclient

import (
	"encoding/json"
)

// ResourceGroup struct for ResourceGroup
type ResourceGroup struct {
	ResourceDefinitionSet []ResourceDefinition `json:"resourceDefinitionSet"`
}

// NewResourceGroup instantiates a new ResourceGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceGroup(resourceDefinitionSet []ResourceDefinition) *ResourceGroup {
	this := ResourceGroup{}
	this.ResourceDefinitionSet = resourceDefinitionSet
	return &this
}

// NewResourceGroupWithDefaults instantiates a new ResourceGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceGroupWithDefaults() *ResourceGroup {
	this := ResourceGroup{}
	return &this
}

// GetResourceDefinitionSet returns the ResourceDefinitionSet field value
func (o *ResourceGroup) GetResourceDefinitionSet() []ResourceDefinition {
	if o == nil {
		var ret []ResourceDefinition
		return ret
	}

	return o.ResourceDefinitionSet
}

// GetResourceDefinitionSetOk returns a tuple with the ResourceDefinitionSet field value
// and a boolean to check if the value has been set.
func (o *ResourceGroup) GetResourceDefinitionSetOk() (*[]ResourceDefinition, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ResourceDefinitionSet, true
}

// SetResourceDefinitionSet sets field value
func (o *ResourceGroup) SetResourceDefinitionSet(v []ResourceDefinition) {
	o.ResourceDefinitionSet = v
}

func (o ResourceGroup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["resourceDefinitionSet"] = o.ResourceDefinitionSet
	}
	return json.Marshal(toSerialize)
}

type NullableResourceGroup struct {
	value *ResourceGroup
	isSet bool
}

func (v NullableResourceGroup) Get() *ResourceGroup {
	return v.value
}

func (v *NullableResourceGroup) Set(val *ResourceGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceGroup(val *ResourceGroup) *NullableResourceGroup {
	return &NullableResourceGroup{value: val, isSet: true}
}

func (v NullableResourceGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


