/*
 * YugabyteDB Anywhere APIs
 *
 * ALPHA - NOT FOR EXTERNAL USE
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ywclient

import (
	"encoding/json"
)

// Config struct for Config
type Config struct {
	CertPath string `json:"certPath"`
	Offloadable bool `json:"offloadable"`
	ServerCert string `json:"serverCert"`
	ServerKey string `json:"serverKey"`
}

// NewConfig instantiates a new Config object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfig(certPath string, offloadable bool, serverCert string, serverKey string) *Config {
	this := Config{}
	this.CertPath = certPath
	this.Offloadable = offloadable
	this.ServerCert = serverCert
	this.ServerKey = serverKey
	return &this
}

// NewConfigWithDefaults instantiates a new Config object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigWithDefaults() *Config {
	this := Config{}
	return &this
}

// GetCertPath returns the CertPath field value
func (o *Config) GetCertPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CertPath
}

// GetCertPathOk returns a tuple with the CertPath field value
// and a boolean to check if the value has been set.
func (o *Config) GetCertPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CertPath, true
}

// SetCertPath sets field value
func (o *Config) SetCertPath(v string) {
	o.CertPath = v
}

// GetOffloadable returns the Offloadable field value
func (o *Config) GetOffloadable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Offloadable
}

// GetOffloadableOk returns a tuple with the Offloadable field value
// and a boolean to check if the value has been set.
func (o *Config) GetOffloadableOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Offloadable, true
}

// SetOffloadable sets field value
func (o *Config) SetOffloadable(v bool) {
	o.Offloadable = v
}

// GetServerCert returns the ServerCert field value
func (o *Config) GetServerCert() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServerCert
}

// GetServerCertOk returns a tuple with the ServerCert field value
// and a boolean to check if the value has been set.
func (o *Config) GetServerCertOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ServerCert, true
}

// SetServerCert sets field value
func (o *Config) SetServerCert(v string) {
	o.ServerCert = v
}

// GetServerKey returns the ServerKey field value
func (o *Config) GetServerKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServerKey
}

// GetServerKeyOk returns a tuple with the ServerKey field value
// and a boolean to check if the value has been set.
func (o *Config) GetServerKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ServerKey, true
}

// SetServerKey sets field value
func (o *Config) SetServerKey(v string) {
	o.ServerKey = v
}

func (o Config) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["certPath"] = o.CertPath
	}
	if true {
		toSerialize["offloadable"] = o.Offloadable
	}
	if true {
		toSerialize["serverCert"] = o.ServerCert
	}
	if true {
		toSerialize["serverKey"] = o.ServerKey
	}
	return json.Marshal(toSerialize)
}

type NullableConfig struct {
	value *Config
	isSet bool
}

func (v NullableConfig) Get() *Config {
	return v.value
}

func (v *NullableConfig) Set(val *Config) {
	v.value = val
	v.isSet = true
}

func (v NullableConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfig(val *Config) *NullableConfig {
	return &NullableConfig{value: val, isSet: true}
}

func (v NullableConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


