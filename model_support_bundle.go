/*
 * YugabyteDB Anywhere APIs
 *
 * ALPHA - NOT FOR EXTERNAL USE
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ywclient

import (
	"encoding/json"
	"time"
)

// SupportBundle struct for SupportBundle
type SupportBundle struct {
	BundleDetails BundleDetails `json:"bundleDetails"`
	BundleUUID string `json:"bundleUUID"`
	// Support bundle creation date.
	CreationDate *time.Time `json:"creationDate,omitempty"`
	// Support bundle end date.
	EndDate *time.Time `json:"endDate,omitempty"`
	// Support bundle expiration date.
	ExpirationDate *time.Time `json:"expirationDate,omitempty"`
	Path string `json:"path"`
	ScopeUUID string `json:"scopeUUID"`
	// Size in bytes of the support bundle
	SizeInBytes *int64 `json:"sizeInBytes,omitempty"`
	// Support bundle start date.
	StartDate *time.Time `json:"startDate,omitempty"`
	Status string `json:"status"`
}

// NewSupportBundle instantiates a new SupportBundle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupportBundle(bundleDetails BundleDetails, bundleUUID string, path string, scopeUUID string, status string, ) *SupportBundle {
	this := SupportBundle{}
	this.BundleDetails = bundleDetails
	this.BundleUUID = bundleUUID
	this.Path = path
	this.ScopeUUID = scopeUUID
	this.Status = status
	return &this
}

// NewSupportBundleWithDefaults instantiates a new SupportBundle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupportBundleWithDefaults() *SupportBundle {
	this := SupportBundle{}
	return &this
}

// GetBundleDetails returns the BundleDetails field value
func (o *SupportBundle) GetBundleDetails() BundleDetails {
	if o == nil  {
		var ret BundleDetails
		return ret
	}

	return o.BundleDetails
}

// GetBundleDetailsOk returns a tuple with the BundleDetails field value
// and a boolean to check if the value has been set.
func (o *SupportBundle) GetBundleDetailsOk() (*BundleDetails, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BundleDetails, true
}

// SetBundleDetails sets field value
func (o *SupportBundle) SetBundleDetails(v BundleDetails) {
	o.BundleDetails = v
}

// GetBundleUUID returns the BundleUUID field value
func (o *SupportBundle) GetBundleUUID() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.BundleUUID
}

// GetBundleUUIDOk returns a tuple with the BundleUUID field value
// and a boolean to check if the value has been set.
func (o *SupportBundle) GetBundleUUIDOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BundleUUID, true
}

// SetBundleUUID sets field value
func (o *SupportBundle) SetBundleUUID(v string) {
	o.BundleUUID = v
}

// GetCreationDate returns the CreationDate field value if set, zero value otherwise.
func (o *SupportBundle) GetCreationDate() time.Time {
	if o == nil || o.CreationDate == nil {
		var ret time.Time
		return ret
	}
	return *o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportBundle) GetCreationDateOk() (*time.Time, bool) {
	if o == nil || o.CreationDate == nil {
		return nil, false
	}
	return o.CreationDate, true
}

// HasCreationDate returns a boolean if a field has been set.
func (o *SupportBundle) HasCreationDate() bool {
	if o != nil && o.CreationDate != nil {
		return true
	}

	return false
}

// SetCreationDate gets a reference to the given time.Time and assigns it to the CreationDate field.
func (o *SupportBundle) SetCreationDate(v time.Time) {
	o.CreationDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *SupportBundle) GetEndDate() time.Time {
	if o == nil || o.EndDate == nil {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportBundle) GetEndDateOk() (*time.Time, bool) {
	if o == nil || o.EndDate == nil {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *SupportBundle) HasEndDate() bool {
	if o != nil && o.EndDate != nil {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *SupportBundle) SetEndDate(v time.Time) {
	o.EndDate = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *SupportBundle) GetExpirationDate() time.Time {
	if o == nil || o.ExpirationDate == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportBundle) GetExpirationDateOk() (*time.Time, bool) {
	if o == nil || o.ExpirationDate == nil {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *SupportBundle) HasExpirationDate() bool {
	if o != nil && o.ExpirationDate != nil {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given time.Time and assigns it to the ExpirationDate field.
func (o *SupportBundle) SetExpirationDate(v time.Time) {
	o.ExpirationDate = &v
}

// GetPath returns the Path field value
func (o *SupportBundle) GetPath() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *SupportBundle) GetPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *SupportBundle) SetPath(v string) {
	o.Path = v
}

// GetScopeUUID returns the ScopeUUID field value
func (o *SupportBundle) GetScopeUUID() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.ScopeUUID
}

// GetScopeUUIDOk returns a tuple with the ScopeUUID field value
// and a boolean to check if the value has been set.
func (o *SupportBundle) GetScopeUUIDOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ScopeUUID, true
}

// SetScopeUUID sets field value
func (o *SupportBundle) SetScopeUUID(v string) {
	o.ScopeUUID = v
}

// GetSizeInBytes returns the SizeInBytes field value if set, zero value otherwise.
func (o *SupportBundle) GetSizeInBytes() int64 {
	if o == nil || o.SizeInBytes == nil {
		var ret int64
		return ret
	}
	return *o.SizeInBytes
}

// GetSizeInBytesOk returns a tuple with the SizeInBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportBundle) GetSizeInBytesOk() (*int64, bool) {
	if o == nil || o.SizeInBytes == nil {
		return nil, false
	}
	return o.SizeInBytes, true
}

// HasSizeInBytes returns a boolean if a field has been set.
func (o *SupportBundle) HasSizeInBytes() bool {
	if o != nil && o.SizeInBytes != nil {
		return true
	}

	return false
}

// SetSizeInBytes gets a reference to the given int64 and assigns it to the SizeInBytes field.
func (o *SupportBundle) SetSizeInBytes(v int64) {
	o.SizeInBytes = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *SupportBundle) GetStartDate() time.Time {
	if o == nil || o.StartDate == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportBundle) GetStartDateOk() (*time.Time, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *SupportBundle) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *SupportBundle) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetStatus returns the Status field value
func (o *SupportBundle) GetStatus() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *SupportBundle) GetStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *SupportBundle) SetStatus(v string) {
	o.Status = v
}

func (o SupportBundle) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["bundleDetails"] = o.BundleDetails
	}
	if true {
		toSerialize["bundleUUID"] = o.BundleUUID
	}
	if o.CreationDate != nil {
		toSerialize["creationDate"] = o.CreationDate
	}
	if o.EndDate != nil {
		toSerialize["endDate"] = o.EndDate
	}
	if o.ExpirationDate != nil {
		toSerialize["expirationDate"] = o.ExpirationDate
	}
	if true {
		toSerialize["path"] = o.Path
	}
	if true {
		toSerialize["scopeUUID"] = o.ScopeUUID
	}
	if o.SizeInBytes != nil {
		toSerialize["sizeInBytes"] = o.SizeInBytes
	}
	if o.StartDate != nil {
		toSerialize["startDate"] = o.StartDate
	}
	if true {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableSupportBundle struct {
	value *SupportBundle
	isSet bool
}

func (v NullableSupportBundle) Get() *SupportBundle {
	return v.value
}

func (v *NullableSupportBundle) Set(val *SupportBundle) {
	v.value = val
	v.isSet = true
}

func (v NullableSupportBundle) IsSet() bool {
	return v.isSet
}

func (v *NullableSupportBundle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupportBundle(val *SupportBundle) *NullableSupportBundle {
	return &NullableSupportBundle{value: val, isSet: true}
}

func (v NullableSupportBundle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupportBundle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


