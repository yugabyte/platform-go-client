/*
 * YugabyteDB Anywhere APIs
 *
 * ALPHA - NOT FOR EXTERNAL USE
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ywclient

import (
	"encoding/json"
)

// YbcThrottleParameters YB-Controller throttle parameters
type YbcThrottleParameters struct {
	// Max concurrent downloads per node
	MaxConcurrentDownloads *int32 `json:"maxConcurrentDownloads,omitempty"`
	// Max concurrent uploads per node
	MaxConcurrentUploads *int32 `json:"maxConcurrentUploads,omitempty"`
	// Max objects per download per node
	PerDownloadNumObjects *int32 `json:"perDownloadNumObjects,omitempty"`
	// Max objects per upload per node
	PerUploadNumObjects *int32 `json:"perUploadNumObjects,omitempty"`
	// Unset Throttle parameters in YB-Controller
	ResetDefaults *bool `json:"resetDefaults,omitempty"`
}

// NewYbcThrottleParameters instantiates a new YbcThrottleParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewYbcThrottleParameters() *YbcThrottleParameters {
	this := YbcThrottleParameters{}
	return &this
}

// NewYbcThrottleParametersWithDefaults instantiates a new YbcThrottleParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewYbcThrottleParametersWithDefaults() *YbcThrottleParameters {
	this := YbcThrottleParameters{}
	return &this
}

// GetMaxConcurrentDownloads returns the MaxConcurrentDownloads field value if set, zero value otherwise.
func (o *YbcThrottleParameters) GetMaxConcurrentDownloads() int32 {
	if o == nil || o.MaxConcurrentDownloads == nil {
		var ret int32
		return ret
	}
	return *o.MaxConcurrentDownloads
}

// GetMaxConcurrentDownloadsOk returns a tuple with the MaxConcurrentDownloads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *YbcThrottleParameters) GetMaxConcurrentDownloadsOk() (*int32, bool) {
	if o == nil || o.MaxConcurrentDownloads == nil {
		return nil, false
	}
	return o.MaxConcurrentDownloads, true
}

// HasMaxConcurrentDownloads returns a boolean if a field has been set.
func (o *YbcThrottleParameters) HasMaxConcurrentDownloads() bool {
	if o != nil && o.MaxConcurrentDownloads != nil {
		return true
	}

	return false
}

// SetMaxConcurrentDownloads gets a reference to the given int32 and assigns it to the MaxConcurrentDownloads field.
func (o *YbcThrottleParameters) SetMaxConcurrentDownloads(v int32) {
	o.MaxConcurrentDownloads = &v
}

// GetMaxConcurrentUploads returns the MaxConcurrentUploads field value if set, zero value otherwise.
func (o *YbcThrottleParameters) GetMaxConcurrentUploads() int32 {
	if o == nil || o.MaxConcurrentUploads == nil {
		var ret int32
		return ret
	}
	return *o.MaxConcurrentUploads
}

// GetMaxConcurrentUploadsOk returns a tuple with the MaxConcurrentUploads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *YbcThrottleParameters) GetMaxConcurrentUploadsOk() (*int32, bool) {
	if o == nil || o.MaxConcurrentUploads == nil {
		return nil, false
	}
	return o.MaxConcurrentUploads, true
}

// HasMaxConcurrentUploads returns a boolean if a field has been set.
func (o *YbcThrottleParameters) HasMaxConcurrentUploads() bool {
	if o != nil && o.MaxConcurrentUploads != nil {
		return true
	}

	return false
}

// SetMaxConcurrentUploads gets a reference to the given int32 and assigns it to the MaxConcurrentUploads field.
func (o *YbcThrottleParameters) SetMaxConcurrentUploads(v int32) {
	o.MaxConcurrentUploads = &v
}

// GetPerDownloadNumObjects returns the PerDownloadNumObjects field value if set, zero value otherwise.
func (o *YbcThrottleParameters) GetPerDownloadNumObjects() int32 {
	if o == nil || o.PerDownloadNumObjects == nil {
		var ret int32
		return ret
	}
	return *o.PerDownloadNumObjects
}

// GetPerDownloadNumObjectsOk returns a tuple with the PerDownloadNumObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *YbcThrottleParameters) GetPerDownloadNumObjectsOk() (*int32, bool) {
	if o == nil || o.PerDownloadNumObjects == nil {
		return nil, false
	}
	return o.PerDownloadNumObjects, true
}

// HasPerDownloadNumObjects returns a boolean if a field has been set.
func (o *YbcThrottleParameters) HasPerDownloadNumObjects() bool {
	if o != nil && o.PerDownloadNumObjects != nil {
		return true
	}

	return false
}

// SetPerDownloadNumObjects gets a reference to the given int32 and assigns it to the PerDownloadNumObjects field.
func (o *YbcThrottleParameters) SetPerDownloadNumObjects(v int32) {
	o.PerDownloadNumObjects = &v
}

// GetPerUploadNumObjects returns the PerUploadNumObjects field value if set, zero value otherwise.
func (o *YbcThrottleParameters) GetPerUploadNumObjects() int32 {
	if o == nil || o.PerUploadNumObjects == nil {
		var ret int32
		return ret
	}
	return *o.PerUploadNumObjects
}

// GetPerUploadNumObjectsOk returns a tuple with the PerUploadNumObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *YbcThrottleParameters) GetPerUploadNumObjectsOk() (*int32, bool) {
	if o == nil || o.PerUploadNumObjects == nil {
		return nil, false
	}
	return o.PerUploadNumObjects, true
}

// HasPerUploadNumObjects returns a boolean if a field has been set.
func (o *YbcThrottleParameters) HasPerUploadNumObjects() bool {
	if o != nil && o.PerUploadNumObjects != nil {
		return true
	}

	return false
}

// SetPerUploadNumObjects gets a reference to the given int32 and assigns it to the PerUploadNumObjects field.
func (o *YbcThrottleParameters) SetPerUploadNumObjects(v int32) {
	o.PerUploadNumObjects = &v
}

// GetResetDefaults returns the ResetDefaults field value if set, zero value otherwise.
func (o *YbcThrottleParameters) GetResetDefaults() bool {
	if o == nil || o.ResetDefaults == nil {
		var ret bool
		return ret
	}
	return *o.ResetDefaults
}

// GetResetDefaultsOk returns a tuple with the ResetDefaults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *YbcThrottleParameters) GetResetDefaultsOk() (*bool, bool) {
	if o == nil || o.ResetDefaults == nil {
		return nil, false
	}
	return o.ResetDefaults, true
}

// HasResetDefaults returns a boolean if a field has been set.
func (o *YbcThrottleParameters) HasResetDefaults() bool {
	if o != nil && o.ResetDefaults != nil {
		return true
	}

	return false
}

// SetResetDefaults gets a reference to the given bool and assigns it to the ResetDefaults field.
func (o *YbcThrottleParameters) SetResetDefaults(v bool) {
	o.ResetDefaults = &v
}

func (o YbcThrottleParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MaxConcurrentDownloads != nil {
		toSerialize["maxConcurrentDownloads"] = o.MaxConcurrentDownloads
	}
	if o.MaxConcurrentUploads != nil {
		toSerialize["maxConcurrentUploads"] = o.MaxConcurrentUploads
	}
	if o.PerDownloadNumObjects != nil {
		toSerialize["perDownloadNumObjects"] = o.PerDownloadNumObjects
	}
	if o.PerUploadNumObjects != nil {
		toSerialize["perUploadNumObjects"] = o.PerUploadNumObjects
	}
	if o.ResetDefaults != nil {
		toSerialize["resetDefaults"] = o.ResetDefaults
	}
	return json.Marshal(toSerialize)
}

type NullableYbcThrottleParameters struct {
	value *YbcThrottleParameters
	isSet bool
}

func (v NullableYbcThrottleParameters) Get() *YbcThrottleParameters {
	return v.value
}

func (v *NullableYbcThrottleParameters) Set(val *YbcThrottleParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableYbcThrottleParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableYbcThrottleParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableYbcThrottleParameters(val *YbcThrottleParameters) *NullableYbcThrottleParameters {
	return &NullableYbcThrottleParameters{value: val, isSet: true}
}

func (v NullableYbcThrottleParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableYbcThrottleParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


