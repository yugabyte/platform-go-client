/*
 * Yugabyte Platform APIs
 *
 * ALPHA - NOT FOR EXTERNAL USE
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package yb_platform_client

import (
	"encoding/json"
)

// CloudSpecificInfo Node information reported by the cloud provider
type CloudSpecificInfo struct {
	// True if the node has a public IP address assigned
	AssignPublicIP *bool `json:"assignPublicIP,omitempty"`
	// The node's availability zone
	Az *string `json:"az,omitempty"`
	// The node's cloud provider
	Cloud *string `json:"cloud,omitempty"`
	// The node's instance type
	InstanceType *string `json:"instance_type,omitempty"`
	// Mount roots
	MountRoots *string `json:"mount_roots,omitempty"`
	// The node's private DNS
	PrivateDns *string `json:"private_dns,omitempty"`
	// The node's private IP address
	PrivateIp *string `json:"private_ip,omitempty"`
	// The node's public DNS name
	PublicDns *string `json:"public_dns,omitempty"`
	// The node's public IP address
	PublicIp *string `json:"public_ip,omitempty"`
	// The node's region
	Region *string `json:"region,omitempty"`
	// Secondary Private IP
	SecondaryPrivateIp *string `json:"secondary_private_ip,omitempty"`
	// Secondary Subnet IP
	SecondarySubnetId *string `json:"secondary_subnet_id,omitempty"`
	// ID of the subnet on which this node is deployed
	SubnetId *string `json:"subnet_id,omitempty"`
	// True if `use time sync` is enabled
	UseTimeSync *bool `json:"useTimeSync,omitempty"`
}

// NewCloudSpecificInfo instantiates a new CloudSpecificInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudSpecificInfo() *CloudSpecificInfo {
	this := CloudSpecificInfo{}
	return &this
}

// NewCloudSpecificInfoWithDefaults instantiates a new CloudSpecificInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudSpecificInfoWithDefaults() *CloudSpecificInfo {
	this := CloudSpecificInfo{}
	return &this
}

// GetAssignPublicIP returns the AssignPublicIP field value if set, zero value otherwise.
func (o *CloudSpecificInfo) GetAssignPublicIP() bool {
	if o == nil || o.AssignPublicIP == nil {
		var ret bool
		return ret
	}
	return *o.AssignPublicIP
}

// GetAssignPublicIPOk returns a tuple with the AssignPublicIP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudSpecificInfo) GetAssignPublicIPOk() (*bool, bool) {
	if o == nil || o.AssignPublicIP == nil {
		return nil, false
	}
	return o.AssignPublicIP, true
}

// HasAssignPublicIP returns a boolean if a field has been set.
func (o *CloudSpecificInfo) HasAssignPublicIP() bool {
	if o != nil && o.AssignPublicIP != nil {
		return true
	}

	return false
}

// SetAssignPublicIP gets a reference to the given bool and assigns it to the AssignPublicIP field.
func (o *CloudSpecificInfo) SetAssignPublicIP(v bool) {
	o.AssignPublicIP = &v
}

// GetAz returns the Az field value if set, zero value otherwise.
func (o *CloudSpecificInfo) GetAz() string {
	if o == nil || o.Az == nil {
		var ret string
		return ret
	}
	return *o.Az
}

// GetAzOk returns a tuple with the Az field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudSpecificInfo) GetAzOk() (*string, bool) {
	if o == nil || o.Az == nil {
		return nil, false
	}
	return o.Az, true
}

// HasAz returns a boolean if a field has been set.
func (o *CloudSpecificInfo) HasAz() bool {
	if o != nil && o.Az != nil {
		return true
	}

	return false
}

// SetAz gets a reference to the given string and assigns it to the Az field.
func (o *CloudSpecificInfo) SetAz(v string) {
	o.Az = &v
}

// GetCloud returns the Cloud field value if set, zero value otherwise.
func (o *CloudSpecificInfo) GetCloud() string {
	if o == nil || o.Cloud == nil {
		var ret string
		return ret
	}
	return *o.Cloud
}

// GetCloudOk returns a tuple with the Cloud field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudSpecificInfo) GetCloudOk() (*string, bool) {
	if o == nil || o.Cloud == nil {
		return nil, false
	}
	return o.Cloud, true
}

// HasCloud returns a boolean if a field has been set.
func (o *CloudSpecificInfo) HasCloud() bool {
	if o != nil && o.Cloud != nil {
		return true
	}

	return false
}

// SetCloud gets a reference to the given string and assigns it to the Cloud field.
func (o *CloudSpecificInfo) SetCloud(v string) {
	o.Cloud = &v
}

// GetInstanceType returns the InstanceType field value if set, zero value otherwise.
func (o *CloudSpecificInfo) GetInstanceType() string {
	if o == nil || o.InstanceType == nil {
		var ret string
		return ret
	}
	return *o.InstanceType
}

// GetInstanceTypeOk returns a tuple with the InstanceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudSpecificInfo) GetInstanceTypeOk() (*string, bool) {
	if o == nil || o.InstanceType == nil {
		return nil, false
	}
	return o.InstanceType, true
}

// HasInstanceType returns a boolean if a field has been set.
func (o *CloudSpecificInfo) HasInstanceType() bool {
	if o != nil && o.InstanceType != nil {
		return true
	}

	return false
}

// SetInstanceType gets a reference to the given string and assigns it to the InstanceType field.
func (o *CloudSpecificInfo) SetInstanceType(v string) {
	o.InstanceType = &v
}

// GetMountRoots returns the MountRoots field value if set, zero value otherwise.
func (o *CloudSpecificInfo) GetMountRoots() string {
	if o == nil || o.MountRoots == nil {
		var ret string
		return ret
	}
	return *o.MountRoots
}

// GetMountRootsOk returns a tuple with the MountRoots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudSpecificInfo) GetMountRootsOk() (*string, bool) {
	if o == nil || o.MountRoots == nil {
		return nil, false
	}
	return o.MountRoots, true
}

// HasMountRoots returns a boolean if a field has been set.
func (o *CloudSpecificInfo) HasMountRoots() bool {
	if o != nil && o.MountRoots != nil {
		return true
	}

	return false
}

// SetMountRoots gets a reference to the given string and assigns it to the MountRoots field.
func (o *CloudSpecificInfo) SetMountRoots(v string) {
	o.MountRoots = &v
}

// GetPrivateDns returns the PrivateDns field value if set, zero value otherwise.
func (o *CloudSpecificInfo) GetPrivateDns() string {
	if o == nil || o.PrivateDns == nil {
		var ret string
		return ret
	}
	return *o.PrivateDns
}

// GetPrivateDnsOk returns a tuple with the PrivateDns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudSpecificInfo) GetPrivateDnsOk() (*string, bool) {
	if o == nil || o.PrivateDns == nil {
		return nil, false
	}
	return o.PrivateDns, true
}

// HasPrivateDns returns a boolean if a field has been set.
func (o *CloudSpecificInfo) HasPrivateDns() bool {
	if o != nil && o.PrivateDns != nil {
		return true
	}

	return false
}

// SetPrivateDns gets a reference to the given string and assigns it to the PrivateDns field.
func (o *CloudSpecificInfo) SetPrivateDns(v string) {
	o.PrivateDns = &v
}

// GetPrivateIp returns the PrivateIp field value if set, zero value otherwise.
func (o *CloudSpecificInfo) GetPrivateIp() string {
	if o == nil || o.PrivateIp == nil {
		var ret string
		return ret
	}
	return *o.PrivateIp
}

// GetPrivateIpOk returns a tuple with the PrivateIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudSpecificInfo) GetPrivateIpOk() (*string, bool) {
	if o == nil || o.PrivateIp == nil {
		return nil, false
	}
	return o.PrivateIp, true
}

// HasPrivateIp returns a boolean if a field has been set.
func (o *CloudSpecificInfo) HasPrivateIp() bool {
	if o != nil && o.PrivateIp != nil {
		return true
	}

	return false
}

// SetPrivateIp gets a reference to the given string and assigns it to the PrivateIp field.
func (o *CloudSpecificInfo) SetPrivateIp(v string) {
	o.PrivateIp = &v
}

// GetPublicDns returns the PublicDns field value if set, zero value otherwise.
func (o *CloudSpecificInfo) GetPublicDns() string {
	if o == nil || o.PublicDns == nil {
		var ret string
		return ret
	}
	return *o.PublicDns
}

// GetPublicDnsOk returns a tuple with the PublicDns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudSpecificInfo) GetPublicDnsOk() (*string, bool) {
	if o == nil || o.PublicDns == nil {
		return nil, false
	}
	return o.PublicDns, true
}

// HasPublicDns returns a boolean if a field has been set.
func (o *CloudSpecificInfo) HasPublicDns() bool {
	if o != nil && o.PublicDns != nil {
		return true
	}

	return false
}

// SetPublicDns gets a reference to the given string and assigns it to the PublicDns field.
func (o *CloudSpecificInfo) SetPublicDns(v string) {
	o.PublicDns = &v
}

// GetPublicIp returns the PublicIp field value if set, zero value otherwise.
func (o *CloudSpecificInfo) GetPublicIp() string {
	if o == nil || o.PublicIp == nil {
		var ret string
		return ret
	}
	return *o.PublicIp
}

// GetPublicIpOk returns a tuple with the PublicIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudSpecificInfo) GetPublicIpOk() (*string, bool) {
	if o == nil || o.PublicIp == nil {
		return nil, false
	}
	return o.PublicIp, true
}

// HasPublicIp returns a boolean if a field has been set.
func (o *CloudSpecificInfo) HasPublicIp() bool {
	if o != nil && o.PublicIp != nil {
		return true
	}

	return false
}

// SetPublicIp gets a reference to the given string and assigns it to the PublicIp field.
func (o *CloudSpecificInfo) SetPublicIp(v string) {
	o.PublicIp = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *CloudSpecificInfo) GetRegion() string {
	if o == nil || o.Region == nil {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudSpecificInfo) GetRegionOk() (*string, bool) {
	if o == nil || o.Region == nil {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *CloudSpecificInfo) HasRegion() bool {
	if o != nil && o.Region != nil {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *CloudSpecificInfo) SetRegion(v string) {
	o.Region = &v
}

// GetSecondaryPrivateIp returns the SecondaryPrivateIp field value if set, zero value otherwise.
func (o *CloudSpecificInfo) GetSecondaryPrivateIp() string {
	if o == nil || o.SecondaryPrivateIp == nil {
		var ret string
		return ret
	}
	return *o.SecondaryPrivateIp
}

// GetSecondaryPrivateIpOk returns a tuple with the SecondaryPrivateIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudSpecificInfo) GetSecondaryPrivateIpOk() (*string, bool) {
	if o == nil || o.SecondaryPrivateIp == nil {
		return nil, false
	}
	return o.SecondaryPrivateIp, true
}

// HasSecondaryPrivateIp returns a boolean if a field has been set.
func (o *CloudSpecificInfo) HasSecondaryPrivateIp() bool {
	if o != nil && o.SecondaryPrivateIp != nil {
		return true
	}

	return false
}

// SetSecondaryPrivateIp gets a reference to the given string and assigns it to the SecondaryPrivateIp field.
func (o *CloudSpecificInfo) SetSecondaryPrivateIp(v string) {
	o.SecondaryPrivateIp = &v
}

// GetSecondarySubnetId returns the SecondarySubnetId field value if set, zero value otherwise.
func (o *CloudSpecificInfo) GetSecondarySubnetId() string {
	if o == nil || o.SecondarySubnetId == nil {
		var ret string
		return ret
	}
	return *o.SecondarySubnetId
}

// GetSecondarySubnetIdOk returns a tuple with the SecondarySubnetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudSpecificInfo) GetSecondarySubnetIdOk() (*string, bool) {
	if o == nil || o.SecondarySubnetId == nil {
		return nil, false
	}
	return o.SecondarySubnetId, true
}

// HasSecondarySubnetId returns a boolean if a field has been set.
func (o *CloudSpecificInfo) HasSecondarySubnetId() bool {
	if o != nil && o.SecondarySubnetId != nil {
		return true
	}

	return false
}

// SetSecondarySubnetId gets a reference to the given string and assigns it to the SecondarySubnetId field.
func (o *CloudSpecificInfo) SetSecondarySubnetId(v string) {
	o.SecondarySubnetId = &v
}

// GetSubnetId returns the SubnetId field value if set, zero value otherwise.
func (o *CloudSpecificInfo) GetSubnetId() string {
	if o == nil || o.SubnetId == nil {
		var ret string
		return ret
	}
	return *o.SubnetId
}

// GetSubnetIdOk returns a tuple with the SubnetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudSpecificInfo) GetSubnetIdOk() (*string, bool) {
	if o == nil || o.SubnetId == nil {
		return nil, false
	}
	return o.SubnetId, true
}

// HasSubnetId returns a boolean if a field has been set.
func (o *CloudSpecificInfo) HasSubnetId() bool {
	if o != nil && o.SubnetId != nil {
		return true
	}

	return false
}

// SetSubnetId gets a reference to the given string and assigns it to the SubnetId field.
func (o *CloudSpecificInfo) SetSubnetId(v string) {
	o.SubnetId = &v
}

// GetUseTimeSync returns the UseTimeSync field value if set, zero value otherwise.
func (o *CloudSpecificInfo) GetUseTimeSync() bool {
	if o == nil || o.UseTimeSync == nil {
		var ret bool
		return ret
	}
	return *o.UseTimeSync
}

// GetUseTimeSyncOk returns a tuple with the UseTimeSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudSpecificInfo) GetUseTimeSyncOk() (*bool, bool) {
	if o == nil || o.UseTimeSync == nil {
		return nil, false
	}
	return o.UseTimeSync, true
}

// HasUseTimeSync returns a boolean if a field has been set.
func (o *CloudSpecificInfo) HasUseTimeSync() bool {
	if o != nil && o.UseTimeSync != nil {
		return true
	}

	return false
}

// SetUseTimeSync gets a reference to the given bool and assigns it to the UseTimeSync field.
func (o *CloudSpecificInfo) SetUseTimeSync(v bool) {
	o.UseTimeSync = &v
}

func (o CloudSpecificInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AssignPublicIP != nil {
		toSerialize["assignPublicIP"] = o.AssignPublicIP
	}
	if o.Az != nil {
		toSerialize["az"] = o.Az
	}
	if o.Cloud != nil {
		toSerialize["cloud"] = o.Cloud
	}
	if o.InstanceType != nil {
		toSerialize["instance_type"] = o.InstanceType
	}
	if o.MountRoots != nil {
		toSerialize["mount_roots"] = o.MountRoots
	}
	if o.PrivateDns != nil {
		toSerialize["private_dns"] = o.PrivateDns
	}
	if o.PrivateIp != nil {
		toSerialize["private_ip"] = o.PrivateIp
	}
	if o.PublicDns != nil {
		toSerialize["public_dns"] = o.PublicDns
	}
	if o.PublicIp != nil {
		toSerialize["public_ip"] = o.PublicIp
	}
	if o.Region != nil {
		toSerialize["region"] = o.Region
	}
	if o.SecondaryPrivateIp != nil {
		toSerialize["secondary_private_ip"] = o.SecondaryPrivateIp
	}
	if o.SecondarySubnetId != nil {
		toSerialize["secondary_subnet_id"] = o.SecondarySubnetId
	}
	if o.SubnetId != nil {
		toSerialize["subnet_id"] = o.SubnetId
	}
	if o.UseTimeSync != nil {
		toSerialize["useTimeSync"] = o.UseTimeSync
	}
	return json.Marshal(toSerialize)
}

type NullableCloudSpecificInfo struct {
	value *CloudSpecificInfo
	isSet bool
}

func (v NullableCloudSpecificInfo) Get() *CloudSpecificInfo {
	return v.value
}

func (v *NullableCloudSpecificInfo) Set(val *CloudSpecificInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudSpecificInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudSpecificInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudSpecificInfo(val *CloudSpecificInfo) *NullableCloudSpecificInfo {
	return &NullableCloudSpecificInfo{value: val, isSet: true}
}

func (v NullableCloudSpecificInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudSpecificInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


